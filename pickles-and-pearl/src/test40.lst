# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/test40.asm
   1  0000              	device zxspectrum128
   2  0000              ;       colour test
   3  0000
   4  0000              ;       test40.asm
   5  0000              ;       15/09/2019
   6  0000
   7  0000              ;       note: last working test39.asm
   8  0000
   9  0000              ;       done:
  10  0000
  11  0000              ;       horizontal sprites that are masked with background
  12  0000              ;       restore colours on change
  13  0000              ;       background blocks + 128 means they are in the foreground
  14  0000              ;       level renderer
  15  0000              ;       player control and proper arc jump
  16  0000              ;       added expand functionality so that sprites can be expanded out
  17  0000              ;       pass in a 3x3 x 4 frames (2 x left, 2 x right) and it will expand them to the 3k equivalent
  18  0000
  19  0000              ;       added new cat graphics
  20  0000              ;       moved memory around, removed need for blank char saving 1k
  21  0000              ;       move more memory around
  22  0000              ;       added expand functions
  23  0000              ;       added compressed level block data
  24  0000              ;       added decompress to one sprite, need to do others
  25  0000              ;       added level functions, now have compessed levels and sprites
  26  0000              ;       collision detection on other sprites
  27  0000              ;       menu + key redefine
  28  0000              ;       have keys to collect
  29  0000              ;       create different screens for map
  30  0000              ;       add main game menus
  31  0000              ;       add level name functions
  32  0000              ;       add hud
  33  0000
  34  0000              ;       fixed bugs where when you went straight back to the screen to came from
  35  0000              ;       it positioned you incorrectly (ix)
  36  0000
  37  0000              ;       fixed bug where key used xpostemp and randomly corrupted the backbuffer
  38  0000
  39  0000              ;       to do:
  40  0000
  41  0000              ;       add a blox offset for each screen, i.e. number to add on to each block to allow different
  42  0000              ;       screens to contain more than the base 16 blox.
  43  0000
  44  0000              ;       add game over sequence
  45  0000              ;       add end of game sequence
  46  0000              ;       create remaining screens
  47  0000              ;       create front screen gfx
  48  0000              ;       fix player graphics eye
  49  0000              ;       fix player graphics to expand like the others (easier to maintain and reuse for pickles)
  50  0000
  51  0000              ;       2019
  52  0000
  53  0000              ;    ay sound and fx
  54  0000              ;    restructure of code into folders and includes
  55  0000              ;    added 128k Banks and switching - Whole games loads in 8:45
  56  0000
  57  0000              ; attribute colors
  58  0000              paper_black	          equ	%00000000
  59  0000              paper_blue	          equ	%00001000
  60  0000              paper_red	          equ	%00010000
  61  0000              paper_magenta	      equ	%00011000
  62  0000              paper_green	          equ	%00100000
  63  0000              paper_cyan	          equ  %00101000
  64  0000              paper_yellow	      equ	%00110000
  65  0000              paper_white	          equ  %00111000
  66  0000
  67  0000              ink_black	               equ	%00000000
  68  0000              ink_blue	               equ	%00000001
  69  0000              ink_red	               equ	%00000010
  70  0000              ink_magenta	          equ  %00000011
  71  0000              ink_green	               equ  %00000100
  72  0000              ink_cyan	               equ	%00000101
  73  0000              ink_yellow	          equ  %00000110
  74  0000              ink_white	               equ  %00000111
  75  0000
  76  0000              attr_bright              equ %01000000
  77  0000              attr_flash               equ %10000000
  78  0000
  79  0000              attributes               equ 5800h+(yscreenoffset*32)
  80  0000
  81  0000              sprite_size              equ 20
  82  0000              sprite_frame_size        equ 12  ; total chars per frame
  83  0000              sprite_width             equ 3
  84  0000              sprite_height            equ 2
  85  0000
  86  0000
  87  0000
  88  0000              yscreenoffset            equ 2
  89  0000
  90  0000              title equ 0
  91  0000              world1 equ 1
  92  0000              world2 equ 3
  93  0000              world3 equ 4
  94  0000              world4 equ 6
  95  0000              world5 equ 7
  96  0000
  97  0000                        ; Bank 0 - We will put the title code, and big home screen demo
  98  0000                        ; Bank 1 - World 1
  99  0000                        ; Bank 2 - DO NOT USE ($8000)
 100  0000                        ; Bank 3 - World 2
 101  0000                        ; Bank 4 - World 3
 102  0000                        ; Bank 5 - DO NOT USE ($4000)
 103  0000                        ; Bank 6 - World 4
 104  0000                        ; Bank 7 - World 5
 105  0000
 106  0000              	org $6000
 107  6000
 108  6000              ; We have 8k for graphics unexpanded giving us
 109  6000
 110  6000              ; 576 Bytes per sprite (3 x 3 chars, 2 frames per direction) = 14 Sprites total available accross all worlds
 111  6000
 112  6000              sprite_unex_0:
 113  6000                            include "graphics/dogr01i.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogr01i.asm
   1+ 6000              ; ASM source file created by SevenuP v1.20
   2+ 6000              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 6000
   4+ 6000              ;GRAPHIC DATA:
   5+ 6000              ;Pixel Size:      ( 24,  24)
   6+ 6000              ;Char Size:       (  3,   3)
   7+ 6000              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 6000              ;Data Outputted:  Gfx
   9+ 6000              ;Interleave:      Sprite
  10+ 6000              ;Mask:            Yes, before graphic
  11+ 6000
  12+ 6000
  13+ 6000 FE 01 F8 06  	DEFB	254,  1,248,  6,240,  8,224, 23
  13+ 6004 F0 08 E0 17
  14+ 6008 C0 2F 80 4F  	DEFB	192, 47,128, 79,128, 94,128, 94
  14+ 600C 80 5E 80 5E
  15+ 6010 00 BE 00 BE  	DEFB	  0,190,  0,190,  0,188,  0,189
  15+ 6014 00 BC 00 BD
  16+ 6018 00 9D 80 5C  	DEFB	  0,157,128, 92,128, 76,192, 32
  16+ 601C 80 4C C0 20
  17+ 6020 E0 1E F8 05  	DEFB	224, 30,248,  5,144,105,  0,149
  17+ 6024 90 69 00 95
  18+ 6028 00 AC 00 B9  	DEFB	  0,172,  0,185,128, 66,192, 54
  18+ 602C 80 42 C0 36
  19+ 6030 03 FC 01 02  	DEFB	  3,252,  1,  2,  0,249,  0,125
  19+ 6034 00 F9 00 7D
  20+ 6038 00 7E 00 61  	DEFB	  0,126,  0, 97,  0, 78,  0,217
  20+ 603C 00 4E 00 D9
  21+ 6040 00 D9 00 D0  	DEFB	  0,217,  0,208,  0,201,  0,227
  21+ 6044 00 C9 00 E3
  22+ 6048 00 FB 00 1B  	DEFB	  0,251,  0, 27,  0,161,  0,168
  22+ 604C 00 A1 00 A8
  23+ 6050 00 03 00 F9  	DEFB	  0,  3,  0,249,  0,253,  0,253
  23+ 6054 00 FD 00 FD
  24+ 6058 00 FD 00 08  	DEFB	  0,253,  0,  8,  0,119,  0,247
  24+ 605C 00 77 00 F7
  25+ 6060 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  25+ 6064 FF 00 FF 00
  26+ 6068 3F C0 1F 20  	DEFB	 63,192, 31, 32, 15,208,  7, 40
  26+ 606C 0F D0 07 28
  27+ 6070 07 28 07 08  	DEFB	  7, 40,  7,  8,  3,228,  3,244
  27+ 6074 03 E4 03 F4
  28+ 6078 03 F4 03 F4  	DEFB	  3,244,  3,244,  3,228,  7,  8
  28+ 607C 03 E4 07 08
  29+ 6080 0F F0 FF 00  	DEFB	 15,240,255,  0,255,  0,255,  0
  29+ 6084 FF 00 FF 00
  30+ 6088 3F C0 1F 60  	DEFB	 63,192, 31, 96, 31,160, 31,160
  30+ 608C 1F A0 1F A0
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogr01i.asm
 114  6090                            include "graphics/dogl01i.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogl01i.asm
   1+ 6090              ; ASM source file created by SevenuP v1.20
   2+ 6090              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 6090
   4+ 6090              ;GRAPHIC DATA:
   5+ 6090              ;Pixel Size:      ( 24,  24)
   6+ 6090              ;Char Size:       (  3,   3)
   7+ 6090              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 6090              ;Data Outputted:  Gfx
   9+ 6090              ;Interleave:      Sprite
  10+ 6090              ;Mask:            Yes, before graphic
  11+ 6090
  12+ 6090
  13+ 6090 FF 00 FE 01  	DEFB	255,  0,254,  1,252,  2,252,  2
  13+ 6094 FC 02 FC 02
  14+ 6098 F0 0D E0 12  	DEFB	240, 13,224, 18,192, 45,128, 82
  14+ 609C C0 2D 80 52
  15+ 60A0 80 52 80 40  	DEFB	128, 82,128, 64,  0,158,  0,191
  15+ 60A4 00 9E 00 BF
  16+ 60A8 00 BF 00 BF  	DEFB	  0,191,  0,191,  0,158,128, 64
  16+ 60AC 00 9E 80 40
  17+ 60B0 C0 3F FC 02  	DEFB	192, 63,252,  2,252,  2,252,  2
  17+ 60B4 FC 02 FC 02
  18+ 60B8 F0 0E E0 18  	DEFB	240, 14,224, 24,224, 23,224, 23
  18+ 60BC E0 17 E0 17
  19+ 60C0 01 FE 00 01  	DEFB	  1,254,  0,  1,  0,124,  0,251
  19+ 60C4 00 7C 00 FB
  20+ 60C8 00 FB 00 1B  	DEFB	  0,251,  0, 27,  0,201,  0,109
  20+ 60CC 00 C9 00 6D
  21+ 60D0 00 6D 00 2D  	DEFB	  0,109,  0, 45,  0, 76,  0, 30
  21+ 60D4 00 4C 00 1E
  22+ 60D8 00 7E 00 60  	DEFB	  0,126,  0, 96,  0, 20,  0, 84
  22+ 60DC 00 14 00 54
  23+ 60E0 00 01 00 7E  	DEFB	  0,  1,  0,126,  0,254,  0,254
  23+ 60E4 00 FE 00 FE
  24+ 60E8 00 FC 00 42  	DEFB	  0,252,  0, 66,  0,185,  0,189
  24+ 60EC 00 B9 00 BD
  25+ 60F0 FF 00 7F 80  	DEFB	255,  0,127,128, 63, 64, 31,160
  25+ 60F4 3F 40 1F A0
  26+ 60F8 0F D0 07 C8  	DEFB	 15,208,  7,200,  7,232,  7,232
  26+ 60FC 07 E8 07 E8
  27+ 6100 03 F4 03 F4  	DEFB	  3,244,  3,244,  3,244,  3,244
  27+ 6104 03 F4 03 F4
  28+ 6108 03 E4 07 E8  	DEFB	  3,228,  7,232,  7,200, 15, 16
  28+ 610C 07 C8 0F 10
  29+ 6110 1F E0 7F 80  	DEFB	 31,224,127,128, 39, 88,  3,164
  29+ 6114 27 58 03 A4
  30+ 6118 03 D4 03 74  	DEFB	  3,212,  3,116,  7,  8, 15,176
  30+ 611C 07 08 0F B0
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogl01i.asm
 115  6120                            include "graphics/dogr02i.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogr02i.asm
   1+ 6120              ; ASM source file created by SevenuP v1.20
   2+ 6120              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 6120
   4+ 6120              ;GRAPHIC DATA:
   5+ 6120              ;Pixel Size:      ( 24,  24)
   6+ 6120              ;Char Size:       (  3,   3)
   7+ 6120              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 6120              ;Data Outputted:  Gfx
   9+ 6120              ;Interleave:      Sprite
  10+ 6120              ;Mask:            Yes, before graphic
  11+ 6120
  12+ 6120
  13+ 6120 FC 03 F8 04  	DEFB	252,  3,248,  4,240, 11,224, 23
  13+ 6124 F0 0B E0 17
  14+ 6128 C0 27 C0 2F  	DEFB	192, 39,192, 47,192, 47,128, 95
  14+ 612C C0 2F 80 5F
  15+ 6130 80 5F 80 5E  	DEFB	128, 95,128, 94,128, 94,128, 78
  15+ 6134 80 5E 80 4E
  16+ 6138 80 6E C0 26  	DEFB	128,110,192, 38,  0,240,  0,159
  16+ 613C 00 F0 00 9F
  17+ 6140 00 A4 00 BB  	DEFB	  0,164,  0,187,  0,143,128, 99
  17+ 6144 00 8F 80 63
  18+ 6148 C0 37 E0 16  	DEFB	192, 55,224, 22,224, 24,248,  7
  18+ 614C E0 18 F8 07
  19+ 6150 00 01 00 7C  	DEFB	  0,  1,  0,124,  0,190,  0,191
  19+ 6154 00 BE 00 BF
  20+ 6158 00 B0 00 27  	DEFB	  0,176,  0, 39,  0,108,  0,108
  20+ 615C 00 6C 00 6C
  21+ 6160 00 68 00 64  	DEFB	  0,104,  0,100,  0,241,  0,253
  21+ 6164 00 F1 00 FD
  22+ 6168 00 0D 00 50  	DEFB	  0, 13,  0, 80,  0, 84,  0,  1
  22+ 616C 00 54 00 01
  23+ 6170 00 FC 00 FF  	DEFB	  0,252,  0,255,  0,255,  0,102
  23+ 6174 00 FF 00 66
  24+ 6178 00 6E 00 CD  	DEFB	  0,110,  0,205,  0, 50, 50,205
  24+ 617C 00 32 32 CD
  25+ 6180 FF 00 7F 80  	DEFB	255,  0,127,128, 63,192, 31, 96
  25+ 6184 3F C0 1F 60
  26+ 6188 0F 90 07 68  	DEFB	 15,144,  7,104,  3,148,  3,148
  26+ 618C 03 94 03 94
  27+ 6190 03 04 01 F2  	DEFB	  3,  4,  1,242,  1,250,  1,250
  27+ 6194 01 FA 01 FA
  28+ 6198 01 FA 01 F2  	DEFB	  1,250,  1,242,  3,  4,  7,248
  28+ 619C 03 04 07 F8
  29+ 61A0 1F E0 0F 30  	DEFB	 31,224, 15, 48, 15,208, 15,208
  29+ 61A4 0F D0 0F D0
  30+ 61A8 0F D0 0F D0  	DEFB	 15,208, 15,208, 15, 48, 31,224
  30+ 61AC 0F 30 1F E0
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogr02i.asm
 116  61B0                            include "graphics/dogl02i.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogl02i.asm
   1+ 61B0              ; ASM source file created by SevenuP v1.20
   2+ 61B0              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 61B0
   4+ 61B0              ;GRAPHIC DATA:
   5+ 61B0              ;Pixel Size:      ( 24,  24)
   6+ 61B0              ;Char Size:       (  3,   3)
   7+ 61B0              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 61B0              ;Data Outputted:  Gfx
   9+ 61B0              ;Interleave:      Sprite
  10+ 61B0              ;Mask:            Yes, before graphic
  11+ 61B0
  12+ 61B0
  13+ 61B0 FE 01 FC 02  	DEFB	254,  1,252,  2,248,  6,240, 13
  13+ 61B4 F8 06 F0 0D
  14+ 61B8 E0 12 C0 2D  	DEFB	224, 18,192, 45,128, 82,128, 82
  14+ 61BC 80 52 80 52
  15+ 61C0 80 40 00 9E  	DEFB	128, 64,  0,158,  0,191,  0,191
  15+ 61C4 00 BF 00 BF
  16+ 61C8 00 BF 00 9E  	DEFB	  0,191,  0,158,128, 64,192, 63
  16+ 61CC 80 40 C0 3F
  17+ 61D0 F0 0E E0 19  	DEFB	240, 14,224, 25,224, 23,224, 22
  17+ 61D4 E0 17 E0 16
  18+ 61D8 E0 16 E0 17  	DEFB	224, 22,224, 23,224, 24,240, 15
  18+ 61DC E0 18 F0 0F
  19+ 61E0 00 01 00 7C  	DEFB	  0,  1,  0,124,  0,251,  0,251
  19+ 61E4 00 FB 00 FB
  20+ 61E8 00 1B 00 C9  	DEFB	  0, 27,  0,201,  0,109,  0,109
  20+ 61EC 00 6D 00 6D
  21+ 61F0 00 2D 00 4C  	DEFB	  0, 45,  0, 76,  0, 30,  0,126
  21+ 61F4 00 1E 00 7E
  22+ 61F8 00 60 00 14  	DEFB	  0, 96,  0, 20,  0, 84,  0,  1
  22+ 61FC 00 54 00 01
  23+ 6200 00 7E 00 FF  	DEFB	  0,126,  0,255,  0,255,  0,205
  23+ 6204 00 FF 00 CD
  24+ 6208 00 ED 00 66  	DEFB	  0,237,  0,102,  0,152,152,103
  24+ 620C 00 98 98 67
  25+ 6210 7F 80 3F 40  	DEFB	127,128, 63, 64, 31,160, 15,208
  25+ 6214 1F A0 0F D0
  26+ 6218 07 C8 07 E8  	DEFB	  7,200,  7,232,  7,232,  3,244
  26+ 621C 07 E8 03 F4
  27+ 6220 03 F4 03 F4  	DEFB	  3,244,  3,244,  3,244,  3,228
  27+ 6224 03 F4 03 E4
  28+ 6228 03 EC 07 C8  	DEFB	  3,236,  7,200,  1, 30,  1,242
  28+ 622C 01 1E 01 F2
  29+ 6230 01 4A 01 BA  	DEFB	  1, 74,  1,186,  1,226,  3,140
  29+ 6234 01 E2 03 8C
  30+ 6238 07 D8 0F D0  	DEFB	  7,216, 15,208, 15, 48, 63,192
  30+ 623C 0F 30 3F C0
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/dogl02i.asm
 117  6240
 118  6240              sprite_unex_1:
 119  6240
 120  6240                            include "graphics/blocr01.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocr01.asm
   1+ 6240              ; ASM source file created by SevenuP v1.20
   2+ 6240              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 6240
   4+ 6240              ;GRAPHIC DATA:
   5+ 6240              ;Pixel Size:      ( 24,  24)
   6+ 6240              ;Char Size:       (  3,   3)
   7+ 6240              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 6240              ;Data Outputted:  Gfx
   9+ 6240              ;Interleave:      Sprite
  10+ 6240              ;Mask:            Yes, before graphic
  11+ 6240
  12+ 6240
  13+ 6240 FF 00 80 7F  	DEFB	255,  0,128,127,128, 64,128, 64
  13+ 6244 80 40 80 40
  14+ 6248 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  14+ 624C 80 40 80 40
  15+ 6250 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  15+ 6254 80 40 80 40
  16+ 6258 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  16+ 625C 80 40 80 40
  17+ 6260 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  17+ 6264 80 40 80 40
  18+ 6268 80 40 80 40  	DEFB	128, 64,128, 64,128,127,255,  0
  18+ 626C 80 7F FF 00
  19+ 6270 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  19+ 6274 00 00 00 00
  20+ 6278 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  20+ 627C 00 00 00 00
  21+ 6280 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  21+ 6284 00 00 00 00
  22+ 6288 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  22+ 628C 00 00 00 00
  23+ 6290 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  23+ 6294 00 00 00 00
  24+ 6298 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,255,255,  0
  24+ 629C 00 FF FF 00
  25+ 62A0 FF 00 61 9E  	DEFB	255,  0, 97,158, 97,146, 97,146
  25+ 62A4 61 92 61 92
  26+ 62A8 71 8E 7F 80  	DEFB	113,142,127,128,127,128, 63, 64
  26+ 62AC 7F 80 3F 40
  27+ 62B0 01 3E 01 02  	DEFB	  1, 62,  1,  2,  1,  2,  1,  2
  27+ 62B4 01 02 01 02
  28+ 62B8 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  28+ 62BC 01 02 01 02
  29+ 62C0 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  29+ 62C4 01 02 01 02
  30+ 62C8 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,254,255,  0
  30+ 62CC 01 FE FF 00
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocr01.asm
 121  62D0                            include "graphics/blocl01.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocl01.asm
   1+ 62D0              ; ASM source file created by SevenuP v1.20
   2+ 62D0              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 62D0
   4+ 62D0              ;GRAPHIC DATA:
   5+ 62D0              ;Pixel Size:      ( 24,  24)
   6+ 62D0              ;Char Size:       (  3,   3)
   7+ 62D0              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 62D0              ;Data Outputted:  Gfx
   9+ 62D0              ;Interleave:      Sprite
  10+ 62D0              ;Mask:            Yes, before graphic
  11+ 62D0
  12+ 62D0
  13+ 62D0 FF 00 86 79  	DEFB	255,  0,134,121,134, 73,134, 73
  13+ 62D4 86 49 86 49
  14+ 62D8 8E 71 FE 01  	DEFB	142,113,254,  1,254,  1,252,  2
  14+ 62DC FE 01 FC 02
  15+ 62E0 80 7C 80 40  	DEFB	128,124,128, 64,128, 64,128, 64
  15+ 62E4 80 40 80 40
  16+ 62E8 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  16+ 62EC 80 40 80 40
  17+ 62F0 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  17+ 62F4 80 40 80 40
  18+ 62F8 80 40 80 40  	DEFB	128, 64,128, 64,128,127,255,  0
  18+ 62FC 80 7F FF 00
  19+ 6300 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  19+ 6304 00 00 00 00
  20+ 6308 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  20+ 630C 00 00 00 00
  21+ 6310 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  21+ 6314 00 00 00 00
  22+ 6318 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  22+ 631C 00 00 00 00
  23+ 6320 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  23+ 6324 00 00 00 00
  24+ 6328 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,255,255,  0
  24+ 632C 00 FF FF 00
  25+ 6330 FF 00 01 FE  	DEFB	255,  0,  1,254,  1,  2,  1,  2
  25+ 6334 01 02 01 02
  26+ 6338 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  26+ 633C 01 02 01 02
  27+ 6340 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  27+ 6344 01 02 01 02
  28+ 6348 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  28+ 634C 01 02 01 02
  29+ 6350 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  29+ 6354 01 02 01 02
  30+ 6358 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,254,255,  0
  30+ 635C 01 FE FF 00
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocl01.asm
 122  6360                            include "graphics/blocr02.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocr02.asm
   1+ 6360              ; ASM source file created by SevenuP v1.20
   2+ 6360              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 6360
   4+ 6360              ;GRAPHIC DATA:
   5+ 6360              ;Pixel Size:      ( 24,  24)
   6+ 6360              ;Char Size:       (  3,   3)
   7+ 6360              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 6360              ;Data Outputted:  Gfx
   9+ 6360              ;Interleave:      Sprite
  10+ 6360              ;Mask:            Yes, before graphic
  11+ 6360
  12+ 6360
  13+ 6360 FF 00 80 7F  	DEFB	255,  0,128,127,128, 64,128, 64
  13+ 6364 80 40 80 40
  14+ 6368 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  14+ 636C 80 40 80 40
  15+ 6370 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  15+ 6374 80 40 80 40
  16+ 6378 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  16+ 637C 80 40 80 40
  17+ 6380 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  17+ 6384 80 40 80 40
  18+ 6388 80 40 80 40  	DEFB	128, 64,128, 64,128,127,255,  0
  18+ 638C 80 7F FF 00
  19+ 6390 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  19+ 6394 00 00 00 00
  20+ 6398 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  20+ 639C 00 00 00 00
  21+ 63A0 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  21+ 63A4 00 00 00 00
  22+ 63A8 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  22+ 63AC 00 00 00 00
  23+ 63B0 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  23+ 63B4 00 00 00 00
  24+ 63B8 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,255,255,  0
  24+ 63BC 00 FF FF 00
  25+ 63C0 FF 00 41 BE  	DEFB	255,  0, 65,190, 65,162, 65,162
  25+ 63C4 41 A2 41 A2
  26+ 63C8 41 A2 41 A2  	DEFB	 65,162, 65,162, 65,190,127,128
  26+ 63CC 41 BE 7F 80
  27+ 63D0 01 FE 01 02  	DEFB	  1,254,  1,  2,  1,  2,  1,  2
  27+ 63D4 01 02 01 02
  28+ 63D8 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  28+ 63DC 01 02 01 02
  29+ 63E0 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  29+ 63E4 01 02 01 02
  30+ 63E8 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,254,255,  0
  30+ 63EC 01 FE FF 00
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocr02.asm
 123  63F0                            include "graphics/blocl02.asm"         ; 144 bytes
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocl02.asm
   1+ 63F0              ; ASM source file created by SevenuP v1.20
   2+ 63F0              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ 63F0
   4+ 63F0              ;GRAPHIC DATA:
   5+ 63F0              ;Pixel Size:      ( 24,  24)
   6+ 63F0              ;Char Size:       (  3,   3)
   7+ 63F0              ;Sort Priorities: Mask, Char line, Y char, X char
   8+ 63F0              ;Data Outputted:  Gfx
   9+ 63F0              ;Interleave:      Sprite
  10+ 63F0              ;Mask:            Yes, before graphic
  11+ 63F0
  12+ 63F0
  13+ 63F0 FF 00 82 7D  	DEFB	255,  0,130,125,130, 69,130, 69
  13+ 63F4 82 45 82 45
  14+ 63F8 82 45 82 45  	DEFB	130, 69,130, 69,130,125,254,  1
  14+ 63FC 82 7D FE 01
  15+ 6400 80 7F 80 40  	DEFB	128,127,128, 64,128, 64,128, 64
  15+ 6404 80 40 80 40
  16+ 6408 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  16+ 640C 80 40 80 40
  17+ 6410 80 40 80 40  	DEFB	128, 64,128, 64,128, 64,128, 64
  17+ 6414 80 40 80 40
  18+ 6418 80 40 80 40  	DEFB	128, 64,128, 64,128,127,255,  0
  18+ 641C 80 7F FF 00
  19+ 6420 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  19+ 6424 00 00 00 00
  20+ 6428 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  20+ 642C 00 00 00 00
  21+ 6430 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  21+ 6434 00 00 00 00
  22+ 6438 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  22+ 643C 00 00 00 00
  23+ 6440 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  0
  23+ 6444 00 00 00 00
  24+ 6448 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,255,255,  0
  24+ 644C 00 FF FF 00
  25+ 6450 FF 00 01 FE  	DEFB	255,  0,  1,254,  1,  2,  1,  2
  25+ 6454 01 02 01 02
  26+ 6458 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  26+ 645C 01 02 01 02
  27+ 6460 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  27+ 6464 01 02 01 02
  28+ 6468 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  28+ 646C 01 02 01 02
  29+ 6470 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,  2,  1,  2
  29+ 6474 01 02 01 02
  30+ 6478 01 02 01 02  	DEFB	  1,  2,  1,  2,  1,254,255,  0
  30+ 647C 01 FE FF 00
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/blocl02.asm
 124  6480
 125  6480 00 00 00...  sprite_unex_2: defs $240
 126  66C0 00 00 00...  sprite_unex_3: defs $240
 127  6900 00 00 00...  sprite_unex_4: defs $240
 128  6B40 00 00 00...  sprite_unex_5: defs $240
 129  6D80 00 00 00...  sprite_unex_6: defs $240
 130  6FC0 00 00 00...  sprite_unex_7: defs $240
 131  7200 00 00 00...  sprite_unex_8: defs $240
 132  7440 00 00 00...  sprite_unex_9: defs $240
 133  7680 00 00 00...  sprite_unex_A: defs $240
 134  78C0 00 00 00...  sprite_unex_B: defs $240
 135  7B00 00 00 00...  sprite_unex_C: defs $240
 136  7D40 00 00 00...  sprite_unex_D: defs $240
 137  7F80
 138  7F80                        org $8000
 139  8000              main:
 140  8000
 141  8000 C3 D6 8B               jp go
 142  8003
 143  8003                        ; 128k Bank Switcher
 144  8003                        ; a has the bank number
 145  8003              switchbank:
 146  8003
 147  8003 F3                     di
 148  8004 47                     ld b, a
 149  8005 F6 10        		  or 16
 150  8007 3A 5C 5B               ld A, (#5B5C) ; in 5B5C is the current memory page
 151  800A E6 F8                  and #F8
 152  800C B0                     or b
 153  800D 32 5C 5B               ld (#5B5C), A ; you have to preserve it, or the BASIC goes crazy
 154  8010
 155  8010 01 FD 7F               ld BC, #7FFD
 156  8013 ED 79                  out (C), A
 157  8015 FB                     ei
 158  8016
 159  8016 C9                     ret
 160  8017                         ; music
 161  8017                        include "../resources/pnpmusicpasmo.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/../resources/pnpmusicpasmo.asm
   1+ 8017              PLY_AKM_REGISTERS_OFFSETVOLUME equ $+1
   2+ 8017              PLY_AKM_DATA_OFFSETTRANSPOSITION equ $+1
   3+ 8017              PLY_AKM_OFFSET1B equ $+1
   4+ 8017              PLY_AKM_STOP_SOUNDS equ $+1
   5+ 8017              PLY_AKM_USE_HOOKS equ $+1
   6+ 8017              PLY_AKM_SOUNDEFFECTDATA_OFFSETINVERTEDVOLUME equ $+2
   7+ 8017              PLY_AKM_OFFSET2B equ $+2
   8+ 8017              PLY_AKM_DATA_OFFSETPTSTARTTRACK equ $+2
   9+ 8017              PLY_AKM_START
  10+ 8017 C3 51 81     PLY_AKM_DATA_OFFSETWAITEMPTYCELL jp PLY_AKM_INIT
  11+ 801A              PLY_AKM_SOUNDEFFECTDATA_OFFSETSPEED equ $+1
  12+ 801A              PLY_AKM_DATA_OFFSETPTTRACK equ $+1
  13+ 801A              PLY_AKM_REGISTERS_OFFSETSOFTWAREPERIODLSB equ $+2
  14+ 801A C3 E5 81     PLY_AKM_SOUNDEFFECTDATA_OFFSETCURRENTSTEP jp PLY_AKM_PLAY
  15+ 801D              PLY_AKM_DATA_OFFSETESCAPENOTE equ $+1
  16+ 801D              PLY_AKM_CHANNEL_SOUNDEFFECTDATASIZE equ $+2
  17+ 801D              PLY_AKM_DATA_OFFSETESCAPEINSTRUMENT equ $+2
  18+ 801D C3 CF 81     PLY_AKM_DATA_OFFSETBASENOTE jp PLY_AKM_INITVARS_END
  19+ 8020              PLY_AKM_DATA_OFFSETPTINSTRUMENT equ $+1
  20+ 8020              PLY_AKM_INITSOUNDEFFECTS
  21+ 8020              PLY_AKM_DATA_OFFSETESCAPEWAIT
  22+ 8020              PLY_AKM_DATA_OFFSETSECONDARYINSTRUMENT
  23+ 8020 22 26 80     PLY_AKM_REGISTERS_OFFSETSOFTWAREPERIODMSB ld (PLY_AKM_DATA_OFFSETISPITCHUPDOWNUSED),hl
  24+ 8023 C9           PLY_AKM_DATA_OFFSETINSTRUMENTCURRENTSTEP ret
  25+ 8024              PLY_AKM_PLAYSOUNDEFFECT
  26+ 8024 3D           PLY_AKM_DATA_OFFSETINSTRUMENTSPEED dec a
  27+ 8025              PLY_AKM_DATA_OFFSETISPITCHUPDOWNUSED equ $+1
  28+ 8025              PLY_AKM_DATA_OFFSETTRACKPITCHINTEGER equ $+2
  29+ 8025              PLY_AKM_PTSOUNDEFFECTTABLE
  30+ 8025 21 00 00     PLY_AKM_DATA_OFFSETTRACKINVERTEDVOLUME ld hl,0
  31+ 8028 5F               ld e,a
  32+ 8029              PLY_AKM_DATA_OFFSETTRACKPITCHSPEED equ $+1
  33+ 8029 16 00        PLY_AKM_DATA_OFFSETTRACKPITCHDECIMAL ld d,0
  34+ 802B 19               add hl,de
  35+ 802C 19           PLY_AKM_DATA_OFFSETISARPEGGIOTABLEUSED add hl,de
  36+ 802D 5E           PLY_AKM_DATA_OFFSETPTARPEGGIOTABLE ld e,(hl)
  37+ 802E 23               inc hl
  38+ 802F 56           PLY_AKM_DATA_OFFSETPTARPEGGIOOFFSET ld d,(hl)
  39+ 8030 1A           PLY_AKM_DATA_OFFSETARPEGGIOCURRENTSTEP ld a,(de)
  40+ 8031 13           PLY_AKM_DATA_OFFSETARPEGGIOCURRENTSPEED inc de
  41+ 8032 08           PLY_AKM_DATA_OFFSETARPEGGIOORIGINALSPEED ex af,af'
  42+ 8033 78           PLY_AKM_DATA_OFFSETCURRENTARPEGGIOVALUE ld a,b
  43+ 8034              PLY_AKM_DATA_OFFSETPTPITCHTABLE equ $+1
  44+ 8034 21 39 81     PLY_AKM_DATA_OFFSETISPITCHTABLEUSED ld hl,PLY_AKM_CHANNEL1_SOUNDEFFECTDATA
  45+ 8037              PLY_AKM_DATA_OFFSETPITCHCURRENTSTEP equ $+1
  46+ 8037 06 00        PLY_AKM_DATA_OFFSETPTPITCHOFFSET ld b,0
  47+ 8039              PLY_AKM_DATA_OFFSETPITCHORIGINALSPEED equ $+1
  48+ 8039 CB 21        PLY_AKM_DATA_OFFSETPITCHCURRENTSPEED sla c
  49+ 803B CB 21        PLY_AKM_DATA_OFFSETCURRENTPITCHTABLEVALUE sla c
  50+ 803D CB 21        PLY_AKM_TRACK1_DATA_SIZE sla c
  51+ 803F 09               add hl,bc
  52+ 8040 73               ld (hl),e
  53+ 8041 23               inc hl
  54+ 8042 72               ld (hl),d
  55+ 8043 23               inc hl
  56+ 8044 77               ld (hl),a
  57+ 8045 23               inc hl
  58+ 8046 36 00            ld (hl),0
  59+ 8048 23               inc hl
  60+ 8049 08               ex af,af'
  61+ 804A 77               ld (hl),a
  62+ 804B C9               ret
  63+ 804C 87           PLY_AKM_STOPSOUNDEFFECTFROMCHANNEL add a,a
  64+ 804D 87               add a,a
  65+ 804E 87               add a,a
  66+ 804F 5F               ld e,a
  67+ 8050 16 00            ld d,0
  68+ 8052 21 39 81         ld hl,PLY_AKM_CHANNEL1_SOUNDEFFECTDATA
  69+ 8055 19               add hl,de
  70+ 8056 72               ld (hl),d
  71+ 8057 23               inc hl
  72+ 8058 72               ld (hl),d
  73+ 8059 C9               ret
  74+ 805A 17           PLY_AKM_PLAYSOUNDEFFECTSSTREAM rla
  75+ 805B 17               rla
  76+ 805C DD 21 39 81      ld ix,PLY_AKM_CHANNEL1_SOUNDEFFECTDATA
  77+ 8060 FD 21 2D 87      ld iy,PLY_AKM_TRACK3_DATA_END
  78+ 8064 4F               ld c,a
  79+ 8065 CD 87 80         call PLY_AKM_PSES_PLAY
  80+ 8068 DD 21 41 81      ld ix,PLY_AKM_CHANNEL2_SOUNDEFFECTDATA
  81+ 806C FD 21 39 87      ld iy,PLY_AKM_TRACK2_REGISTERS
  82+ 8070 CB 39            srl c
  83+ 8072 CD 87 80         call PLY_AKM_PSES_PLAY
  84+ 8075 DD 21 49 81      ld ix,PLY_AKM_CHANNEL3_SOUNDEFFECTDATA
  85+ 8079 FD 21 45 87      ld iy,PLY_AKM_TRACK3_REGISTERS
  86+ 807D CB 19            rr c
  87+ 807F CD 87 80         call PLY_AKM_PSES_PLAY
  88+ 8082 79               ld a,c
  89+ 8083 32 56 87         ld (PLY_AKM_MIXERREGISTER),a
  90+ 8086 C9               ret
  91+ 8087 DD 6E 00     PLY_AKM_PSES_PLAY ld l,(ix+0)
  92+ 808A DD 66 01         ld h,(ix+1)
  93+ 808D 7D               ld a,l
  94+ 808E B4               or h
  95+ 808F C8               ret z
  96+ 8090 7E           PLY_AKM_PSES_READFIRSTBYTE ld a,(hl)
  97+ 8091 23               inc hl
  98+ 8092 47               ld b,a
  99+ 8093 1F               rra
 100+ 8094 38 3F            jr c,PLY_AKM_PSES_SOFTWAREORSOFTWAREANDHARDWARE
 101+ 8096 1F               rra
 102+ 8097 38 35            jr c,PLY_AKM_PSES_HARDWAREONLY
 103+ 8099 1F               rra
 104+ 809A 38 0A            jr c,PLY_AKM_PSES_S_ENDORLOOP
 105+ 809C CD 2D 81         call PLY_AKM_PSES_MANAGEVOLUMEFROMA_FILTER4BITS
 106+ 809F CB 10            rl b
 107+ 80A1 DC 0F 81         call c,PLY_AKM_PSES_READNOISEANDOPENNOISECHANNEL
 108+ 80A4 18 11            jr PLY_AKM_PSES_SAVEPOINTERANDEXIT
 109+ 80A6 1F           PLY_AKM_PSES_S_ENDORLOOP rra
 110+ 80A7 38 08            jr c,PLY_AKM_PSES_S_LOOP
 111+ 80A9 AF               xor a
 112+ 80AA DD 77 00         ld (ix+0),a
 113+ 80AD DD 77 01         ld (ix+1),a
 114+ 80B0 C9               ret
 115+ 80B1 7E           PLY_AKM_PSES_S_LOOP ld a,(hl)
 116+ 80B2 23               inc hl
 117+ 80B3 66               ld h,(hl)
 118+ 80B4 6F               ld l,a
 119+ 80B5 18 D9            jr PLY_AKM_PSES_READFIRSTBYTE
 120+ 80B7 DD 7E 03     PLY_AKM_PSES_SAVEPOINTERANDEXIT ld a,(ix+3)
 121+ 80BA DD BE 04         cp (ix+4)
 122+ 80BD 38 0B            jr c,PLY_AKM_PSES_NOTREACHED
 123+ 80BF DD 36 03 00      ld (ix+3),0
 124+ 80C3 DD               db 221
 125+ 80C4 75               db 117
 126+ 80C5 00               db +0
 127+ 80C6 DD               db 221
 128+ 80C7 74               db 116
 129+ 80C8 01               db +1
 130+ 80C9 C9               ret
 131+ 80CA DD 34 03     PLY_AKM_PSES_NOTREACHED inc (ix+3)
 132+ 80CD C9               ret
 133+ 80CE CD F1 80     PLY_AKM_PSES_HARDWAREONLY call PLY_AKM_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE
 134+ 80D1 CB D1            set 2,c
 135+ 80D3 18 E2            jr PLY_AKM_PSES_SAVEPOINTERANDEXIT
 136+ 80D5 1F           PLY_AKM_PSES_SOFTWAREORSOFTWAREANDHARDWARE rra
 137+ 80D6 38 0F            jr c,PLY_AKM_PSES_SOFTWAREANDHARDWARE
 138+ 80D8 CD 2D 81         call PLY_AKM_PSES_MANAGEVOLUMEFROMA_FILTER4BITS
 139+ 80DB CB 10            rl b
 140+ 80DD DC 0F 81         call c,PLY_AKM_PSES_READNOISEANDOPENNOISECHANNEL
 141+ 80E0 CB 91            res 2,c
 142+ 80E2 CD 22 81         call PLY_AKM_PSES_READSOFTWAREPERIOD
 143+ 80E5 18 D0            jr PLY_AKM_PSES_SAVEPOINTERANDEXIT
 144+ 80E7 CD F1 80     PLY_AKM_PSES_SOFTWAREANDHARDWARE call PLY_AKM_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE
 145+ 80EA CD 22 81         call PLY_AKM_PSES_READSOFTWAREPERIOD
 146+ 80ED CB 91            res 2,c
 147+ 80EF 18 C6            jr PLY_AKM_PSES_SAVEPOINTERANDEXIT
 148+ 80F1 1F           PLY_AKM_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE rra
 149+ 80F2 30 07            jr nc,PLY_AKM_PSES_H_AFTERRETRIG
 150+ 80F4 57               ld d,a
 151+ 80F5 3E FF            ld a,255
 152+ 80F7 32 D5 82         ld (PLY_AKM_SETREG13OLD+1),a
 153+ 80FA 7A               ld a,d
 154+ 80FB E6 07        PLY_AKM_PSES_H_AFTERRETRIG and 7
 155+ 80FD C6 08            add a,8
 156+ 80FF 32 D3 82         ld (PLY_AKM_SENDPSGREGISTERR13+1),a
 157+ 8102 CB 10            rl b
 158+ 8104 DC 0F 81         call c,PLY_AKM_PSES_READNOISEANDOPENNOISECHANNEL
 159+ 8107 CD 17 81         call PLY_AKM_PSES_READHARDWAREPERIOD
 160+ 810A 3E 10            ld a,16
 161+ 810C C3 2F 81         jp PLY_AKM_PSES_MANAGEVOLUMEFROMA_HARD
 162+ 810F 7E           PLY_AKM_PSES_READNOISEANDOPENNOISECHANNEL ld a,(hl)
 163+ 8110 32 52 87         ld (PLY_AKM_NOISEREGISTER),a
 164+ 8113 23               inc hl
 165+ 8114 CB A9            res 5,c
 166+ 8116 C9               ret
 167+ 8117 7E           PLY_AKM_PSES_READHARDWAREPERIOD ld a,(hl)
 168+ 8118 32 5A 87         ld (PLY_AKM_REG11),a
 169+ 811B 23               inc hl
 170+ 811C 7E               ld a,(hl)
 171+ 811D 32 5E 87         ld (PLY_AKM_REG12),a
 172+ 8120 23               inc hl
 173+ 8121 C9               ret
 174+ 8122 7E           PLY_AKM_PSES_READSOFTWAREPERIOD ld a,(hl)
 175+ 8123 FD 77 05         ld (iy+5),a
 176+ 8126 23               inc hl
 177+ 8127 7E               ld a,(hl)
 178+ 8128 FD 77 09         ld (iy+9),a
 179+ 812B 23               inc hl
 180+ 812C C9               ret
 181+ 812D E6 0F        PLY_AKM_PSES_MANAGEVOLUMEFROMA_FILTER4BITS and 15
 182+ 812F DD 96 02     PLY_AKM_PSES_MANAGEVOLUMEFROMA_HARD sub (ix+2)
 183+ 8132 30 01            jr nc,PLY_AKM_PSES_MVFA_NOOVERFLOW
 184+ 8134 AF               xor a
 185+ 8135 FD 77 01     PLY_AKM_PSES_MVFA_NOOVERFLOW ld (iy+1),a
 186+ 8138 C9               ret
 187+ 8139 00 00        PLY_AKM_CHANNEL1_SOUNDEFFECTDATA dw 0
 188+ 813B 00           PLY_AKM_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME db 0
 189+ 813C 00           PLY_AKM_CHANNEL1_SOUNDEFFECTCURRENTSTEP db 0
 190+ 813D 00           PLY_AKM_CHANNEL1_SOUNDEFFECTSPEED db 0
 191+ 813E 00               db 0
 192+ 813F 00               db 0
 193+ 8140 00               db 0
 194+ 8141 00           PLY_AKM_CHANNEL2_SOUNDEFFECTDATA db 0
 195+ 8142 00               db 0
 196+ 8143 00               db 0
 197+ 8144 00               db 0
 198+ 8145 00               db 0
 199+ 8146 00               db 0
 200+ 8147 00               db 0
 201+ 8148 00               db 0
 202+ 8149 00           PLY_AKM_CHANNEL3_SOUNDEFFECTDATA db 0
 203+ 814A 00               db 0
 204+ 814B 00               db 0
 205+ 814C 00               db 0
 206+ 814D 00               db 0
 207+ 814E 00               db 0
 208+ 814F 00               db 0
 209+ 8150 00               db 0
 210+ 8151 11 6B 82     PLY_AKM_INIT ld de,PLY_AKM_READLINE+1
 211+ 8154 ED A0            ldi
 212+ 8156 ED A0            ldi
 213+ 8158 11 60 86         ld de,PLY_AKM_PTARPEGGIOS+1
 214+ 815B ED A0            ldi
 215+ 815D ED A0            ldi
 216+ 815F 11 95 86         ld de,PLY_AKM_PTPITCHES+1
 217+ 8162 ED A0            ldi
 218+ 8164 ED A0            ldi
 219+ 8166 87               add a,a
 220+ 8167 5F               ld e,a
 221+ 8168 16 00            ld d,0
 222+ 816A 19               add hl,de
 223+ 816B 7E               ld a,(hl)
 224+ 816C 23               inc hl
 225+ 816D 66               ld h,(hl)
 226+ 816E 6F               ld l,a
 227+ 816F DD 21 B5 81      ld ix,PLY_AKM_INITVARS_START
 228+ 8173 3E 0D            ld a,13
 229+ 8175 DD 5E 00     PLY_AKM_INITVARS_LOOP ld e,(ix+0)
 230+ 8178 DD 56 01         ld d,(ix+1)
 231+ 817B DD 23            inc ix
 232+ 817D DD 23            inc ix
 233+ 817F ED A0            ldi
 234+ 8181 3D               dec a
 235+ 8182 20 F1            jr nz,PLY_AKM_INITVARS_LOOP
 236+ 8184 32 F2 81         ld (PLY_AKM_PATTERNREMAININGHEIGHT+1),a
 237+ 8187 EB               ex de,hl
 238+ 8188 21 01 82         ld hl,PLY_AKM_PTLINKER+1
 239+ 818B 73               ld (hl),e
 240+ 818C 23               inc hl
 241+ 818D 72               ld (hl),d
 242+ 818E 21 BB 86         ld hl,PLY_AKM_TRACK1_DATA
 243+ 8191 11 BC 86         ld de,PLY_AKM_TRACK1_TRANSPOSITION
 244+ 8194 01 25 00         ld bc,37
 245+ 8197 77               ld (hl),a
 246+ 8198 ED B0            ldir
 247+ 819A 3A ED 81         ld a,(PLY_AKM_SPEED+1)
 248+ 819D 3D               dec a
 249+ 819E 32 EA 81         ld (PLY_AKM_TICKCOUNTER+1),a
 250+ 81A1 2A 6B 82         ld hl,(PLY_AKM_READLINE+1)
 251+ 81A4 5E               ld e,(hl)
 252+ 81A5 23               inc hl
 253+ 81A6 56               ld d,(hl)
 254+ 81A7 13               inc de
 255+ 81A8 ED 53 C5 86      ld (PLY_AKM_TRACK1_PTINSTRUMENT),de
 256+ 81AC ED 53 EB 86      ld (PLY_AKM_TRACK2_PTINSTRUMENT),de
 257+ 81B0 ED 53 11 87      ld (PLY_AKM_TRACK3_PTINSTRUMENT),de
 258+ 81B4 C9               ret
 259+ 81B5 6E 82        PLY_AKM_INITVARS_START dw PLY_AKM_NOTEINDEXTABLE+1
 260+ 81B7 6F 82            dw PLY_AKM_NOTEINDEXTABLE+2
 261+ 81B9 FD 81            dw PLY_AKM_LINKER+1
 262+ 81BB FE 81            dw PLY_AKM_LINKER+2
 263+ 81BD ED 81            dw PLY_AKM_SPEED+1
 264+ 81BF 9A 83            dw PLY_AKM_RT_PRIMARYINSTRUMENT+1
 265+ 81C1 96 83            dw PLY_AKM_RT_SECONDARYINSTRUMENT+1
 266+ 81C3 F0 83            dw PLY_AKM_RT_PRIMARYWAIT+1
 267+ 81C5 F4 83            dw PLY_AKM_RT_SECONDARYWAIT+1
 268+ 81C7 0E 82            dw PLY_AKM_DEFAULTSTARTNOTEINTRACKS+1
 269+ 81C9 19 82            dw PLY_AKM_DEFAULTSTARTINSTRUMENTINTRACKS+1
 270+ 81CB 24 82            dw PLY_AKM_DEFAULTSTARTWAITINTRACKS+1
 271+ 81CD 46 83            dw PLY_AKM_FLAGNOTEANDEFFECTINCELL+1
 272+ 81CF              PLY_AKM_INITVARS_END
 273+ 81CF ED 73 E0 82  PLY_AKM_STOP ld (PLY_AKM_SENDPSGREGISTEREND+1),sp
 274+ 81D3 AF               xor a
 275+ 81D4 32 2E 87         ld (PLY_AKM_TRACK1_VOLUME),a
 276+ 81D7 32 3A 87         ld (PLY_AKM_TRACK2_VOLUME),a
 277+ 81DA 32 46 87         ld (PLY_AKM_TRACK3_VOLUME),a
 278+ 81DD 3E 3F            ld a,63
 279+ 81DF 32 56 87         ld (PLY_AKM_MIXERREGISTER),a
 280+ 81E2 C3 C2 82         jp PLY_AKM_SENDPSG
 281+ 81E5 ED 73 E0 82  PLY_AKM_PLAY ld (PLY_AKM_SENDPSGREGISTEREND+1),sp
 282+ 81E9 3E 00        PLY_AKM_TICKCOUNTER ld a,0
 283+ 81EB 3C               inc a
 284+ 81EC FE 01        PLY_AKM_SPEED cp 1
 285+ 81EE C2 87 82         jp nz,PLY_AKM_TICKCOUNTERMANAGED
 286+ 81F1 3E 00        PLY_AKM_PATTERNREMAININGHEIGHT ld a,0
 287+ 81F3 D6 01            sub 1
 288+ 81F5 38 05            jr c,PLY_AKM_LINKER
 289+ 81F7 32 F2 81         ld (PLY_AKM_PATTERNREMAININGHEIGHT+1),a
 290+ 81FA 18 6E            jr PLY_AKM_READLINE
 291+ 81FC              PLY_AKM_LINKER
 292+ 81FC 11 00 00     PLY_AKM_TRACKINDEX ld de,0
 293+ 81FF D9               exx
 294+ 8200 21 00 00     PLY_AKM_PTLINKER ld hl,0
 295+ 8203 AF           PLY_AKM_LINKERPOSTPT xor a
 296+ 8204 32 BB 86         ld (PLY_AKM_TRACK1_DATA),a
 297+ 8207 32 E1 86         ld (PLY_AKM_TRACK1_DATA_END),a
 298+ 820A 32 07 87         ld (PLY_AKM_TRACK2_DATA_END),a
 299+ 820D 3E 00        PLY_AKM_DEFAULTSTARTNOTEINTRACKS ld a,0
 300+ 820F 32 C2 86         ld (PLY_AKM_TRACK1_ESCAPENOTE),a
 301+ 8212 32 E8 86         ld (PLY_AKM_TRACK2_ESCAPENOTE),a
 302+ 8215 32 0E 87         ld (PLY_AKM_TRACK3_ESCAPENOTE),a
 303+ 8218 3E 00        PLY_AKM_DEFAULTSTARTINSTRUMENTINTRACKS ld a,0
 304+ 821A 32 C3 86         ld (PLY_AKM_TRACK1_ESCAPEINSTRUMENT),a
 305+ 821D 32 E9 86         ld (PLY_AKM_TRACK2_ESCAPEINSTRUMENT),a
 306+ 8220 32 0F 87         ld (PLY_AKM_TRACK3_ESCAPEINSTRUMENT),a
 307+ 8223 3E 00        PLY_AKM_DEFAULTSTARTWAITINTRACKS ld a,0
 308+ 8225 32 C4 86         ld (PLY_AKM_TRACK1_ESCAPEWAIT),a
 309+ 8228 32 EA 86         ld (PLY_AKM_TRACK2_ESCAPEWAIT),a
 310+ 822B 32 10 87         ld (PLY_AKM_TRACK3_ESCAPEWAIT),a
 311+ 822E 46               ld b,(hl)
 312+ 822F 23               inc hl
 313+ 8230 CB 18            rr b
 314+ 8232 30 0E            jr nc,PLY_AKM_LINKERAFTERSPEEDCHANGE
 315+ 8234 7E               ld a,(hl)
 316+ 8235 23               inc hl
 317+ 8236 B7               or a
 318+ 8237 20 06            jr nz,PLY_AKM_LINKERSPEEDCHANGE
 319+ 8239 7E               ld a,(hl)
 320+ 823A 23               inc hl
 321+ 823B 66               ld h,(hl)
 322+ 823C 6F               ld l,a
 323+ 823D 18 C4            jr PLY_AKM_LINKERPOSTPT
 324+ 823F 32 ED 81     PLY_AKM_LINKERSPEEDCHANGE ld (PLY_AKM_SPEED+1),a
 325+ 8242 CB 18        PLY_AKM_LINKERAFTERSPEEDCHANGE rr b
 326+ 8244 30 07            jr nc,PLY_AKM_LINKERUSEPREVIOUSHEIGHT
 327+ 8246 7E               ld a,(hl)
 328+ 8247 23               inc hl
 329+ 8248 32 4E 82         ld (PLY_AKM_LINKERUSEPREVIOUSHEIGHT+1),a
 330+ 824B 18 02            jr PLY_AKM_LINKERSETREMAININGHEIGHT
 331+ 824D              PLY_AKM_LINKERUSEPREVIOUSHEIGHT
 332+ 824D 3E 00        PLY_AKM_LINKERPREVIOUSREMAININGHEIGHT ld a,0
 333+ 824F 32 F2 81     PLY_AKM_LINKERSETREMAININGHEIGHT ld (PLY_AKM_PATTERNREMAININGHEIGHT+1),a
 334+ 8252 DD 21 BB 86      ld ix,PLY_AKM_TRACK1_DATA
 335+ 8256 CD E3 82         call PLY_AKM_CHECKTRANSPOSITIONANDTRACK
 336+ 8259 DD 21 E1 86      ld ix,PLY_AKM_TRACK1_DATA_END
 337+ 825D CD E3 82         call PLY_AKM_CHECKTRANSPOSITIONANDTRACK
 338+ 8260 DD 21 07 87      ld ix,PLY_AKM_TRACK2_DATA_END
 339+ 8264 CD E3 82         call PLY_AKM_CHECKTRANSPOSITIONANDTRACK
 340+ 8267 22 01 82         ld (PLY_AKM_PTLINKER+1),hl
 341+ 826A              PLY_AKM_READLINE
 342+ 826A 11 00 00     PLY_AKM_PTINSTRUMENTS ld de,0
 343+ 826D 01 00 00     PLY_AKM_NOTEINDEXTABLE ld bc,0
 344+ 8270 D9               exx
 345+ 8271 DD 21 BB 86      ld ix,PLY_AKM_TRACK1_DATA
 346+ 8275 CD 2F 83         call PLY_AKM_READTRACK
 347+ 8278 DD 21 E1 86      ld ix,PLY_AKM_TRACK1_DATA_END
 348+ 827C CD 2F 83         call PLY_AKM_READTRACK
 349+ 827F DD 21 07 87      ld ix,PLY_AKM_TRACK2_DATA_END
 350+ 8283 CD 2F 83         call PLY_AKM_READTRACK
 351+ 8286 AF               xor a
 352+ 8287 32 EA 81     PLY_AKM_TICKCOUNTERMANAGED ld (PLY_AKM_TICKCOUNTER+1),a
 353+ 828A 11 65 87         ld de,PLY_AKM_PERIODTABLE
 354+ 828D D9               exx
 355+ 828E 0E E0            ld c,224
 356+ 8290 DD 21 BB 86      ld ix,PLY_AKM_TRACK1_DATA
 357+ 8294 CD 3B 84         call PLY_AKM_MANAGEEFFECTS
 358+ 8297 FD 21 2D 87      ld iy,PLY_AKM_TRACK3_DATA_END
 359+ 829B CD DA 84         call PLY_AKM_PLAYSOUNDSTREAM
 360+ 829E CB 39            srl c
 361+ 82A0 DD 21 E1 86      ld ix,PLY_AKM_TRACK1_DATA_END
 362+ 82A4 CD 3B 84         call PLY_AKM_MANAGEEFFECTS
 363+ 82A7 FD 21 39 87      ld iy,PLY_AKM_TRACK2_REGISTERS
 364+ 82AB CD DA 84         call PLY_AKM_PLAYSOUNDSTREAM
 365+ 82AE CB 19            rr c
 366+ 82B0 DD 21 07 87      ld ix,PLY_AKM_TRACK2_DATA_END
 367+ 82B4 CD 3B 84         call PLY_AKM_MANAGEEFFECTS
 368+ 82B7 FD 21 45 87      ld iy,PLY_AKM_TRACK3_REGISTERS
 369+ 82BB CD DA 84         call PLY_AKM_PLAYSOUNDSTREAM
 370+ 82BE 79               ld a,c
 371+ 82BF CD 5A 80         call PLY_AKM_PLAYSOUNDEFFECTSSTREAM
 372+ 82C2 31 2D 87     PLY_AKM_SENDPSG ld sp,PLY_AKM_TRACK3_DATA_END
 373+ 82C5 11 FF BF         ld de,49151
 374+ 82C8 0E FD            ld c,253
 375+ 82CA E1           PLY_AKM_SENDPSGREGISTER pop hl
 376+ 82CB 43           PLY_AKM_SENDPSGREGISTERAFTERPOP ld b,e
 377+ 82CC ED 69            out (c),l
 378+ 82CE 42               ld b,d
 379+ 82CF ED 61            out (c),h
 380+ 82D1 C9               ret
 381+ 82D2              PLY_AKM_SENDPSGREGISTERR13
 382+ 82D2 3E 00        PLY_AKM_SETREG13 ld a,0
 383+ 82D4 FE 00        PLY_AKM_SETREG13OLD cp 0
 384+ 82D6 28 07            jr z,PLY_AKM_SENDPSGREGISTEREND
 385+ 82D8 32 D5 82         ld (PLY_AKM_SETREG13OLD+1),a
 386+ 82DB 67               ld h,a
 387+ 82DC 2E 0D            ld l,13
 388+ 82DE C9               ret
 389+ 82DF              PLY_AKM_SENDPSGREGISTEREND
 390+ 82DF 31 00 00     PLY_AKM_SAVESP ld sp,0
 391+ 82E2 C9               ret
 392+ 82E3 CB 18        PLY_AKM_CHECKTRANSPOSITIONANDTRACK rr b
 393+ 82E5 30 05            jr nc,PLY_AKM_CHECKTRANSPOSITIONANDTRACK_AFTERTRANSPOSITION
 394+ 82E7 7E               ld a,(hl)
 395+ 82E8 DD 77 01         ld (ix+1),a
 396+ 82EB 23               inc hl
 397+ 82EC CB 18        PLY_AKM_CHECKTRANSPOSITIONANDTRACK_AFTERTRANSPOSITION rr b
 398+ 82EE 30 32            jr nc,PLY_AKM_CHECKTRANSPOSITIONANDTRACK_NONEWTRACK
 399+ 82F0 7E               ld a,(hl)
 400+ 82F1 23               inc hl
 401+ 82F2 CB 27            sla a
 402+ 82F4 30 16            jr nc,PLY_AKM_CHECKTRANSPOSITIONANDTRACK_TRACKOFFSET
 403+ 82F6 D9               exx
 404+ 82F7 6F               ld l,a
 405+ 82F8 26 00            ld h,0
 406+ 82FA 19               add hl,de
 407+ 82FB 7E               ld a,(hl)
 408+ 82FC DD 77 02         ld (ix+2),a
 409+ 82FF DD 77 04         ld (ix+4),a
 410+ 8302 23               inc hl
 411+ 8303 7E               ld a,(hl)
 412+ 8304 DD 77 03         ld (ix+3),a
 413+ 8307 DD 77 05         ld (ix+5),a
 414+ 830A D9               exx
 415+ 830B C9               ret
 416+ 830C 1F           PLY_AKM_CHECKTRANSPOSITIONANDTRACK_TRACKOFFSET rra
 417+ 830D 57               ld d,a
 418+ 830E 5E               ld e,(hl)
 419+ 830F 23               inc hl
 420+ 8310 4D               ld c,l
 421+ 8311 7C               ld a,h
 422+ 8312 19               add hl,de
 423+ 8313 DD               db 221
 424+ 8314 75               db 117
 425+ 8315 02               db +2
 426+ 8316 DD               db 221
 427+ 8317 74               db 116
 428+ 8318 03               db +3
 429+ 8319 DD               db 221
 430+ 831A 75               db 117
 431+ 831B 04               db +4
 432+ 831C DD               db 221
 433+ 831D 74               db 116
 434+ 831E 05               db +5
 435+ 831F 69               ld l,c
 436+ 8320 67               ld h,a
 437+ 8321 C9               ret
 438+ 8322 DD 7E 02     PLY_AKM_CHECKTRANSPOSITIONANDTRACK_NONEWTRACK ld a,(ix+2)
 439+ 8325 DD 77 04         ld (ix+4),a
 440+ 8328 DD 7E 03         ld a,(ix+3)
 441+ 832B DD 77 05         ld (ix+5),a
 442+ 832E C9               ret
 443+ 832F DD 7E 00     PLY_AKM_READTRACK ld a,(ix+0)
 444+ 8332 D6 01            sub 1
 445+ 8334 38 04            jr c,PLY_AKM_RT_NOEMPTYCELL
 446+ 8336 DD 77 00         ld (ix+0),a
 447+ 8339 C9               ret
 448+ 833A DD 6E 04     PLY_AKM_RT_NOEMPTYCELL ld l,(ix+4)
 449+ 833D DD 66 05         ld h,(ix+5)
 450+ 8340 46           PLY_AKM_RT_GETDATABYTE ld b,(hl)
 451+ 8341 23               inc hl
 452+ 8342 78               ld a,b
 453+ 8343 E6 0F            and 15
 454+ 8345 FE 0C        PLY_AKM_FLAGNOTEANDEFFECTINCELL cp 12
 455+ 8347 38 26            jr c,PLY_AKM_RT_NOTEREFERENCE
 456+ 8349 D6 0C            sub 12
 457+ 834B 28 12            jr z,PLY_AKM_RT_NOTEANDEFFECTS
 458+ 834D 3D               dec a
 459+ 834E 28 15            jr z,PLY_AKM_RT_NONOTEMAYBEEFFECTS
 460+ 8350 3D               dec a
 461+ 8351 28 05            jr z,PLY_AKM_RT_NEWESCAPENOTE
 462+ 8353 DD 7E 07         ld a,(ix+7)
 463+ 8356 18 1E            jr PLY_AKM_RT_AFTERNOTEREAD
 464+ 8358 7E           PLY_AKM_RT_NEWESCAPENOTE ld a,(hl)
 465+ 8359 DD 77 07         ld (ix+7),a
 466+ 835C 23               inc hl
 467+ 835D 18 17            jr PLY_AKM_RT_AFTERNOTEREAD
 468+ 835F 3D           PLY_AKM_RT_NOTEANDEFFECTS dec a
 469+ 8360 32 F9 83         ld (PLY_AKM_RT_READEFFECTSFLAG+1),a
 470+ 8363 18 DB            jr PLY_AKM_RT_GETDATABYTE
 471+ 8365 CB 60        PLY_AKM_RT_NONOTEMAYBEEFFECTS bit 4,b
 472+ 8367 28 6D            jr z,PLY_AKM_RT_READWAITFLAGS
 473+ 8369 78               ld a,b
 474+ 836A 32 F9 83         ld (PLY_AKM_RT_READEFFECTSFLAG+1),a
 475+ 836D 18 67            jr PLY_AKM_RT_READWAITFLAGS
 476+ 836F D9           PLY_AKM_RT_NOTEREFERENCE exx
 477+ 8370 6F               ld l,a
 478+ 8371 26 00            ld h,0
 479+ 8373 09               add hl,bc
 480+ 8374 7E               ld a,(hl)
 481+ 8375 D9               exx
 482+ 8376 DD 86 01     PLY_AKM_RT_AFTERNOTEREAD add a,(ix+1)
 483+ 8379 DD 77 06         ld (ix+6),a
 484+ 837C 78               ld a,b
 485+ 837D E6 30            and 48
 486+ 837F 28 0F            jr z,PLY_AKM_RT_SAMEESCAPEINSTRUMENT
 487+ 8381 FE 10            cp 16
 488+ 8383 28 14            jr z,PLY_AKM_RT_PRIMARYINSTRUMENT
 489+ 8385 FE 20            cp 32
 490+ 8387 28 0C            jr z,PLY_AKM_RT_SECONDARYINSTRUMENT
 491+ 8389 7E               ld a,(hl)
 492+ 838A 23               inc hl
 493+ 838B DD 77 08         ld (ix+8),a
 494+ 838E 18 0B            jr PLY_AKM_RT_STORECURRENTINSTRUMENT
 495+ 8390 DD 7E 08     PLY_AKM_RT_SAMEESCAPEINSTRUMENT ld a,(ix+8)
 496+ 8393 18 06            jr PLY_AKM_RT_STORECURRENTINSTRUMENT
 497+ 8395              PLY_AKM_RT_SECONDARYINSTRUMENT
 498+ 8395 3E 00        PLY_AKM_SECONDARYINSTRUMENT ld a,0
 499+ 8397 18 02            jr PLY_AKM_RT_STORECURRENTINSTRUMENT
 500+ 8399              PLY_AKM_RT_PRIMARYINSTRUMENT
 501+ 8399 3E 00        PLY_AKM_PRIMARYINSTRUMENT ld a,0
 502+ 839B D9           PLY_AKM_RT_STORECURRENTINSTRUMENT exx
 503+ 839C 87               add a,a
 504+ 839D 6F               ld l,a
 505+ 839E 26 00            ld h,0
 506+ 83A0 19               add hl,de
 507+ 83A1 7E               ld a,(hl)
 508+ 83A2 23               inc hl
 509+ 83A3 66               ld h,(hl)
 510+ 83A4 6F               ld l,a
 511+ 83A5 7E               ld a,(hl)
 512+ 83A6 23               inc hl
 513+ 83A7 DD 77 0D         ld (ix+13),a
 514+ 83AA DD               db 221
 515+ 83AB 75               db 117
 516+ 83AC 0A               db +10
 517+ 83AD DD               db 221
 518+ 83AE 74               db 116
 519+ 83AF 0B               db +11
 520+ 83B0 D9               exx
 521+ 83B1 AF               xor a
 522+ 83B2 DD 77 0C         ld (ix+12),a
 523+ 83B5 DD 77 0F         ld (ix+15),a
 524+ 83B8 DD 77 10         ld (ix+16),a
 525+ 83BB DD 77 11         ld (ix+17),a
 526+ 83BE DD 77 18         ld (ix+24),a
 527+ 83C1 DD 77 19         ld (ix+25),a
 528+ 83C4 DD 7E 1B         ld a,(ix+27)
 529+ 83C7 DD 77 1A         ld (ix+26),a
 530+ 83CA DD 77 20         ld (ix+32),a
 531+ 83CD DD 77 21         ld (ix+33),a
 532+ 83D0 DD 7E 23         ld a,(ix+35)
 533+ 83D3 DD 77 22         ld (ix+34),a
 534+ 83D6 78           PLY_AKM_RT_READWAITFLAGS ld a,b
 535+ 83D7 E6 C0            and 192
 536+ 83D9 28 0F            jr z,PLY_AKM_RT_SAMEESCAPEWAIT
 537+ 83DB FE 40            cp 64
 538+ 83DD 28 10            jr z,PLY_AKM_RT_PRIMARYWAIT
 539+ 83DF FE 80            cp 128
 540+ 83E1 28 10            jr z,PLY_AKM_RT_SECONDARYWAIT
 541+ 83E3 7E               ld a,(hl)
 542+ 83E4 23               inc hl
 543+ 83E5 DD 77 09         ld (ix+9),a
 544+ 83E8 18 0B            jr PLY_AKM_RT_STORECURRENTWAIT
 545+ 83EA DD 7E 09     PLY_AKM_RT_SAMEESCAPEWAIT ld a,(ix+9)
 546+ 83ED 18 06            jr PLY_AKM_RT_STORECURRENTWAIT
 547+ 83EF              PLY_AKM_RT_PRIMARYWAIT
 548+ 83EF 3E 00        PLY_AKM_PRIMARYWAIT ld a,0
 549+ 83F1 18 02            jr PLY_AKM_RT_STORECURRENTWAIT
 550+ 83F3              PLY_AKM_RT_SECONDARYWAIT
 551+ 83F3 3E 00        PLY_AKM_SECONDARYWAIT ld a,0
 552+ 83F5 DD 77 00     PLY_AKM_RT_STORECURRENTWAIT ld (ix+0),a
 553+ 83F8 3E 00        PLY_AKM_RT_READEFFECTSFLAG ld a,0
 554+ 83FA B7               or a
 555+ 83FB 20 07            jr nz,PLY_AKM_RT_READEFFECTS
 556+ 83FD DD           PLY_AKM_RT_AFTEREFFECTS db 221
 557+ 83FE 75               db 117
 558+ 83FF 04               db +4
 559+ 8400 DD               db 221
 560+ 8401 74               db 116
 561+ 8402 05               db +5
 562+ 8403 C9               ret
 563+ 8404 AF           PLY_AKM_RT_READEFFECTS xor a
 564+ 8405 32 F9 83         ld (PLY_AKM_RT_READEFFECTSFLAG+1),a
 565+ 8408 FD 21 27 86  PLY_AKM_RT_READEFFECT ld iy,PLY_AKM_EFFECTTABLE
 566+ 840C 46               ld b,(hl)
 567+ 840D 78               ld a,b
 568+ 840E 23               inc hl
 569+ 840F E6 0E            and 14
 570+ 8411 5F               ld e,a
 571+ 8412 16 00            ld d,0
 572+ 8414 FD 19            add iy,de
 573+ 8416 78               ld a,b
 574+ 8417 1F               rra
 575+ 8418 1F               rra
 576+ 8419 1F               rra
 577+ 841A 1F               rra
 578+ 841B E6 0F            and 15
 579+ 841D FD E9            jp (iy)
 580+ 841F CB 40        PLY_AKM_RT_READEFFECT_RETURN bit 0,b
 581+ 8421 20 E5            jr nz,PLY_AKM_RT_READEFFECT
 582+ 8423 18 D8            jr PLY_AKM_RT_AFTEREFFECTS
 583+ 8425 7E           PLY_AKM_RT_WAITLONG ld a,(hl)
 584+ 8426 23               inc hl
 585+ 8427 DD 77 00         ld (ix+0),a
 586+ 842A 18 08            jr PLY_AKM_RT_CELLREAD
 587+ 842C 78           PLY_AKM_RT_WAITSHORT ld a,b
 588+ 842D 07               rlca
 589+ 842E 07               rlca
 590+ 842F E6 03            and 3
 591+ 8431 DD 77 00         ld (ix+0),a
 592+ 8434 DD           PLY_AKM_RT_CELLREAD db 221
 593+ 8435 75               db 117
 594+ 8436 04               db +4
 595+ 8437 DD               db 221
 596+ 8438 74               db 116
 597+ 8439 05               db +5
 598+ 843A C9               ret
 599+ 843B DD 7E 0F     PLY_AKM_MANAGEEFFECTS ld a,(ix+15)
 600+ 843E B7               or a
 601+ 843F 28 28            jr z,PLY_AKM_ME_PITCHUPDOWNFINISHED
 602+ 8441 DD 6E 12         ld l,(ix+18)
 603+ 8444 DD 66 10         ld h,(ix+16)
 604+ 8447 DD 5E 13         ld e,(ix+19)
 605+ 844A DD 56 14         ld d,(ix+20)
 606+ 844D DD 7E 11         ld a,(ix+17)
 607+ 8450 CB 7A            bit 7,d
 608+ 8452 20 05            jr nz,PLY_AKM_ME_PITCHUPDOWN_NEGATIVESPEED
 609+ 8454 19           PLY_AKM_ME_PITCHUPDOWN_POSITIVESPEED add hl,de
 610+ 8455 CE 00            adc a,0
 611+ 8457 18 07            jr PLY_AKM_ME_PITCHUPDOWN_SAVE
 612+ 8459 CB BA        PLY_AKM_ME_PITCHUPDOWN_NEGATIVESPEED res 7,d
 613+ 845B B7               or a
 614+ 845C ED 52            sbc hl,de
 615+ 845E DE 00            sbc a,0
 616+ 8460 DD 77 11     PLY_AKM_ME_PITCHUPDOWN_SAVE ld (ix+17),a
 617+ 8463 DD               db 221
 618+ 8464 75               db 117
 619+ 8465 12               db +18
 620+ 8466 DD               db 221
 621+ 8467 74               db 116
 622+ 8468 10               db +16
 623+ 8469 DD 7E 15     PLY_AKM_ME_PITCHUPDOWNFINISHED ld a,(ix+21)
 624+ 846C B7               or a
 625+ 846D 28 30            jr z,PLY_AKM_ME_ARPEGGIOTABLEFINISHED
 626+ 846F DD 5E 16         ld e,(ix+22)
 627+ 8472 DD 56 17         ld d,(ix+23)
 628+ 8475 DD 6E 18         ld l,(ix+24)
 629+ 8478 26 00            ld h,0
 630+ 847A 19               add hl,de
 631+ 847B 7E               ld a,(hl)
 632+ 847C CB 2F            sra a
 633+ 847E DD 77 1C         ld (ix+28),a
 634+ 8481 DD 7E 19         ld a,(ix+25)
 635+ 8484 DD BE 1A         cp (ix+26)
 636+ 8487 38 12            jr c,PLY_AKM_ME_ARPEGGIOTABLE_SPEEDNOTREACHED
 637+ 8489 DD 36 19 00      ld (ix+25),0
 638+ 848D DD 34 18         inc (ix+24)
 639+ 8490 23               inc hl
 640+ 8491 7E               ld a,(hl)
 641+ 8492 1F               rra
 642+ 8493 30 0A            jr nc,PLY_AKM_ME_ARPEGGIOTABLEFINISHED
 643+ 8495 6F               ld l,a
 644+ 8496 DD 77 18         ld (ix+24),a
 645+ 8499 18 04            jr PLY_AKM_ME_ARPEGGIOTABLEFINISHED
 646+ 849B 3C           PLY_AKM_ME_ARPEGGIOTABLE_SPEEDNOTREACHED inc a
 647+ 849C DD 77 19         ld (ix+25),a
 648+ 849F DD 7E 1D     PLY_AKM_ME_ARPEGGIOTABLEFINISHED ld a,(ix+29)
 649+ 84A2 B7               or a
 650+ 84A3 C8               ret z
 651+ 84A4 DD 6E 1E         ld l,(ix+30)
 652+ 84A7 DD 66 1F         ld h,(ix+31)
 653+ 84AA DD 5E 20         ld e,(ix+32)
 654+ 84AD 16 00            ld d,0
 655+ 84AF 19               add hl,de
 656+ 84B0 7E               ld a,(hl)
 657+ 84B1 CB 2F            sra a
 658+ 84B3 F2 B7 84         jp p,PLY_AKM_ME_PITCHTABLEENDNOTREACHED_POSITIVE
 659+ 84B6 15               dec d
 660+ 84B7 DD 77 24     PLY_AKM_ME_PITCHTABLEENDNOTREACHED_POSITIVE ld (ix+36),a
 661+ 84BA DD               db 221
 662+ 84BB 72               db 114
 663+ 84BC 25               db +37
 664+ 84BD DD 7E 21         ld a,(ix+33)
 665+ 84C0 DD BE 22         cp (ix+34)
 666+ 84C3 38 10            jr c,PLY_AKM_ME_PITCHTABLE_SPEEDNOTREACHED
 667+ 84C5 DD 36 21 00      ld (ix+33),0
 668+ 84C9 DD 34 20         inc (ix+32)
 669+ 84CC 23               inc hl
 670+ 84CD 7E               ld a,(hl)
 671+ 84CE 1F               rra
 672+ 84CF D0               ret nc
 673+ 84D0 6F               ld l,a
 674+ 84D1 DD 77 20         ld (ix+32),a
 675+ 84D4 C9               ret
 676+ 84D5 3C           PLY_AKM_ME_PITCHTABLE_SPEEDNOTREACHED inc a
 677+ 84D6 DD 77 21         ld (ix+33),a
 678+ 84D9 C9               ret
 679+ 84DA DD 6E 0A     PLY_AKM_PLAYSOUNDSTREAM ld l,(ix+10)
 680+ 84DD DD 66 0B         ld h,(ix+11)
 681+ 84E0 7E           PLY_AKM_PSS_READFIRSTBYTE ld a,(hl)
 682+ 84E1 47               ld b,a
 683+ 84E2 23               inc hl
 684+ 84E3 1F               rra
 685+ 84E4 38 21            jr c,PLY_AKM_PSS_SOFTORSOFTANDHARD
 686+ 84E6 1F               rra
 687+ 84E7 38 6C            jr c,PLY_AKM_PSS_SOFTWARETOHARDWARE
 688+ 84E9 1F               rra
 689+ 84EA 30 0C            jr nc,PLY_AKM_PSS_NSNH_NOTENDOFSOUND
 690+ 84EC 7E               ld a,(hl)
 691+ 84ED 23               inc hl
 692+ 84EE 66               ld h,(hl)
 693+ 84EF 6F               ld l,a
 694+ 84F0 DD               db 221
 695+ 84F1 75               db 117
 696+ 84F2 0A               db +10
 697+ 84F3 DD               db 221
 698+ 84F4 74               db 116
 699+ 84F5 0B               db +11
 700+ 84F6 18 E8            jr PLY_AKM_PSS_READFIRSTBYTE
 701+ 84F8 CB D1        PLY_AKM_PSS_NSNH_NOTENDOFSOUND set 2,c
 702+ 84FA CD 9A 85         call PLY_AKM_PSS_SHARED_ADJUSTVOLUME
 703+ 84FD FD 77 01         ld (iy+1),a
 704+ 8500 CB 10            rl b
 705+ 8502 DC A2 85         call c,PLY_AKM_PSS_READNOISE
 706+ 8505 18 28            jr PLY_AKM_PSS_SHARED_STOREINSTRUMENTPOINTER
 707+ 8507 1F           PLY_AKM_PSS_SOFTORSOFTANDHARD rra
 708+ 8508 38 3C            jr c,PLY_AKM_PSS_SOFTANDHARD
 709+ 850A CD 9A 85         call PLY_AKM_PSS_SHARED_ADJUSTVOLUME
 710+ 850D FD 77 01         ld (iy+1),a
 711+ 8510 16 00            ld d,0
 712+ 8512 CB 10            rl b
 713+ 8514 30 08            jr nc,PLY_AKM_PSS_S_AFTERARPANDORNOISE
 714+ 8516 7E               ld a,(hl)
 715+ 8517 23               inc hl
 716+ 8518 CB 2F            sra a
 717+ 851A 57               ld d,a
 718+ 851B DC A2 85         call c,PLY_AKM_PSS_READNOISE
 719+ 851E 7A           PLY_AKM_PSS_S_AFTERARPANDORNOISE ld a,d
 720+ 851F CD AA 85         call PLY_AKM_CALCULATEPERIODFORBASENOTE
 721+ 8522 CB 10            rl b
 722+ 8524 DC E7 85         call c,PLY_AKM_READPITCHANDADDTOPERIOD
 723+ 8527 D9               exx
 724+ 8528 FD 75 05         ld (iy+5),l
 725+ 852B FD 74 09         ld (iy+9),h
 726+ 852E D9               exx
 727+ 852F DD 7E 0C     PLY_AKM_PSS_SHARED_STOREINSTRUMENTPOINTER ld a,(ix+12)
 728+ 8532 DD BE 0D         cp (ix+13)
 729+ 8535 30 04            jr nc,PLY_AKM_PSS_S_SPEEDREACHED
 730+ 8537 DD 34 0C         inc (ix+12)
 731+ 853A C9               ret
 732+ 853B DD           PLY_AKM_PSS_S_SPEEDREACHED db 221
 733+ 853C 75               db 117
 734+ 853D 0A               db +10
 735+ 853E DD               db 221
 736+ 853F 74               db 116
 737+ 8540 0B               db +11
 738+ 8541 DD 36 0C 00      ld (ix+12),0
 739+ 8545 C9               ret
 740+ 8546 CD 77 85     PLY_AKM_PSS_SOFTANDHARD call PLY_AKM_PSS_SHARED_READENVBITPITCHARP_SOFTPERIOD_HARDVOL_HARDENV
 741+ 8549 7E               ld a,(hl)
 742+ 854A 32 5A 87         ld (PLY_AKM_REG11),a
 743+ 854D 23               inc hl
 744+ 854E 7E               ld a,(hl)
 745+ 854F 32 5E 87         ld (PLY_AKM_REG12),a
 746+ 8552 23               inc hl
 747+ 8553 18 DA            jr PLY_AKM_PSS_SHARED_STOREINSTRUMENTPOINTER
 748+ 8555 CD 77 85     PLY_AKM_PSS_SOFTWARETOHARDWARE call PLY_AKM_PSS_SHARED_READENVBITPITCHARP_SOFTPERIOD_HARDVOL_HARDENV
 749+ 8558 78               ld a,b
 750+ 8559 07               rlca
 751+ 855A 07               rlca
 752+ 855B 07               rlca
 753+ 855C 07               rlca
 754+ 855D E6 07            and 7
 755+ 855F D9               exx
 756+ 8560 28 0A            jr z,PLY_AKM_PSS_STH_RATIOEND
 757+ 8562 CB 3C        PLY_AKM_PSS_STH_RATIOLOOP srl h
 758+ 8564 CB 1D            rr l
 759+ 8566 3D               dec a
 760+ 8567 20 F9            jr nz,PLY_AKM_PSS_STH_RATIOLOOP
 761+ 8569 30 01            jr nc,PLY_AKM_PSS_STH_RATIOEND
 762+ 856B 23               inc hl
 763+ 856C 7D           PLY_AKM_PSS_STH_RATIOEND ld a,l
 764+ 856D 32 5A 87         ld (PLY_AKM_REG11),a
 765+ 8570 7C               ld a,h
 766+ 8571 32 5E 87         ld (PLY_AKM_REG12),a
 767+ 8574 D9               exx
 768+ 8575 18 B8            jr PLY_AKM_PSS_SHARED_STOREINSTRUMENTPOINTER
 769+ 8577 E6 02        PLY_AKM_PSS_SHARED_READENVBITPITCHARP_SOFTPERIOD_HARDVOL_HARDENV and 2
 770+ 8579 C6 08            add a,8
 771+ 857B 32 D3 82         ld (PLY_AKM_SENDPSGREGISTERR13+1),a
 772+ 857E FD 36 01 10      ld (iy+1),16
 773+ 8582 AF               xor a
 774+ 8583 CB 78            bit 7,b
 775+ 8585 28 02            jr z,PLY_AKM_PSS_SHARED_RENVBAP_AFTERARPEGGIO
 776+ 8587 7E               ld a,(hl)
 777+ 8588 23               inc hl
 778+ 8589 CD AA 85     PLY_AKM_PSS_SHARED_RENVBAP_AFTERARPEGGIO call PLY_AKM_CALCULATEPERIODFORBASENOTE
 779+ 858C CB 50            bit 2,b
 780+ 858E C4 E7 85         call nz,PLY_AKM_READPITCHANDADDTOPERIOD
 781+ 8591 D9               exx
 782+ 8592 FD 75 05         ld (iy+5),l
 783+ 8595 FD 74 09         ld (iy+9),h
 784+ 8598 D9               exx
 785+ 8599 C9               ret
 786+ 859A E6 0F        PLY_AKM_PSS_SHARED_ADJUSTVOLUME and 15
 787+ 859C DD 96 0E         sub (ix+14)
 788+ 859F D0               ret nc
 789+ 85A0 AF               xor a
 790+ 85A1 C9               ret
 791+ 85A2 7E           PLY_AKM_PSS_READNOISE ld a,(hl)
 792+ 85A3 23               inc hl
 793+ 85A4 32 52 87         ld (PLY_AKM_NOISEREGISTER),a
 794+ 85A7 CB A9            res 5,c
 795+ 85A9 C9               ret
 796+ 85AA D9           PLY_AKM_CALCULATEPERIODFORBASENOTE exx
 797+ 85AB 26 00            ld h,0
 798+ 85AD DD 86 06         add a,(ix+6)
 799+ 85B0 DD 86 1C         add a,(ix+28)
 800+ 85B3 01 0C FF         ld bc,65292
 801+ 85B6 04           PLY_AKM_FINDOCTAVE_LOOP inc b
 802+ 85B7 91               sub c
 803+ 85B8 30 FC            jr nc,PLY_AKM_FINDOCTAVE_LOOP
 804+ 85BA 81               add a,c
 805+ 85BB 87               add a,a
 806+ 85BC 6F               ld l,a
 807+ 85BD 26 00            ld h,0
 808+ 85BF 19               add hl,de
 809+ 85C0 7E               ld a,(hl)
 810+ 85C1 23               inc hl
 811+ 85C2 66               ld h,(hl)
 812+ 85C3 6F               ld l,a
 813+ 85C4 78               ld a,b
 814+ 85C5 B7               or a
 815+ 85C6 28 06            jr z,PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP_FINISHED
 816+ 85C8 CB 3C        PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP srl h
 817+ 85CA CB 1D            rr l
 818+ 85CC 10 FA            djnz PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP
 819+ 85CE 30 01        PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP_FINISHED jr nc,PLY_AKM_FINDOCTAVE_FINISHED
 820+ 85D0 23               inc hl
 821+ 85D1 DD 7E 1D     PLY_AKM_FINDOCTAVE_FINISHED ld a,(ix+29)
 822+ 85D4 B7               or a
 823+ 85D5 28 07            jr z,PLY_AKM_CALCULATEPERIODFORBASENOTE_NOPITCHTABLE
 824+ 85D7 DD 4E 24         ld c,(ix+36)
 825+ 85DA DD 46 25         ld b,(ix+37)
 826+ 85DD 09               add hl,bc
 827+ 85DE DD 4E 10     PLY_AKM_CALCULATEPERIODFORBASENOTE_NOPITCHTABLE ld c,(ix+16)
 828+ 85E1 DD 46 11         ld b,(ix+17)
 829+ 85E4 09               add hl,bc
 830+ 85E5 D9               exx
 831+ 85E6 C9               ret
 832+ 85E7 7E           PLY_AKM_READPITCHANDADDTOPERIOD ld a,(hl)
 833+ 85E8 23               inc hl
 834+ 85E9 D9               exx
 835+ 85EA 4F               ld c,a
 836+ 85EB D9               exx
 837+ 85EC 7E               ld a,(hl)
 838+ 85ED 23               inc hl
 839+ 85EE D9               exx
 840+ 85EF 47               ld b,a
 841+ 85F0 09               add hl,bc
 842+ 85F1 D9               exx
 843+ 85F2 C9               ret
 844+ 85F3 DD 77 0E     PLY_AKM_EFFECTRESETWITHVOLUME ld (ix+14),a
 845+ 85F6 AF               xor a
 846+ 85F7 DD 77 0F         ld (ix+15),a
 847+ 85FA DD 77 15         ld (ix+21),a
 848+ 85FD DD 77 1C         ld (ix+28),a
 849+ 8600 DD 77 1D         ld (ix+29),a
 850+ 8603 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 851+ 8606 DD 77 0E     PLY_AKM_EFFECTVOLUME ld (ix+14),a
 852+ 8609 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 853+ 860C CD B5 86     PLY_AKM_EFFECTFORCEINSTRUMENTSPEED call PLY_AKM_EFFECTREADIFESCAPE
 854+ 860F DD 77 0D         ld (ix+13),a
 855+ 8612 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 856+ 8615 CD B5 86     PLY_AKM_EFFECTFORCEPITCHSPEED call PLY_AKM_EFFECTREADIFESCAPE
 857+ 8618 DD 77 22         ld (ix+34),a
 858+ 861B C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 859+ 861E CD B5 86     PLY_AKM_EFFECTFORCEARPEGGIOSPEED call PLY_AKM_EFFECTREADIFESCAPE
 860+ 8621 DD 77 1A         ld (ix+26),a
 861+ 8624 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 862+ 8627 18 CA        PLY_AKM_EFFECTTABLE jr PLY_AKM_EFFECTRESETWITHVOLUME
 863+ 8629 18 DB            jr PLY_AKM_EFFECTVOLUME
 864+ 862B 18 0A            jr PLY_AKM_EFFECTPITCHUPDOWN
 865+ 862D 18 23            jr PLY_AKM_EFFECTARPEGGIOTABLE
 866+ 862F 18 55            jr PLY_AKM_EFFECTPITCHTABLE
 867+ 8631 18 D9            jr PLY_AKM_EFFECTFORCEINSTRUMENTSPEED
 868+ 8633 18 E9            jr PLY_AKM_EFFECTFORCEARPEGGIOSPEED
 869+ 8635 18 DE            jr PLY_AKM_EFFECTFORCEPITCHSPEED
 870+ 8637 1F           PLY_AKM_EFFECTPITCHUPDOWN rra
 871+ 8638 30 11            jr nc,PLY_AKM_EFFECTPITCHUPDOWN_DEACTIVATED
 872+ 863A DD 36 0F FF      ld (ix+15),255
 873+ 863E 7E               ld a,(hl)
 874+ 863F 23               inc hl
 875+ 8640 DD 77 13         ld (ix+19),a
 876+ 8643 7E               ld a,(hl)
 877+ 8644 23               inc hl
 878+ 8645 DD 77 14         ld (ix+20),a
 879+ 8648 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 880+ 864B DD 36 0F 00  PLY_AKM_EFFECTPITCHUPDOWN_DEACTIVATED ld (ix+15),0
 881+ 864F C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 882+ 8652 CD B5 86     PLY_AKM_EFFECTARPEGGIOTABLE call PLY_AKM_EFFECTREADIFESCAPE
 883+ 8655 DD 77 15         ld (ix+21),a
 884+ 8658 28 26            jr z,PLY_AKM_EFFECTARPEGGIOTABLE_STOP
 885+ 865A 87               add a,a
 886+ 865B D9               exx
 887+ 865C 6F               ld l,a
 888+ 865D 26 00            ld h,0
 889+ 865F 01 00 00     PLY_AKM_PTARPEGGIOS ld bc,0
 890+ 8662 09               add hl,bc
 891+ 8663 7E               ld a,(hl)
 892+ 8664 23               inc hl
 893+ 8665 66               ld h,(hl)
 894+ 8666 6F               ld l,a
 895+ 8667 7E               ld a,(hl)
 896+ 8668 23               inc hl
 897+ 8669 DD 77 1B         ld (ix+27),a
 898+ 866C DD 77 1A         ld (ix+26),a
 899+ 866F DD               db 221
 900+ 8670 75               db 117
 901+ 8671 16               db +22
 902+ 8672 DD               db 221
 903+ 8673 74               db 116
 904+ 8674 17               db +23
 905+ 8675 D9               exx
 906+ 8676 AF               xor a
 907+ 8677 DD 77 18         ld (ix+24),a
 908+ 867A DD 77 19         ld (ix+25),a
 909+ 867D C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 910+ 8680 DD 77 1C     PLY_AKM_EFFECTARPEGGIOTABLE_STOP ld (ix+28),a
 911+ 8683 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 912+ 8686 CD B5 86     PLY_AKM_EFFECTPITCHTABLE call PLY_AKM_EFFECTREADIFESCAPE
 913+ 8689 DD 77 1D         ld (ix+29),a
 914+ 868C CA 1F 84         jp z,PLY_AKM_RT_READEFFECT_RETURN
 915+ 868F 87               add a,a
 916+ 8690 D9               exx
 917+ 8691 6F               ld l,a
 918+ 8692 26 00            ld h,0
 919+ 8694 01 00 00     PLY_AKM_PTPITCHES ld bc,0
 920+ 8697 09               add hl,bc
 921+ 8698 7E               ld a,(hl)
 922+ 8699 23               inc hl
 923+ 869A 66               ld h,(hl)
 924+ 869B 6F               ld l,a
 925+ 869C 7E               ld a,(hl)
 926+ 869D 23               inc hl
 927+ 869E DD 77 23         ld (ix+35),a
 928+ 86A1 DD 77 22         ld (ix+34),a
 929+ 86A4 DD               db 221
 930+ 86A5 75               db 117
 931+ 86A6 1E               db +30
 932+ 86A7 DD               db 221
 933+ 86A8 74               db 116
 934+ 86A9 1F               db +31
 935+ 86AA D9               exx
 936+ 86AB AF               xor a
 937+ 86AC DD 77 20         ld (ix+32),a
 938+ 86AF DD 77 21         ld (ix+33),a
 939+ 86B2 C3 1F 84         jp PLY_AKM_RT_READEFFECT_RETURN
 940+ 86B5 FE 0F        PLY_AKM_EFFECTREADIFESCAPE cp 15
 941+ 86B7 D8               ret c
 942+ 86B8 7E               ld a,(hl)
 943+ 86B9 23               inc hl
 944+ 86BA C9               ret
 945+ 86BB              PLY_AKM_TRACK1_DATA
 946+ 86BB 00           PLY_AKM_TRACK1_WAITEMPTYCELL db 0
 947+ 86BC 00           PLY_AKM_TRACK1_TRANSPOSITION db 0
 948+ 86BD 00 00        PLY_AKM_TRACK1_PTSTARTTRACK dw 0
 949+ 86BF 00 00        PLY_AKM_TRACK1_PTTRACK dw 0
 950+ 86C1 00           PLY_AKM_TRACK1_BASENOTE db 0
 951+ 86C2 00           PLY_AKM_TRACK1_ESCAPENOTE db 0
 952+ 86C3 00           PLY_AKM_TRACK1_ESCAPEINSTRUMENT db 0
 953+ 86C4 00           PLY_AKM_TRACK1_ESCAPEWAIT db 0
 954+ 86C5 00 00        PLY_AKM_TRACK1_PTINSTRUMENT dw 0
 955+ 86C7 00           PLY_AKM_TRACK1_INSTRUMENTCURRENTSTEP db 0
 956+ 86C8 00           PLY_AKM_TRACK1_INSTRUMENTSPEED db 0
 957+ 86C9 00           PLY_AKM_TRACK1_TRACKINVERTEDVOLUME db 0
 958+ 86CA 00           PLY_AKM_TRACK1_ISPITCHUPDOWNUSED db 0
 959+ 86CB 00 00        PLY_AKM_TRACK1_TRACKPITCHINTEGER dw 0
 960+ 86CD 00           PLY_AKM_TRACK1_TRACKPITCHDECIMAL db 0
 961+ 86CE 00 00        PLY_AKM_TRACK1_TRACKPITCHSPEED dw 0
 962+ 86D0 00           PLY_AKM_TRACK1_ISARPEGGIOTABLEUSED db 0
 963+ 86D1 00 00        PLY_AKM_TRACK1_PTARPEGGIOTABLE dw 0
 964+ 86D3 00           PLY_AKM_TRACK1_PTARPEGGIOOFFSET db 0
 965+ 86D4 00           PLY_AKM_TRACK1_ARPEGGIOCURRENTSTEP db 0
 966+ 86D5 00           PLY_AKM_TRACK1_ARPEGGIOCURRENTSPEED db 0
 967+ 86D6 00           PLY_AKM_TRACK1_ARPEGGIOORIGINALSPEED db 0
 968+ 86D7 00           PLY_AKM_TRACK1_CURRENTARPEGGIOVALUE db 0
 969+ 86D8 00           PLY_AKM_TRACK1_ISPITCHTABLEUSED db 0
 970+ 86D9 00 00        PLY_AKM_TRACK1_PTPITCHTABLE dw 0
 971+ 86DB 00           PLY_AKM_TRACK1_PTPITCHOFFSET db 0
 972+ 86DC 00           PLY_AKM_TRACK1_PITCHCURRENTSTEP db 0
 973+ 86DD 00           PLY_AKM_TRACK1_PITCHCURRENTSPEED db 0
 974+ 86DE 00           PLY_AKM_TRACK1_PITCHORIGINALSPEED db 0
 975+ 86DF 00 00        PLY_AKM_TRACK1_CURRENTPITCHTABLEVALUE dw 0
 976+ 86E1              PLY_AKM_TRACK1_DATA_END
 977+ 86E1              PLY_AKM_TRACK2_DATA
 978+ 86E1 00           PLY_AKM_TRACK2_WAITEMPTYCELL db 0
 979+ 86E2 00               db 0
 980+ 86E3 00               db 0
 981+ 86E4 00               db 0
 982+ 86E5 00           PLY_AKM_TRACK2_PTTRACK db 0
 983+ 86E6 00               db 0
 984+ 86E7 00               db 0
 985+ 86E8 00           PLY_AKM_TRACK2_ESCAPENOTE db 0
 986+ 86E9 00           PLY_AKM_TRACK2_ESCAPEINSTRUMENT db 0
 987+ 86EA 00           PLY_AKM_TRACK2_ESCAPEWAIT db 0
 988+ 86EB 00           PLY_AKM_TRACK2_PTINSTRUMENT db 0
 989+ 86EC 00               db 0
 990+ 86ED 00               db 0
 991+ 86EE 00               db 0
 992+ 86EF 00               db 0
 993+ 86F0 00               db 0
 994+ 86F1 00               db 0
 995+ 86F2 00               db 0
 996+ 86F3 00               db 0
 997+ 86F4 00               db 0
 998+ 86F5 00               db 0
 999+ 86F6 00               db 0
1000+ 86F7 00               db 0
1001+ 86F8 00               db 0
1002+ 86F9 00               db 0
1003+ 86FA 00               db 0
1004+ 86FB 00               db 0
1005+ 86FC 00               db 0
1006+ 86FD 00               db 0
1007+ 86FE 00               db 0
1008+ 86FF 00               db 0
1009+ 8700 00               db 0
1010+ 8701 00               db 0
1011+ 8702 00               db 0
1012+ 8703 00               db 0
1013+ 8704 00               db 0
1014+ 8705 00               db 0
1015+ 8706 00               db 0
1016+ 8707              PLY_AKM_TRACK2_DATA_END
1017+ 8707              PLY_AKM_TRACK3_DATA
1018+ 8707 00           PLY_AKM_TRACK3_WAITEMPTYCELL db 0
1019+ 8708 00               db 0
1020+ 8709 00               db 0
1021+ 870A 00               db 0
1022+ 870B 00           PLY_AKM_TRACK3_PTTRACK db 0
1023+ 870C 00               db 0
1024+ 870D 00               db 0
1025+ 870E 00           PLY_AKM_TRACK3_ESCAPENOTE db 0
1026+ 870F 00           PLY_AKM_TRACK3_ESCAPEINSTRUMENT db 0
1027+ 8710 00           PLY_AKM_TRACK3_ESCAPEWAIT db 0
1028+ 8711 00           PLY_AKM_TRACK3_PTINSTRUMENT db 0
1029+ 8712 00               db 0
1030+ 8713 00               db 0
1031+ 8714 00               db 0
1032+ 8715 00               db 0
1033+ 8716 00               db 0
1034+ 8717 00               db 0
1035+ 8718 00               db 0
1036+ 8719 00               db 0
1037+ 871A 00               db 0
1038+ 871B 00               db 0
1039+ 871C 00               db 0
1040+ 871D 00               db 0
1041+ 871E 00               db 0
1042+ 871F 00               db 0
1043+ 8720 00               db 0
1044+ 8721 00               db 0
1045+ 8722 00               db 0
1046+ 8723 00               db 0
1047+ 8724 00               db 0
1048+ 8725 00               db 0
1049+ 8726 00               db 0
1050+ 8727 00               db 0
1051+ 8728 00               db 0
1052+ 8729 00               db 0
1053+ 872A 00               db 0
1054+ 872B 00               db 0
1055+ 872C 00               db 0
1056+ 872D              PLY_AKM_TRACK3_DATA_END
1057+ 872D              PLY_AKM_REGISTERS_RETTABLE
1058+ 872D 08           PLY_AKM_TRACK1_REGISTERS db 8
1059+ 872E 00           PLY_AKM_TRACK1_VOLUME db 0
1060+ 872F CA 82            dw PLY_AKM_SENDPSGREGISTER
1061+ 8731 00               db 0
1062+ 8732 00           PLY_AKM_TRACK1_SOFTWAREPERIODLSB db 0
1063+ 8733 CA 82            dw PLY_AKM_SENDPSGREGISTER
1064+ 8735 01               db 1
1065+ 8736 00           PLY_AKM_TRACK1_SOFTWAREPERIODMSB db 0
1066+ 8737 CA 82            dw PLY_AKM_SENDPSGREGISTER
1067+ 8739 09           PLY_AKM_TRACK2_REGISTERS db 9
1068+ 873A 00           PLY_AKM_TRACK2_VOLUME db 0
1069+ 873B CA 82            dw PLY_AKM_SENDPSGREGISTER
1070+ 873D 02               db 2
1071+ 873E 00           PLY_AKM_TRACK2_SOFTWAREPERIODLSB db 0
1072+ 873F CA 82            dw PLY_AKM_SENDPSGREGISTER
1073+ 8741 03               db 3
1074+ 8742 00           PLY_AKM_TRACK2_SOFTWAREPERIODMSB db 0
1075+ 8743 CA 82            dw PLY_AKM_SENDPSGREGISTER
1076+ 8745 0A           PLY_AKM_TRACK3_REGISTERS db 10
1077+ 8746 00           PLY_AKM_TRACK3_VOLUME db 0
1078+ 8747 CA 82            dw PLY_AKM_SENDPSGREGISTER
1079+ 8749 04               db 4
1080+ 874A 00           PLY_AKM_TRACK3_SOFTWAREPERIODLSB db 0
1081+ 874B CA 82            dw PLY_AKM_SENDPSGREGISTER
1082+ 874D 05               db 5
1083+ 874E 00           PLY_AKM_TRACK3_SOFTWAREPERIODMSB db 0
1084+ 874F CA 82            dw PLY_AKM_SENDPSGREGISTER
1085+ 8751 06               db 6
1086+ 8752 00           PLY_AKM_NOISEREGISTER db 0
1087+ 8753 CA 82            dw PLY_AKM_SENDPSGREGISTER
1088+ 8755 07               db 7
1089+ 8756 00           PLY_AKM_MIXERREGISTER db 0
1090+ 8757 CA 82            dw PLY_AKM_SENDPSGREGISTER
1091+ 8759 0B               db 11
1092+ 875A 00           PLY_AKM_REG11 db 0
1093+ 875B CA 82            dw PLY_AKM_SENDPSGREGISTER
1094+ 875D 0C               db 12
1095+ 875E 00           PLY_AKM_REG12 db 0
1096+ 875F D2 82            dw PLY_AKM_SENDPSGREGISTERR13
1097+ 8761 CB 82            dw PLY_AKM_SENDPSGREGISTERAFTERPOP
1098+ 8763 DF 82            dw PLY_AKM_SENDPSGREGISTEREND
1099+ 8765 7A 1A        PLY_AKM_PERIODTABLE dw 6778
1100+ 8767 FE 18            dw 6398
1101+ 8769 97 17            dw 6039
1102+ 876B 44 16            dw 5700
1103+ 876D 04 15            dw 5380
1104+ 876F D6 13            dw 5078
1105+ 8771 B9 12            dw 4793
1106+ 8773 AC 11            dw 4524
1107+ 8775 AE 10            dw 4270
1108+ 8777 BE 0F            dw 4030
1109+ 8779 DC 0E            dw 3804
1110+ 877B 07 0E            dw 3591
1111+ 877D              PLY_AKM_END
1112+ 877D 85 87        PNP_START dw PNP_INSTRUMENTINDEXES
1113+ 877F 00 00            dw 0
1114+ 8781 00 00            dw 0
1115+ 8783 A1 87            dw PNP_ARPEGGIOINDEXES
1116+ 8785 89 87        PNP_INSTRUMENTINDEXES dw PNP_INSTRUMENT0
1117+ 8787 8E 87            dw PNP_INSTRUMENT1
1118+ 8789 FF           PNP_INSTRUMENT0 db 255
1119+ 878A 00           PNP_INSTRUMENT0LOOP db 0
1120+ 878B 04               db 4
1121+ 878C 8A 87            dw PNP_INSTRUMENT0LOOP
1122+ 878E 00           PNP_INSTRUMENT1 db 0
1123+ 878F 3D               db 61
1124+ 8790 39               db 57
1125+ 8791 35               db 53
1126+ 8792 31               db 49
1127+ 8793 2D               db 45
1128+ 8794 29               db 41
1129+ 8795 25               db 37
1130+ 8796 21               db 33
1131+ 8797 1D               db 29
1132+ 8798 19               db 25
1133+ 8799 15               db 21
1134+ 879A 11               db 17
1135+ 879B 0D               db 13
1136+ 879C 09               db 9
1137+ 879D 05               db 5
1138+ 879E 04               db 4
1139+ 879F 8A 87            dw PNP_INSTRUMENT0LOOP
1140+ 87A1              PNP_ARPEGGIOINDEXES
1141+ 87A1              PNP_PITCHINDEXES
1142+ 87A1 0F 88        PNP_SUBSONG0 dw PNP_SUBSONG0_NOTEINDEXES
1143+ 87A3 BF 87            dw PNP_SUBSONG0_TRACKINDEXES
1144+ 87A5 06               db 6
1145+ 87A6 01               db 1
1146+ 87A7 00               db 0
1147+ 87A8 03               db 3
1148+ 87A9 01               db 1
1149+ 87AA 00               db 0
1150+ 87AB 00               db 0
1151+ 87AC 00               db 0
1152+ 87AD 0C               db 12
1153+ 87AE AA           PNP_SUBSONG0_LOOP db 170
1154+ 87AF 3F               db 63
1155+ 87B0 00               db 0
1156+ 87B1 0D               db 13
1157+ 87B2 00               db 0
1158+ 87B3 20               db 32
1159+ 87B4 00               db 0
1160+ 87B5 31               db 49
1161+ 87B6 28               db 40
1162+ 87B7 00               db 0
1163+ 87B8 30               db 48
1164+ 87B9 00               db 0
1165+ 87BA 43               db 67
1166+ 87BB 01               db 1
1167+ 87BC 00               db 0
1168+ 87BD AE 87            dw PNP_SUBSONG0_LOOP
1169+ 87BF              PNP_SUBSONG0_TRACKINDEXES
1170+ 87BF 0C           PNP_SUBSONG0_TRACK0 db 12
1171+ 87C0 91               db 145
1172+ 87C1 12               db 18
1173+ 87C2 93               db 147
1174+ 87C3 51               db 81
1175+ 87C4 D4               db 212
1176+ 87C5 07               db 7
1177+ 87C6 91               db 145
1178+ 87C7 93               db 147
1179+ 87C8 51               db 81
1180+ 87C9 14               db 20
1181+ 87CA 93               db 147
1182+ 87CB 94               db 148
1183+ 87CC 53               db 83
1184+ 87CD 1E               db 30
1185+ 87CE 2F               db 47
1186+ 87CF 91               db 145
1187+ 87D0 93               db 147
1188+ 87D1 51               db 81
1189+ 87D2 D4               db 212
1190+ 87D3 7F               db 127
1191+ 87D4 0C           PNP_SUBSONG0_TRACK1 db 12
1192+ 87D5 50               db 80
1193+ 87D6 12               db 18
1194+ 87D7 52               db 82
1195+ 87D8 50               db 80
1196+ 87D9 52               db 82
1197+ 87DA 50               db 80
1198+ 87DB 52               db 82
1199+ 87DC 50               db 80
1200+ 87DD 52               db 82
1201+ 87DE 55               db 85
1202+ 87DF 56               db 86
1203+ 87E0 55               db 85
1204+ 87E1 56               db 86
1205+ 87E2 50               db 80
1206+ 87E3 52               db 82
1207+ 87E4 50               db 80
1208+ 87E5 D2               db 210
1209+ 87E6 7F               db 127
1210+ 87E7 CD           PNP_SUBSONG0_TRACK2 db 205
1211+ 87E8 7F               db 127
1212+ 87E9 91           PNP_SUBSONG0_TRACK3 db 145
1213+ 87EA 93               db 147
1214+ 87EB 51               db 81
1215+ 87EC D4               db 212
1216+ 87ED 07               db 7
1217+ 87EE 91               db 145
1218+ 87EF 9E               db 158
1219+ 87F0 33               db 51
1220+ 87F1 53               db 83
1221+ 87F2 5E               db 94
1222+ 87F3 31               db 49
1223+ 87F4 93               db 147
1224+ 87F5 91               db 145
1225+ 87F6 51               db 81
1226+ 87F7 54               db 84
1227+ 87F8 93               db 147
1228+ 87F9 94               db 148
1229+ 87FA 5E               db 94
1230+ 87FB 2F               db 47
1231+ 87FC D4               db 212
1232+ 87FD 7F               db 127
1233+ 87FE 50           PNP_SUBSONG0_TRACK4 db 80
1234+ 87FF 52               db 82
1235+ 8800 50               db 80
1236+ 8801 52               db 82
1237+ 8802 50               db 80
1238+ 8803 5E               db 94
1239+ 8804 25               db 37
1240+ 8805 50               db 80
1241+ 8806 5F               db 95
1242+ 8807 55               db 85
1243+ 8808 56               db 86
1244+ 8809 55               db 85
1245+ 880A 56               db 86
1246+ 880B 50               db 80
1247+ 880C 52               db 82
1248+ 880D D2               db 210
1249+ 880E 7F               db 127
1250+ 880F 28           PNP_SUBSONG0_NOTEINDEXES db 40
1251+ 8810 34               db 52
1252+ 8811 24               db 36
1253+ 8812 32               db 50
1254+ 8813 30               db 48
1255+ 8814 29               db 41
1256+ 8815 26               db 38
1257+ 8816 20 88        SOUNDEFFECTS_SOUNDEFFECTS dw SOUNDEFFECTS_SOUNDEFFECTS_SOUND1
1258+ 8818 32 88            dw SOUNDEFFECTS_SOUNDEFFECTS_SOUND2
1259+ 881A 58 88            dw SOUNDEFFECTS_SOUNDEFFECTS_SOUND3
1260+ 881C 97 88            dw SOUNDEFFECTS_SOUNDEFFECTS_SOUND4
1261+ 881E AD 88            dw SOUNDEFFECTS_SOUNDEFFECTS_SOUND5
1262+ 8820 00           SOUNDEFFECTS_SOUNDEFFECTS_SOUND1 db 0
1263+ 8821 BD           SOUNDEFFECTS_SOUNDEFFECTS_SOUND1_LOOP db 189
1264+ 8822 01               db 1
1265+ 8823 5F               db 95
1266+ 8824 00               db 0
1267+ 8825 BD               db 189
1268+ 8826 01               db 1
1269+ 8827 63               db 99
1270+ 8828 00               db 0
1271+ 8829 B1               db 177
1272+ 882A 01               db 1
1273+ 882B 66               db 102
1274+ 882C 00               db 0
1275+ 882D AD               db 173
1276+ 882E 01               db 1
1277+ 882F 6A               db 106
1278+ 8830 00               db 0
1279+ 8831 04               db 4
1280+ 8832 01           SOUNDEFFECTS_SOUNDEFFECTS_SOUND2 db 1
1281+ 8833 BD           SOUNDEFFECTS_SOUNDEFFECTS_SOUND2_LOOP db 189
1282+ 8834 01               db 1
1283+ 8835 2D               db 45
1284+ 8836 01               db 1
1285+ 8837 BD               db 189
1286+ 8838 08               db 8
1287+ 8839 3F               db 63
1288+ 883A 01               db 1
1289+ 883B B9               db 185
1290+ 883C 02               db 2
1291+ 883D 92               db 146
1292+ 883E 01               db 1
1293+ 883F B5               db 181
1294+ 8840 10               db 16
1295+ 8841 D5               db 213
1296+ 8842 00               db 0
1297+ 8843 B1               db 177
1298+ 8844 02               db 2
1299+ 8845 E1               db 225
1300+ 8846 00               db 0
1301+ 8847 AD               db 173
1302+ 8848 02               db 2
1303+ 8849 EF               db 239
1304+ 884A 00               db 0
1305+ 884B A5               db 165
1306+ 884C 10               db 16
1307+ 884D 66               db 102
1308+ 884E 01               db 1
1309+ 884F 9D               db 157
1310+ 8850 1F               db 31
1311+ 8851 77               db 119
1312+ 8852 00               db 0
1313+ 8853 99               db 153
1314+ 8854 07               db 7
1315+ 8855 50               db 80
1316+ 8856 00               db 0
1317+ 8857 04               db 4
1318+ 8858 01           SOUNDEFFECTS_SOUNDEFFECTS_SOUND3 db 1
1319+ 8859 BD           SOUNDEFFECTS_SOUNDEFFECTS_SOUND3_LOOP db 189
1320+ 885A 01               db 1
1321+ 885B 77               db 119
1322+ 885C 00               db 0
1323+ 885D 39               db 57
1324+ 885E 3C               db 60
1325+ 885F 00               db 0
1326+ 8860 B5               db 181
1327+ 8861 01               db 1
1328+ 8862 5F               db 95
1329+ 8863 00               db 0
1330+ 8864 31               db 49
1331+ 8865 2F               db 47
1332+ 8866 00               db 0
1333+ 8867 B9               db 185
1334+ 8868 01               db 1
1335+ 8869 50               db 80
1336+ 886A 00               db 0
1337+ 886B 3D               db 61
1338+ 886C 28               db 40
1339+ 886D 00               db 0
1340+ 886E 03               db 3
1341+ 886F 0F               db 15
1342+ 8870 00               db 0
1343+ 8871 DE               db 222
1344+ 8872 01               db 1
1345+ 8873 3D               db 61
1346+ 8874 EF               db 239
1347+ 8875 00               db 0
1348+ 8876 03               db 3
1349+ 8877 0F               db 15
1350+ 8878 00               db 0
1351+ 8879 DE               db 222
1352+ 887A 01               db 1
1353+ 887B 3D               db 61
1354+ 887C EF               db 239
1355+ 887D 00               db 0
1356+ 887E 03               db 3
1357+ 887F 0F               db 15
1358+ 8880 00               db 0
1359+ 8881 DE               db 222
1360+ 8882 01               db 1
1361+ 8883 3D               db 61
1362+ 8884 EF               db 239
1363+ 8885 00               db 0
1364+ 8886 03               db 3
1365+ 8887 1E               db 30
1366+ 8888 00               db 0
1367+ 8889 BC               db 188
1368+ 888A 03               db 3
1369+ 888B 3D               db 61
1370+ 888C EF               db 239
1371+ 888D 00               db 0
1372+ 888E 03               db 3
1373+ 888F 1E               db 30
1374+ 8890 00               db 0
1375+ 8891 BC               db 188
1376+ 8892 03               db 3
1377+ 8893 3D               db 61
1378+ 8894 EF               db 239
1379+ 8895 00               db 0
1380+ 8896 04               db 4
1381+ 8897 01           SOUNDEFFECTS_SOUNDEFFECTS_SOUND4 db 1
1382+ 8898 BD           SOUNDEFFECTS_SOUNDEFFECTS_SOUND4_LOOP db 189
1383+ 8899 01               db 1
1384+ 889A 77               db 119
1385+ 889B 00               db 0
1386+ 889C 3D               db 61
1387+ 889D 38               db 56
1388+ 889E 00               db 0
1389+ 889F BD               db 189
1390+ 88A0 01               db 1
1391+ 88A1 6A               db 106
1392+ 88A2 00               db 0
1393+ 88A3 3D               db 61
1394+ 88A4 35               db 53
1395+ 88A5 00               db 0
1396+ 88A6 3D               db 61
1397+ 88A7 64               db 100
1398+ 88A8 00               db 0
1399+ 88A9 3D               db 61
1400+ 88AA 32               db 50
1401+ 88AB 00               db 0
1402+ 88AC 04               db 4
1403+ 88AD 01           SOUNDEFFECTS_SOUNDEFFECTS_SOUND5 db 1
1404+ 88AE 03           SOUNDEFFECTS_SOUNDEFFECTS_SOUND5_LOOP db 3
1405+ 88AF 02               db 2
1406+ 88B0 00               db 0
1407+ 88B1 1B               db 27
1408+ 88B2 00               db 0
1409+ 88B3 03               db 3
1410+ 88B4 03               db 3
1411+ 88B5 00               db 0
1412+ 88B6 2F               db 47
1413+ 88B7 00               db 0
1414+ 88B8 03               db 3
1415+ 88B9 02               db 2
1416+ 88BA 00               db 0
1417+ 88BB 1E               db 30
1418+ 88BC 00               db 0
1419+ 88BD 03               db 3
1420+ 88BE 05               db 5
1421+ 88BF 00               db 0
1422+ 88C0 4B               db 75
1423+ 88C1 00               db 0
1424+ 88C2 03               db 3
1425+ 88C3 03               db 3
1426+ 88C4 00               db 0
1427+ 88C5 2F               db 47
1428+ 88C6 00               db 0
1429+ 88C7 03               db 3
1430+ 88C8 07               db 7
1431+ 88C9 00               db 0
1432+ 88CA 77               db 119
1433+ 88CB 00               db 0
1434+ 88CC 03               db 3
1435+ 88CD 05               db 5
1436+ 88CE 00               db 0
1437+ 88CF 4B               db 75
1438+ 88D0 00               db 0
1439+ 88D1 03               db 3
1440+ 88D2 0C               db 12
1441+ 88D3 00               db 0
1442+ 88D4 BE               db 190
1443+ 88D5 00               db 0
1444+ 88D6 03               db 3
1445+ 88D7 07               db 7
1446+ 88D8 00               db 0
1447+ 88D9 77               db 119
1448+ 88DA 00               db 0
1449+ 88DB 03               db 3
1450+ 88DC 13               db 19
1451+ 88DD 00               db 0
1452+ 88DE 2D               db 45
1453+ 88DF 01               db 1
1454+ 88E0 03               db 3
1455+ 88E1 0C               db 12
1456+ 88E2 00               db 0
1457+ 88E3 BE               db 190
1458+ 88E4 00               db 0
1459+ 88E5 03               db 3
1460+ 88E6 22               db 34
1461+ 88E7 00               db 0
1462+ 88E8 18               db 24
1463+ 88E9 02               db 2
1464+ 88EA 03               db 3
1465+ 88EB 32               db 50
1466+ 88EC 00               db 0
1467+ 88ED 24               db 36
1468+ 88EE 03               db 3
1469+ 88EF 04               db 4
1470+ 88F0
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/../resources/pnpmusicpasmo.asm
 162  88F0
 163  88F0                        include "includes/variables.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/variables.asm
   1+ 88F0 00           keyxpostemp: defb 0
   2+ 88F1 00           keyypostemp: defb 0
   3+ 88F2
   4+ 88F2 00           gotkey:      defb 0
   5+ 88F3 00           lastcol:     defb 0
   6+ 88F4
   7+ 88F4 00           energy:      defb 0
   8+ 88F5
   9+ 88F5
  10+ 88F5
  11+ 88F5              keyslefttocollect:
  12+ 88F5 00           	defb 0
  13+ 88F6
  14+ 88F6              totalsprites:
  15+ 88F6 00           	defb 0
  16+ 88F7
  17+ 88F7 00           dl_xpos:  defb 0
  18+ 88F8 00           dl_ypos:  defb 0
  19+ 88F9 00           dl_block: defb 0
  20+ 88FA 00           jump:     defb 0
  21+ 88FB
  22+ 88FB 00           shcol:    defb 0
  23+ 88FC 00           shbit:    defb 0
  24+ 88FD 00           shand:    defb 0
  25+ 88FE 00 00        unexs:    defw 0
  26+ 8900 00 00        unexd:    defw 0
  27+ 8902
  28+ 8902              collided:
  29+ 8902 00           		defb 0
  30+ 8903
  31+ 8903              player_xpos_onscreen:
  32+ 8903 00           			defb 0
  33+ 8904              player_ypos_onscreen:
  34+ 8904 00           			defb 0
  35+ 8905
  36+ 8905
  37+ 8905              currentworld:
  38+ 8905 00           			defb 0
  39+ 8906
  40+ 8906              currentscreen:
  41+ 8906 00           			defb 0
  42+ 8907
  43+ 8907              musicon:
  44+ 8907 00           			defb 0
  45+ 8908
  46+ 8908
  47+ 8908              playeronscreenpos:
  48+ 8908
  49+ 8908 00 00 00...  	defs sprite_size,0
  50+ 891C
  51+ 891C              playerinitiatepositions:
  52+ 891C
  53+ 891C              	;       player
  54+ 891C              	;       ======
  55+ 891C
  56+ 891C 01           	defb 1                 ; 0  active/pause before move to reset to
  57+ 891D 03           	defb 3                 ; 1  xpos
  58+ 891E 0D           	defb 13                 ; 2  ypos
  59+ 891F 0C           	defb 12                ; 3  anim frame offset
  60+ 8920 04           	defb 4                 ; 4  move counter (reset when=4)
  61+ 8921 00           	defb 0                 ; 5  ymove
  62+ 8922 03           	defb 3                 ; 6  height
  63+ 8923 01           	defb 1                ; 7  direction (1=right,-1 left)
  64+ 8924 01           	defb 1                 ; 8  move offset (ro)
  65+ 8925 00           	defb 0                 ; 9 anim offset (ro)
  66+ 8926 20           	defb 32                ; 10 xmax
  67+ 8927 00           	defb 0                 ; 11 xmin
  68+ 8928 00 D1        	defw sprite_buffer_1   ; 12 sprite buffer
  69+ 892A A7           	defb player_gfx/256   ; 14 bank
  70+ 892B 06           	defb 06h                ; 15 bank difference to add/subtract (e.g difference between bank2 (bc00) and bank1 (b100) = 3k (768 bytes, 96 chars)
  71+ 892C              							; 96 = 12*8 (4 for each frame left and right)
  72+ 892C 05           	defb 5                 ; 16 counter to change bank, i.e. frame of animation
  73+ 892D 04           	defb 4                 ; 17 reset value for bank change
  74+ 892E 00           	defb 0                ; 18 image frame difference to add on max/min (12 chars * 4 frames) when
  75+ 892F              						;    changing direction
  76+ 892F 45           	defb %01000101         ; 19 colour
  77+ 8930
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/variables.asm
 164  8930
 165  8930                        include "includes/strings.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/strings.asm
   1+ 8930              lives_message:
   2+ 8930 18 00 06 4C  	defb 24,0,paper_black+ink_yellow,'LIVE','S'+128
   2+ 8934 49 56 45 D3
   3+ 8938 80           	defb 128
   4+ 8939
   5+ 8939              lives:
   6+ 8939 1E 00 46 41  	defb 30,0,paper_black+ink_yellow+attr_bright,'A',' '+128
   6+ 893D A0
   7+ 893E 80           	defb 128
   8+ 893F
   9+ 893F              items_left:
  10+ 893F 04 00 03 52  		defb 4,0,paper_black+ink_magenta,'RINGS REMAININ','G'+128,128
  10+ 8943 49 4E 47 53
  10+ 8947 20 52 45 4D
  10+ 894B 41 49 4E 49
  10+ 894F 4E C7 80
  11+ 8952
  12+ 8952              items:
  13+ 8952 01 00 43 30  		defb 1,0,attr_bright+paper_black+ink_magenta,'00',' '+128,128
  13+ 8956 30 A0 80
  14+ 8959
  15+ 8959              redefine_message:
  16+ 8959 0D 06 46 52  		defb 13,6,attr_bright+paper_black+ink_yellow,'REDEFIN','E'+128
  16+ 895D 45 44 45 46
  16+ 8961 49 4E C5
  17+ 8964 0C 08 43 4C  		defb 12,8,%01000011,'LEF','T'+128
  17+ 8968 45 46 D4
  18+ 896B 0B 0A 43 52  		defb 11,10,%01000011,'RIGH','T'+128
  18+ 896F 49 47 48 D4
  19+ 8973 0C 0C 43 4A  		defb 12,12,%01000011,'JUM','P'+128
  19+ 8977 55 4D D0
  20+ 897A 80           		defb 128
  21+ 897B
  22+ 897B
  23+ 897B              menu_window:
  24+ 897B 07 05 14 0B  		defb 7,5,20,11
  25+ 897F
  26+ 897F              menu_message:
  27+ 897F 08 04 45 50  		defb 8,4,attr_bright+paper_black+ink_cyan,'PICKLES AND PEAR','L'+128
  27+ 8983 49 43 4B 4C
  27+ 8987 45 53 20 41
  27+ 898B 4E 44 20 50
  27+ 898F 45 41 52 CC
  28+ 8993 0E 06 46 50  		defb 14,6,attr_bright+paper_black+ink_yellow,'PLA','Y'+128
  28+ 8997 4C 41 D9
  29+ 899A 0B 08 44 31  		defb 11,8,%01000100,'1. WORLD ','1'+128
  29+ 899E 2E 20 57 4F
  29+ 89A2 52 4C 44 20
  29+ 89A6 B1
  30+ 89A7 0B 0A 44 32  		defb 11,10,%01000100,'2. WORLD ','2'+128
  30+ 89AB 2E 20 57 4F
  30+ 89AF 52 4C 44 20
  30+ 89B3 B2
  31+ 89B4 0B 0C 44 33  		defb 11,12,%01000100,'3. WORLD ','3'+128
  31+ 89B8 2E 20 57 4F
  31+ 89BC 52 4C 44 20
  31+ 89C0 B3
  32+ 89C1 0B 0E 44 34  		defb 11,14,%01000100,'4. WORLD ','4'+128
  32+ 89C5 2E 20 57 4F
  32+ 89C9 52 4C 44 20
  32+ 89CD B4
  33+ 89CE 0B 10 44 35  		defb 11,16,%01000100,'5. WORLD ','5'+128
  33+ 89D2 2E 20 57 4F
  33+ 89D6 52 4C 44 20
  33+ 89DA B5
  34+ 89DB 0F 12 46 4F  		defb 15,18,%01000110,'O','R'+128
  34+ 89DF D2
  35+ 89E0 08 14 43 52  		defb 8,20,%01000011,'R. REDEFINE KEY','S'+128
  35+ 89E4 2E 20 52 45
  35+ 89E8 44 45 46 49
  35+ 89EC 4E 45 20 4B
  35+ 89F0 45 59 D3
  36+ 89F3 80           		defb 128
  37+ 89F4
  38+ 89F4
  39+ 89F4              energy_message:
  40+ 89F4 0D 17 67 45  		defb 13,23,attr_bright+paper_green+ink_white,'ENERG','Y'+128
  40+ 89F8 4E 45 52 47
  40+ 89FC D9
  41+ 89FD 80           		defb 128
  42+ 89FE
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/strings.asm
 166  89FE              font:
 167  89FE                        include "includes/arcdfont.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/arcdfont.asm
   1+ 89FE              ;chars:
   2+ 89FE
   3+ 89FE              ; SPACE
   4+ 89FE
   5+ 89FE 00 00 00 00      defb 0,0,0,0,0,0,0,0
   5+ 8A02 00 00 00 00
   6+ 8A06
   7+ 8A06              ; !
   8+ 8A06
   9+ 8A06 0C               defb %00001100
  10+ 8A07 1C               defb %00011100
  11+ 8A08 3C               defb %00111100
  12+ 8A09 38               defb %00111000
  13+ 8A0A 60               defb %01100000
  14+ 8A0B 00               defb %00000000
  15+ 8A0C C0               defb %11000000
  16+ 8A0D 00               defb %00000000
  17+ 8A0E
  18+ 8A0E                  ; Need to define the next 12
  19+ 8A0E 00 00 00...      DEFS 12*8
  20+ 8A6E
  21+ 8A6E              ; .
  22+ 8A6E
  23+ 8A6E 00               defb %00000000
  24+ 8A6F 00               defb %00000000
  25+ 8A70 00               defb %00000000
  26+ 8A71 00               defb %00000000
  27+ 8A72 00               defb %00000000
  28+ 8A73 60               defb %01100000
  29+ 8A74 60               defb %01100000
  30+ 8A75 00               defb %00000000
  31+ 8A76
  32+ 8A76                  ; Need to define /
  33+ 8A76 00 00 00...      DEFS 8
  34+ 8A7E
  35+ 8A7E                  ; 0
  36+ 8A7E
  37+ 8A7E 38               defb %00111000
  38+ 8A7F 4C               defb %01001100
  39+ 8A80 C6               defb %11000110
  40+ 8A81 C6               defb %11000110
  41+ 8A82 C6               defb %11000110
  42+ 8A83 64               defb %01100100
  43+ 8A84 38               defb %00111000
  44+ 8A85 00               defb %00000000
  45+ 8A86
  46+ 8A86                  ; 1
  47+ 8A86
  48+ 8A86 18               defb %00011000
  49+ 8A87 38               defb %00111000
  50+ 8A88 18               defb %00011000
  51+ 8A89 18               defb %00011000
  52+ 8A8A 18               defb %00011000
  53+ 8A8B 18               defb %00011000
  54+ 8A8C 7E               defb %01111110
  55+ 8A8D 00               defb %00000000
  56+ 8A8E
  57+ 8A8E                  ; 2
  58+ 8A8E
  59+ 8A8E 7C               defb %01111100
  60+ 8A8F C6               defb %11000110
  61+ 8A90 0E               defb %00001110
  62+ 8A91 3C               defb %00111100
  63+ 8A92 78               defb %01111000
  64+ 8A93 E0               defb %11100000
  65+ 8A94 FE               defb %11111110
  66+ 8A95 00               defb %00000000
  67+ 8A96
  68+ 8A96                  ; 3
  69+ 8A96
  70+ 8A96 7E               defb %01111110
  71+ 8A97 0C               defb %00001100
  72+ 8A98 18               defb %00011000
  73+ 8A99 3C               defb %00111100
  74+ 8A9A 06               defb %00000110
  75+ 8A9B C6               defb %11000110
  76+ 8A9C 7C               defb %01111100
  77+ 8A9D 00               defb %00000000
  78+ 8A9E
  79+ 8A9E                  ; 4
  80+ 8A9E
  81+ 8A9E 1C               defb %00011100
  82+ 8A9F 3C               defb %00111100
  83+ 8AA0 6C               defb %01101100
  84+ 8AA1 CC               defb %11001100
  85+ 8AA2 FE               defb %11111110
  86+ 8AA3 0C               defb %00001100
  87+ 8AA4 0C               defb %00001100
  88+ 8AA5 00               defb %00000000
  89+ 8AA6
  90+ 8AA6                  ; 5
  91+ 8AA6
  92+ 8AA6 FC               defb %11111100
  93+ 8AA7 C0               defb %11000000
  94+ 8AA8 FC               defb %11111100
  95+ 8AA9 06               defb %00000110
  96+ 8AAA 06               defb %00000110
  97+ 8AAB C6               defb %11000110
  98+ 8AAC 7C               defb %01111100
  99+ 8AAD 00               defb %00000000
 100+ 8AAE
 101+ 8AAE                  ; 6
 102+ 8AAE
 103+ 8AAE 3C               defb %00111100
 104+ 8AAF 60               defb %01100000
 105+ 8AB0 C0               defb %11000000
 106+ 8AB1 FC               defb %11111100
 107+ 8AB2 C6               defb %11000110
 108+ 8AB3 C6               defb %11000110
 109+ 8AB4 7C               defb %01111100
 110+ 8AB5 00               defb %00000000
 111+ 8AB6
 112+ 8AB6                  ; 7
 113+ 8AB6
 114+ 8AB6 FE               defb %11111110
 115+ 8AB7 C6               defb %11000110
 116+ 8AB8 0C               defb %00001100
 117+ 8AB9 18               defb %00011000
 118+ 8ABA 30               defb %00110000
 119+ 8ABB 30               defb %00110000
 120+ 8ABC 30               defb %00110000
 121+ 8ABD 00               defb %00000000
 122+ 8ABE
 123+ 8ABE                  ; 8
 124+ 8ABE
 125+ 8ABE 78               defb %01111000
 126+ 8ABF C4               defb %11000100
 127+ 8AC0 E4               defb %11100100
 128+ 8AC1 78               defb %01111000
 129+ 8AC2 9E               defb %10011110
 130+ 8AC3 86               defb %10000110
 131+ 8AC4 7C               defb %01111100
 132+ 8AC5 00               defb %00000000
 133+ 8AC6
 134+ 8AC6                  ; 9
 135+ 8AC6
 136+ 8AC6 7C               defb %01111100
 137+ 8AC7 C6               defb %11000110
 138+ 8AC8 C6               defb %11000110
 139+ 8AC9 7E               defb %01111110
 140+ 8ACA 06               defb %00000110
 141+ 8ACB 0C               defb %00001100
 142+ 8ACC 78               defb %01111000
 143+ 8ACD 00               defb %00000000
 144+ 8ACE
 145+ 8ACE                  ; Need to define the next 7
 146+ 8ACE 00 00 00...      DEFS 7 * 8
 147+ 8B06
 148+ 8B06                  ; A
 149+ 8B06
 150+ 8B06 38               defb %00111000
 151+ 8B07 6C               defb %01101100
 152+ 8B08 C6               defb %11000110
 153+ 8B09 C6               defb %11000110
 154+ 8B0A FE               defb %11111110
 155+ 8B0B C6               defb %11000110
 156+ 8B0C C6               defb %11000110
 157+ 8B0D 00               defb %00000000
 158+ 8B0E
 159+ 8B0E                  ; B
 160+ 8B0E
 161+ 8B0E FC               defb %11111100
 162+ 8B0F C6               defb %11000110
 163+ 8B10 C6               defb %11000110
 164+ 8B11 FC               defb %11111100
 165+ 8B12 C6               defb %11000110
 166+ 8B13 C6               defb %11000110
 167+ 8B14 FC               defb %11111100
 168+ 8B15 00               defb %00000000
 169+ 8B16
 170+ 8B16                  ; C
 171+ 8B16
 172+ 8B16
 173+ 8B16 3C               defb %00111100
 174+ 8B17 66               defb %01100110
 175+ 8B18 C0               defb %11000000
 176+ 8B19 C0               defb %11000000
 177+ 8B1A C0               defb %11000000
 178+ 8B1B 66               defb %01100110
 179+ 8B1C 3C               defb %00111100
 180+ 8B1D 00               defb %00000000
 181+ 8B1E
 182+ 8B1E                  ; D
 183+ 8B1E
 184+ 8B1E FC               defb %11111100
 185+ 8B1F CC               defb %11001100
 186+ 8B20 C6               defb %11000110
 187+ 8B21 C6               defb %11000110
 188+ 8B22 C6               defb %11000110
 189+ 8B23 CC               defb %11001100
 190+ 8B24 FC               defb %11111100
 191+ 8B25 00               defb %00000000
 192+ 8B26
 193+ 8B26                  ; E
 194+ 8B26
 195+ 8B26 FE               defb %11111110
 196+ 8B27 C0               defb %11000000
 197+ 8B28 C0               defb %11000000
 198+ 8B29 F8               defb %11111000
 199+ 8B2A C0               defb %11000000
 200+ 8B2B C0               defb %11000000
 201+ 8B2C FE               defb %11111110
 202+ 8B2D 00               defb %00000000
 203+ 8B2E
 204+ 8B2E                  ; F
 205+ 8B2E
 206+ 8B2E FE               defb %11111110
 207+ 8B2F C0               defb %11000000
 208+ 8B30 C0               defb %11000000
 209+ 8B31 FC               defb %11111100
 210+ 8B32 C0               defb %11000000
 211+ 8B33 C0               defb %11000000
 212+ 8B34 C0               defb %11000000
 213+ 8B35 00               defb %00000000
 214+ 8B36
 215+ 8B36                  ; G
 216+ 8B36
 217+ 8B36 3E               defb %00111110
 218+ 8B37 60               defb %01100000
 219+ 8B38 C0               defb %11000000
 220+ 8B39 CE               defb %11001110
 221+ 8B3A C6               defb %11000110
 222+ 8B3B 66               defb %01100110
 223+ 8B3C 3E               defb %00111110
 224+ 8B3D 00               defb %00000000
 225+ 8B3E
 226+ 8B3E                  ; H
 227+ 8B3E
 228+ 8B3E C6               defb %11000110
 229+ 8B3F C6               defb %11000110
 230+ 8B40 C6               defb %11000110
 231+ 8B41 FE               defb %11111110
 232+ 8B42 C6               defb %11000110
 233+ 8B43 C6               defb %11000110
 234+ 8B44 C6               defb %11000110
 235+ 8B45 00               defb %00000000
 236+ 8B46
 237+ 8B46                  ; I
 238+ 8B46
 239+ 8B46 7E               defb %01111110
 240+ 8B47 18               defb %00011000
 241+ 8B48 18               defb %00011000
 242+ 8B49 18               defb %00011000
 243+ 8B4A 18               defb %00011000
 244+ 8B4B 18               defb %00011000
 245+ 8B4C 7E               defb %01111110
 246+ 8B4D 00               defb %00000000
 247+ 8B4E
 248+ 8B4E                  ; J
 249+ 8B4E
 250+ 8B4E 06               defb %00000110
 251+ 8B4F 06               defb %00000110
 252+ 8B50 06               defb %00000110
 253+ 8B51 06               defb %00000110
 254+ 8B52 06               defb %00000110
 255+ 8B53 C6               defb %11000110
 256+ 8B54 7C               defb %01111100
 257+ 8B55 00               defb %00000000
 258+ 8B56
 259+ 8B56                  ; K
 260+ 8B56 C6               defb %11000110
 261+ 8B57 CC               defb %11001100
 262+ 8B58 D8               defb %11011000
 263+ 8B59 F0               defb %11110000
 264+ 8B5A F8               defb %11111000
 265+ 8B5B DC               defb %11011100
 266+ 8B5C CE               defb %11001110
 267+ 8B5D 00               defb %00000000
 268+ 8B5E
 269+ 8B5E                   ; L
 270+ 8B5E
 271+ 8B5E C0               defb %11000000
 272+ 8B5F C0               defb %11000000
 273+ 8B60 C0               defb %11000000
 274+ 8B61 C0               defb %11000000
 275+ 8B62 C0               defb %11000000
 276+ 8B63 C0               defb %11000000
 277+ 8B64 FC               defb %11111100
 278+ 8B65 00               defb %00000000
 279+ 8B66
 280+ 8B66                  ; M
 281+ 8B66 C6               defb %11000110
 282+ 8B67 EE               defb %11101110
 283+ 8B68 FE               defb %11111110
 284+ 8B69 FE               defb %11111110
 285+ 8B6A D6               defb %11010110
 286+ 8B6B C6               defb %11000110
 287+ 8B6C C6               defb %11000110
 288+ 8B6D 00               defb %00000000
 289+ 8B6E
 290+ 8B6E                  ; N
 291+ 8B6E C6               defb %11000110
 292+ 8B6F E6               defb %11100110
 293+ 8B70 F6               defb %11110110
 294+ 8B71 FE               defb %11111110
 295+ 8B72 DE               defb %11011110
 296+ 8B73 CE               defb %11001110
 297+ 8B74 C6               defb %11000110
 298+ 8B75 00               defb %00000000
 299+ 8B76
 300+ 8B76                  ; O
 301+ 8B76 7C               defb %01111100
 302+ 8B77 C6               defb %11000110
 303+ 8B78 C6               defb %11000110
 304+ 8B79 C6               defb %11000110
 305+ 8B7A C6               defb %11000110
 306+ 8B7B C6               defb %11000110
 307+ 8B7C 7C               defb %01111100
 308+ 8B7D 00               defb %00000000
 309+ 8B7E
 310+ 8B7E                  ; P
 311+ 8B7E
 312+ 8B7E FC               defb %11111100
 313+ 8B7F C6               defb %11000110
 314+ 8B80 C6               defb %11000110
 315+ 8B81 C6               defb %11000110
 316+ 8B82 FC               defb %11111100
 317+ 8B83 C0               defb %11000000
 318+ 8B84 C0               defb %11000000
 319+ 8B85 00               defb %00000000
 320+ 8B86
 321+ 8B86                  ; Q
 322+ 8B86
 323+ 8B86 7C               defb %01111100
 324+ 8B87 C6               defb %11000110
 325+ 8B88 C6               defb %11000110
 326+ 8B89 C6               defb %11000110
 327+ 8B8A DE               defb %11011110
 328+ 8B8B CC               defb %11001100
 329+ 8B8C 7A               defb %01111010
 330+ 8B8D 00               defb %00000000
 331+ 8B8E
 332+ 8B8E                  ; R
 333+ 8B8E
 334+ 8B8E FC               defb %11111100
 335+ 8B8F C6               defb %11000110
 336+ 8B90 C6               defb %11000110
 337+ 8B91 CE               defb %11001110
 338+ 8B92 F8               defb %11111000
 339+ 8B93 DC               defb %11011100
 340+ 8B94 CE               defb %11001110
 341+ 8B95 00               defb %00000000
 342+ 8B96
 343+ 8B96                  ; S
 344+ 8B96
 345+ 8B96 78               defb %01111000
 346+ 8B97 CC               defb %11001100
 347+ 8B98 C0               defb %11000000
 348+ 8B99 7C               defb %01111100
 349+ 8B9A 06               defb %00000110
 350+ 8B9B C6               defb %11000110
 351+ 8B9C 7C               defb %01111100
 352+ 8B9D 00               defb %00000000
 353+ 8B9E
 354+ 8B9E                  ; T
 355+ 8B9E
 356+ 8B9E FC               defb %11111100
 357+ 8B9F 30               defb %00110000
 358+ 8BA0 30               defb %00110000
 359+ 8BA1 30               defb %00110000
 360+ 8BA2 30               defb %00110000
 361+ 8BA3 30               defb %00110000
 362+ 8BA4 30               defb %00110000
 363+ 8BA5 00               defb %00000000
 364+ 8BA6
 365+ 8BA6                  ; U
 366+ 8BA6
 367+ 8BA6 C6               defb %11000110
 368+ 8BA7 C6               defb %11000110
 369+ 8BA8 C6               defb %11000110
 370+ 8BA9 C6               defb %11000110
 371+ 8BAA C6               defb %11000110
 372+ 8BAB C6               defb %11000110
 373+ 8BAC 7C               defb %01111100
 374+ 8BAD 00               defb %00000000
 375+ 8BAE
 376+ 8BAE                  ; V
 377+ 8BAE
 378+ 8BAE C6               defb %11000110
 379+ 8BAF C6               defb %11000110
 380+ 8BB0 C6               defb %11000110
 381+ 8BB1 EE               defb %11101110
 382+ 8BB2 7C               defb %01111100
 383+ 8BB3 38               defb %00111000
 384+ 8BB4 10               defb %00010000
 385+ 8BB5 00               defb %00000000
 386+ 8BB6
 387+ 8BB6                  ; W
 388+ 8BB6
 389+ 8BB6 C6               defb %11000110
 390+ 8BB7 C6               defb %11000110
 391+ 8BB8 D6               defb %11010110
 392+ 8BB9 FE               defb %11111110
 393+ 8BBA FE               defb %11111110
 394+ 8BBB EE               defb %11101110
 395+ 8BBC C6               defb %11000110
 396+ 8BBD 00               defb %00000000
 397+ 8BBE
 398+ 8BBE                  ; X
 399+ 8BBE C6               defb %11000110
 400+ 8BBF EE               defb %11101110
 401+ 8BC0 7C               defb %01111100
 402+ 8BC1 38               defb %00111000
 403+ 8BC2 7C               defb %01111100
 404+ 8BC3 EE               defb %11101110
 405+ 8BC4 C6               defb %11000110
 406+ 8BC5 00               defb %00000000
 407+ 8BC6
 408+ 8BC6                  ; Y
 409+ 8BC6 CC               defb %11001100
 410+ 8BC7 CC               defb %11001100
 411+ 8BC8 CC               defb %11001100
 412+ 8BC9 78               defb %01111000
 413+ 8BCA 30               defb %00110000
 414+ 8BCB 30               defb %00110000
 415+ 8BCC 30               defb %00110000
 416+ 8BCD 00               defb %00000000
 417+ 8BCE
 418+ 8BCE                  ; Z
 419+ 8BCE FE               defb %11111110
 420+ 8BCF 0E               defb %00001110
 421+ 8BD0 1C               defb %00011100
 422+ 8BD1 38               defb %00111000
 423+ 8BD2 70               defb %01110000
 424+ 8BD3 E0               defb %11100000
 425+ 8BD4 FE               defb %11111110
 426+ 8BD5 00               defb %00000000
 427+ 8BD6
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/arcdfont.asm
 168  8BD6
 169  8BD6
 170  8BD6              go:
 171  8BD6
 172  8BD6 AF                xor a                    ;    set a = 0
 173  8BD7 D3 FE             out (0feh),a             ;    output to border
 174  8BD9
 175  8BD9 3E 01             ld a,1                   ;    on startup set music on
 176  8BDB 32 07 89          ld (musicon),a
 177  8BDE
 178  8BDE
 179  8BDE
 180  8BDE AF                xor a
 181  8BDF CD 84 8C          call playmusic
 182  8BE2
 183  8BE2 CD 6E 8C          call initiate_im2_interrupts
 184  8BE5
 185  8BE5              begin:
 186  8BE5
 187  8BE5 3E 00             ld a,title                   ; Title Screen (Bank 0) is the Title area
 188  8BE7 CD 03 80          call switchbank
 189  8BEA
 190  8BEA CD 00 C0          call showmenu
 191  8BED 18 F6             jr begin
 192  8BEF
 193  8BEF
 194  8BEF
 195  8BEF              start:
 196  8BEF 32 05 89          ld (currentworld),a
 197  8BF2
 198  8BF2 CD 03 80          call switchbank
 199  8BF5 AF                xor a
 200  8BF6 CD 84 8C          call playmusic
 201  8BF9
 202  8BF9 CD C3 8C          call startnewgame
 203  8BFC
 204  8BFC              main_loop:
 205  8BFC
 206  8BFC AF                xor a
 207  8BFD 32 02 89          ld (collided),a
 208  8C00
 209  8C00                   ; draw any change cells to the screen
 210  8C00 CD C4 90          call blit_update_buffer
 211  8C03
 212  8C03                   ; clear out the buffer
 213  8C03 CD ED 91          call clear_update_buffer
 214  8C06
 215  8C06                   ; move the player
 216  8C06 CD 5C 8D          call move_player
 217  8C09
 218  8C09                   ; then move the sprites (1 of which is the player)
 219  8C09 CD 88 8E          call move_sprites
 220  8C0C
 221  8C0C                   ; display keys to collect
 222  8C0C CD 6C 97          call showkeys
 223  8C0F
 224  8C0F 3A F4 88          ld a,(energy)
 225  8C12 E6 FF             and 255
 226  8C14 28 13             jr z,endoflife
 227  8C16
 228  8C16 3A 02 89          ld a,(collided)
 229  8C19 E6 FF             and 255
 230  8C1B 28 DF             jr z,main_loop
 231  8C1D
 232  8C1D CD 72 98          call decreaseenergy
 233  8C20
 234  8C20 3A F4 88          ld a,(energy)
 235  8C23 E6 FF             and 255
 236  8C25 28 02             jr z,endoflife
 237  8C27
 238  8C27 18 D3             jr main_loop
 239  8C29
 240  8C29              endoflife:
 241  8C29
 242  8C29
 243  8C29 0E 02             ld c,2
 244  8C2B 06 00             ld b,0          ;full volume.
 245  8C2D 3E 05             ld a,5
 246  8C2F CD 24 80          call PLY_AKM_PLAYSOUNDEFFECT
 247  8C32
 248  8C32 3A 3C 89          ld a,(lives+3)
 249  8C35 3D                dec a
 250  8C36 32 3C 89          ld (lives+3),a
 251  8C39 FE 2F             cp '0'-1
 252  8C3B CA E5 8B          jp z,begin
 253  8C3E
 254  8C3E CD 44 8C          call newlife
 255  8C41
 256  8C41 C3 FC 8B          jp main_loop
 257  8C44
 258  8C44              newlife:
 259  8C44 CD B7 8C         call getplayerstatus
 260  8C47
 261  8C47 AF                xor a
 262  8C48 32 FA 88          ld (jump),a
 263  8C4B 32 05 C0          ld (sprites+5),a
 264  8C4E 3A 03 89          ld a,(player_xpos_onscreen)
 265  8C51 32 01 C0          ld (sprites+1),a
 266  8C54 3A 04 89          ld a,(player_ypos_onscreen)
 267  8C57 32 02 C0          ld (sprites+2),a
 268  8C5A
 269  8C5A CD D6 92          call setup_screen
 270  8C5D CD 03 8D          call resetenergy
 271  8C60
 272  8C60 11 3F 89          ld de,items_left
 273  8C63 CD B6 93          call draw_string
 274  8C66 11 52 89          ld de,items
 275  8C69 CD B6 93          call draw_string
 276  8C6C
 277  8C6C AF                xor a
 278  8C6D
 279  8C6D C9                ret
 280  8C6E
 281  8C6E              ;     ****************************************
 282  8C6E              ;     procedure : initiate_im2_interrupts
 283  8C6E              ;     function  : set up the interrup handler
 284  8C6E              ;                 to play music every 1/50th
 285  8C6E
 286  8C6E              ;     ****************************************
 287  8C6E              initiate_im2_interrupts:
 288  8C6E
 289  8C6E                ; setup the 128 entry vector table
 290  8C6E F3                di
 291  8C6F
 292  8C6F 21 00 BE          ld            hl, im2table
 293  8C72 11 01 BE          ld            de, im2table+1
 294  8C75 01 00 01          ld            bc, 256
 295  8C78
 296  8C78                   ; setup the i register (the high byte of the table)
 297  8C78 7C                ld            a, h
 298  8C79 ED 47             ld            i, a
 299  8C7B
 300  8C7B                   ; set the first entries in the table to $fc
 301  8C7B 3E BC             ld            a, $bc
 302  8C7D 77                ld            (hl), a
 303  8C7E
 304  8C7E                   ; copy to all the remaining 256 bytes
 305  8C7E ED B0             ldir
 306  8C80
 307  8C80                   ; setup im2 mode
 308  8C80 ED 5E             im            2
 309  8C82 FB                ei
 310  8C83
 311  8C83 C9                ret
 312  8C84
 313  8C84                   ; on entry: a contains song number
 314  8C84                   ;initializes the music.
 315  8C84                   ;initializes the sound effects.
 316  8C84
 317  8C84              playmusic:
 318  8C84
 319  8C84 21 16 88          ld hl,SOUNDEFFECTS_SOUNDEFFECTS
 320  8C87 CD 20 80          call PLY_AKM_INITSOUNDEFFECTS
 321  8C8A
 322  8C8A 21 7D 87          ld hl,PNP_START
 323  8C8D AF                xor a                   ;subsong 0.
 324  8C8E CD 51 81          call PLY_AKM_INIT
 325  8C91
 326  8C91 C9                ret
 327  8C92
 328  8C92                   ; level will be 0,1,2 etc
 329  8C92                   ; look up in levels to find the start address
 330  8C92                   ; of the level data and return in de
 331  8C92              getscreen:
 332  8C92
 333  8C92 3A 06 89          ld a,(currentscreen)
 334  8C95 21 00 F3          ld hl,screens
 335  8C98 CB 17             rl a
 336  8C9A 6F                ld l,a
 337  8C9B 5E                ld e,(hl)
 338  8C9C 23                inc hl
 339  8C9D 56                ld d,(hl)
 340  8C9E
 341  8C9E C9                ret
 342  8C9F
 343  8C9F              initiateplayer:
 344  8C9F
 345  8C9F                   ; copy sprites initial positin
 346  8C9F 11 00 C0          ld de,sprites
 347  8CA2 21 1C 89          ld hl,playerinitiatepositions
 348  8CA5 01 14 00          ld bc,sprite_size
 349  8CA8 ED B0             ldir
 350  8CAA
 351  8CAA C9                ret
 352  8CAB
 353  8CAB              saveplayerstatus:
 354  8CAB
 355  8CAB                   ; copy sprites initial positin
 356  8CAB 11 08 89          ld de,playeronscreenpos
 357  8CAE 21 00 C0          ld hl,sprites
 358  8CB1 01 14 00          ld bc,sprite_size
 359  8CB4 ED B0             ldir
 360  8CB6
 361  8CB6 C9                ret
 362  8CB7
 363  8CB7              getplayerstatus:
 364  8CB7
 365  8CB7                   ; copy sprites initial positin
 366  8CB7 11 00 C0          ld de,sprites
 367  8CBA 21 08 89          ld hl,playeronscreenpos
 368  8CBD 01 14 00          ld bc,sprite_size
 369  8CC0 ED B0             ldir
 370  8CC2
 371  8CC2 C9                ret
 372  8CC3
 373  8CC3
 374  8CC3
 375  8CC3              startnewgame:
 376  8CC3
 377  8CC3                   ; Copy the world keys to collect to the temporary buffer in $8000 memory
 378  8CC3 21 00 C1          ld hl,keystocollect
 379  8CC6 11 00 A6          ld de,keydata
 380  8CC9 01 FF 00          ld bc,$ff
 381  8CCC ED B0             ldir
 382  8CCE
 383  8CCE CD 9F 8C          call initiateplayer
 384  8CD1
 385  8CD1 3E 39             ld a,'9'
 386  8CD3 32 3C 89          ld (lives+3),a
 387  8CD6
 388  8CD6 AF                xor a
 389  8CD7 32 FA 88          ld (jump),a
 390  8CDA 32 05 C0          ld (sprites+5),a
 391  8CDD
 392  8CDD AF                xor a
 393  8CDE 32 06 89          ld (currentscreen),a
 394  8CE1
 395  8CE1 CD 54 98          call resetkeystocollect
 396  8CE4
 397  8CE4 CD D6 92          call setup_screen
 398  8CE7
 399  8CE7 11 3F 89          ld de,items_left
 400  8CEA CD 27 94          call draw_string_multiple
 401  8CED
 402  8CED 11 52 89          ld de,items
 403  8CF0 CD 27 94          call draw_string_multiple
 404  8CF3 CD 03 8D          call resetenergy
 405  8CF6
 406  8CF6
 407  8CF6                   ; move the player
 408  8CF6 CD 5C 8D          call move_player
 409  8CF9
 410  8CF9                   ; then move the sprites (1 of which is the player)
 411  8CF9 CD 88 8E          call move_sprites
 412  8CFC
 413  8CFC CD C4 90          call blit_update_buffer
 414  8CFF                   ; display keys to collect
 415  8CFF CD 6C 97          call showkeys
 416  8D02
 417  8D02 C9                ret
 418  8D03
 419  8D03              resetenergy:
 420  8D03 3E 1E             ld a,30
 421  8D05 32 F4 88          ld (energy),a
 422  8D08 21 E1 5A          ld hl,attributes+768-31-(yscreenoffset*32)
 423  8D0B 3E 67             ld a,paper_green+ink_white+attr_bright
 424  8D0D 06 1E             ld b,30
 425  8D0F              su1:
 426  8D0F 77                ld (hl),a
 427  8D10 2C                inc l
 428  8D11 10 FC             djnz su1
 429  8D13
 430  8D13 11 F4 89          ld de,energy_message
 431  8D16 CD 27 94          call draw_string_multiple
 432  8D19 11 30 89          ld de,lives_message
 433  8D1C CD 27 94          call draw_string_multiple
 434  8D1F 11 39 89          ld de,lives
 435  8D22 CD 27 94          call draw_string_multiple
 436  8D25
 437  8D25 C9                ret
 438  8D26
 439  8D26              menu:
 440  8D26 11 7B 89          ld de,menu_window
 441  8D29 CD 07 95          call draw_window
 442  8D2C
 443  8D2C 11 7F 89          ld de,menu_message
 444  8D2F CD 27 94          call draw_string_multiple
 445  8D32
 446  8D32              me1:
 447  8D32 CD 83 94          call key_wait_unique
 448  8D35
 449  8D35 FE 24             cp key_1              ; 1
 450  8D37 C8                ret z
 451  8D38
 452  8D38 FE 1C             cp key_2              ; 2
 453  8D3A C8                ret z
 454  8D3B
 455  8D3B FE 14             cp key_3              ; 3
 456  8D3D C8                ret z
 457  8D3E
 458  8D3E FE 0C             cp key_4              ; 4
 459  8D40 C8                ret z
 460  8D41
 461  8D41 FE 04             cp key_5              ; 5
 462  8D43 C8                ret z
 463  8D44
 464  8D44 FE 0D             cp key_r              ; r
 465  8D46 C8                ret z
 466  8D47
 467  8D47 FE 10             cp key_m              ; m
 468  8D49 C8                ret z
 469  8D4A
 470  8D4A 18 E6             jr me1
 471  8D4C
 472  8D4C              redefine:
 473  8D4C
 474  8D4C 11 7B 89          ld de,menu_window
 475  8D4F CD 07 95          call draw_window
 476  8D52
 477  8D52 11 59 89          ld de,redefine_message
 478  8D55 CD 27 94          call draw_string_multiple
 479  8D58
 480  8D58 CD BC 94          call key_redefine
 481  8D5B
 482  8D5B C9                ret
 483  8D5C
 484  8D5C              move_player:
 485  8D5C DD 21 00 C0       ld ix,sprites
 486  8D60
 487  8D60                   ; check to see if player is jumping
 488  8D60                   ; if so, remove all control from user
 489  8D60
 490  8D60 3A FA 88          ld a,(jump)
 491  8D63 E6 FF             and 255
 492  8D65 C2 18 8E          jp nz,jumping
 493  8D68
 494  8D68                   ;  stop player moving
 495  8D68 DD 36 07 00       ld (ix+7),0
 496  8D6C
 497  8D6C                   ; check right key
 498  8D6C 3A 76 95          ld a,(key_store+1)
 499  8D6F CD 5B 94          call key_test
 500  8D72 DC D9 8D          call c,mpr
 501  8D75
 502  8D75                   ; check left key
 503  8D75 3A 75 95          ld a,(key_store)
 504  8D78 CD 5B 94          call key_test
 505  8D7B DC 94 8D          call c,mpl
 506  8D7E
 507  8D7E                   ; check jump key
 508  8D7E 3A 77 95          ld a,(key_store+2)
 509  8D81 CD 5B 94          call key_test
 510  8D84 DA 08 8E          jp c,jumpstart
 511  8D87
 512  8D87                   ; check player is moving
 513  8D87                   ; if we are moving left or right,
 514  8D87                   ; return so that player is animated
 515  8D87 DD 7E 07          ld a,(ix+7)
 516  8D8A E6 FF             and 255
 517  8D8C C0                ret nz
 518  8D8D
 519  8D8D                   ; stop animation
 520  8D8D                   ; force bank switch to stop
 521  8D8D                   ; by setting to maximum on each pass
 522  8D8D DD 7E 11          ld a,(ix+17)
 523  8D90 DD 77 10          ld (ix+16),a
 524  8D93
 525  8D93 C9                ret
 526  8D94
 527  8D94              mpl:
 528  8D94 DD 21 00 C0       ld ix,sprites
 529  8D98
 530  8D98                   ; direction = -1
 531  8D98 DD 36 07 FF       ld (ix+7),-1
 532  8D9C
 533  8D9C                   ; offset for graphics = 48 (4 frames)
 534  8D9C DD 36 12 30       ld (ix+18),48
 535  8DA0
 536  8DA0 CD A4 8D          call checkscreenleft
 537  8DA3
 538  8DA3 C9                ret
 539  8DA4
 540  8DA4
 541  8DA4              checkscreenleft:
 542  8DA4
 543  8DA4 DD 7E 04          ld a,(ix+4)
 544  8DA7 FE 00             cp 0
 545  8DA9 C0                ret nz
 546  8DAA
 547  8DAA DD 7E 01          ld a,(ix+1)
 548  8DAD FE 00             cp 0
 549  8DAF C0                ret nz
 550  8DB0
 551  8DB0              csl1:
 552  8DB0 DD 36 01 1C       ld (ix+1),28 ; set xpos to 28
 553  8DB4 DD 36 04 04       ld (ix+4),4  ; set anim frame to 4
 554  8DB8
 555  8DB8 3A 06 89          ld a,(currentscreen)
 556  8DBB 3D                dec a
 557  8DBC 32 06 89          ld (currentscreen),a
 558  8DBF
 559  8DBF CD D6 92          call setup_screen
 560  8DC2
 561  8DC2 C9                ret
 562  8DC3
 563  8DC3              checkscreendown
 564  8DC3
 565  8DC3 DD 7E 02          ld a,(ix+2)
 566  8DC6 FE 12             cp 18
 567  8DC8 C0                ret nz
 568  8DC9
 569  8DC9 DD 36 02 00       ld (ix+2),0 ; set xpos to 28
 570  8DCD
 571  8DCD
 572  8DCD 3A 06 89          ld a,(currentscreen)
 573  8DD0 C6 04             add a,4
 574  8DD2 32 06 89          ld (currentscreen),a
 575  8DD5 CD D6 92          call setup_screen
 576  8DD8
 577  8DD8 C9                ret
 578  8DD9
 579  8DD9              mpr:
 580  8DD9
 581  8DD9                   ; direction = 1
 582  8DD9 DD 36 07 01       ld (ix+7),1
 583  8DDD
 584  8DDD                   ; offset for graphics = 0 (beginning of player frames)
 585  8DDD DD 36 12 00       ld (ix+18),0
 586  8DE1
 587  8DE1 CD E5 8D          call checkscreenright
 588  8DE4
 589  8DE4 C9                ret
 590  8DE5
 591  8DE5
 592  8DE5              checkscreenright:
 593  8DE5
 594  8DE5 DD 7E 01          ld a,(ix+1)
 595  8DE8 FE 1C             cp 28
 596  8DEA D8                ret c
 597  8DEB
 598  8DEB FE 1D             cp 29
 599  8DED 28 06             jr z,csr1
 600  8DEF
 601  8DEF                   ; if 29, is anim frame to edge of screen
 602  8DEF DD 7E 04          ld a,(ix+4)
 603  8DF2 FE 03             cp 3
 604  8DF4 C0                ret nz
 605  8DF5
 606  8DF5              csr1:
 607  8DF5 DD 36 01 00       ld (ix+1),0  ; xpos
 608  8DF9 DD 36 04 04       ld (ix+4),4  ; set anim frame to 0
 609  8DFD 3A 06 89          ld a,(currentscreen)
 610  8E00 3C                inc a
 611  8E01 32 06 89          ld (currentscreen),a
 612  8E04
 613  8E04 CD D6 92          call setup_screen
 614  8E07
 615  8E07 C9                ret
 616  8E08
 617  8E08              jumpstart:
 618  8E08 CD 21 90          call amionplatform
 619  8E0B
 620  8E0B 7B                ld a,e            ; if we are not on a platform
 621  8E0C E6 01             and 1             ; then we can't jump
 622  8E0E C0                ret nz
 623  8E0F
 624  8E0F
 625  8E0F                   ; only allow player to jump if he is on a platform
 626  8E0F 0E 02             ld c,2
 627  8E11 06 00             ld b,0          ;full volume.
 628  8E13 3E 04             ld a,4
 629  8E15
 630  8E15 CD 24 80          call PLY_AKM_PLAYSOUNDEFFECT
 631  8E18
 632  8E18              jumping:
 633  8E18 DD 7E 07          ld a,(ix+7)         ; if we are moving left or right
 634  8E1B E6 FF             and 255             ; we want to animate
 635  8E1D 20 06             jr nz,jump2
 636  8E1F
 637  8E1F                   ; stop animation if not moving left or right
 638  8E1F DD 7E 11          ld a,(ix+17)
 639  8E22 DD 77 10          ld (ix+16),a
 640  8E25
 641  8E25              jump2:
 642  8E25                        ; increase jump flag until we hit 16 then end
 643  8E25 3A FA 88          ld a,(jump)
 644  8E28 3C                inc a
 645  8E29 E6 0F             and 15
 646  8E2B 32 FA 88          ld (jump),a
 647  8E2E
 648  8E2E                   ; if we have hit 0, that's the end so quit
 649  8E2E C8                ret z
 650  8E2F
 651  8E2F                   ;   lookup and get the jump pattern byte
 652  8E2F
 653  8E2F 21 00 BC          ld hl,jumppattern
 654  8E32 85                add a,l
 655  8E33 6F                ld l,a
 656  8E34 7E                ld a,(hl)
 657  8E35
 658  8E35                   ; the amount to add to y position for player
 659  8E35 DD 77 05          ld (ix+5),a
 660  8E38
 661  8E38                   ; as there are 16 steps to the jump, if we are
 662  8E38                   ; above 7 then logically we are on decent of the jump arc
 663  8E38
 664  8E38 3A FA 88          ld a,(jump)
 665  8E3B E6 F8             and %11111000
 666  8E3D
 667  8E3D 28 10             jr z,testup
 668  8E3F
 669  8E3F                   ;   on decent, check if we have hit a platform
 670  8E3F CD 21 90          call amionplatform
 671  8E42
 672  8E42
 673  8E42 7B                ld a,e            ; if we have not hit a platform
 674  8E43 E6 01             and 1
 675  8E45 20 32             jr nz,testleftorright
 676  8E47
 677  8E47                   ; if we have hit a platform, reset jump so
 678  8E47                   ; jump has ended
 679  8E47
 680  8E47 AF                xor a
 681  8E48 32 FA 88          ld (jump),a
 682  8E4B DD 77 05          ld (ix+5),a
 683  8E4E
 684  8E4E C9                ret
 685  8E4F
 686  8E4F              testup:
 687  8E4F DD 7E 02          ld a,(ix+2)
 688  8E52 FE FF             cp $ff
 689  8E54
 690  8E54 28 13             jr z,checkscreenup
 691  8E56 CD E6 8F          call amihittingblock
 692  8E59
 693  8E59 7B                ld a,e
 694  8E5A E6 01             and 1
 695  8E5C 20 1B             jr nz,testleftorright
 696  8E5E
 697  8E5E AF                xor a
 698  8E5F 32 FA 88          ld (jump),a
 699  8E62 DD 77 05          ld (ix+5),a
 700  8E65
 701  8E65 CD 72 98          call decreaseenergy
 702  8E68
 703  8E68 C9                ret
 704  8E69
 705  8E69              checkscreenup:
 706  8E69
 707  8E69 DD 36 02 0F       ld (ix+2),15 ;     bohhom of screen
 708  8E6D
 709  8E6D 3A 06 89          ld a,(currentscreen)
 710  8E70 D6 04             sub 4                ; 4 screens up
 711  8E72 32 06 89          ld (currentscreen),a
 712  8E75
 713  8E75 CD D6 92          call setup_screen
 714  8E78
 715  8E78 C9                ret
 716  8E79
 717  8E79              testleftorright:
 718  8E79
 719  8E79 DD 7E 07          ld a,(ix+7)
 720  8E7C FE 01             cp 1
 721  8E7E 20 04             jr nz,testleft
 722  8E80 CD E5 8D          call checkscreenright
 723  8E83 C9                ret
 724  8E84
 725  8E84              testleft:
 726  8E84 CD A4 8D          call checkscreenleft
 727  8E87 C9                ret
 728  8E88
 729  8E88              ; move all sprites including player
 730  8E88
 731  8E88              move_sprites:
 732  8E88 DD 21 00 C0       ld ix,sprites
 733  8E8C 3A F6 88          ld a,(totalsprites)
 734  8E8F              ms1:
 735  8E8F 08                ex af,af'
 736  8E90
 737  8E90                   ;  is sprite active, if not go to next sprite
 738  8E90 DD 7E 00          ld a,(ix+0)
 739  8E93 E6 FF             and 255
 740  8E95 CA B5 8F          jp z,get_next_sprite
 741  8E98
 742  8E98              bank_decrease:
 743  8E98                   ; decrease bank chsnge time
 744  8E98 DD 7E 10          ld a,(ix+16)
 745  8E9B 3D                dec a
 746  8E9C DD 77 10          ld (ix+16),a
 747  8E9F 20 17             jr nz,move_decrease
 748  8EA1
 749  8EA1                   ; bank counter allows the 2 frame animation
 750  8EA1              bank_counter_reset:
 751  8EA1
 752  8EA1                   ; reset bank counter to bank counter reset value
 753  8EA1 DD 7E 11          ld a,(ix+17)
 754  8EA4 DD 77 10          ld (ix+16),a
 755  8EA7
 756  8EA7                   ; switch bank by adding the bank offset value
 757  8EA7 DD 7E 0E          ld a,(ix+14)
 758  8EAA DD 86 0F          add a,(ix+15)
 759  8EAD DD 77 0E          ld (ix+14),a
 760  8EB0
 761  8EB0                   ; negate the bank offset value for next time we switch
 762  8EB0 DD 7E 0F          ld a,(ix+15)
 763  8EB3 ED 44             neg
 764  8EB5 DD 77 0F          ld (ix+15),a
 765  8EB8
 766  8EB8              move_decrease:
 767  8EB8
 768  8EB8                   ; decrease move counter
 769  8EB8 DD 7E 08          ld a,(ix+8)
 770  8EBB 3D                dec a
 771  8EBC 28 06             jr z,move_counter_reset
 772  8EBE
 773  8EBE                   ; not time to move, so store away value
 774  8EBE DD 77 08          ld (ix+8),a
 775  8EC1 C3 B5 8F          jp get_next_sprite
 776  8EC4
 777  8EC4              move_counter_reset:
 778  8EC4
 779  8EC4                   ; ix+0 doubles as both active (>0) and reset for movement counter
 780  8EC4 DD 7E 00          ld a,(ix+0)
 781  8EC7
 782  8EC7                   ;  reset movement counter
 783  8EC7 DD 77 08          ld (ix+8),a
 784  8ECA
 785  8ECA                   ; first check if we are currently dealing with the player
 786  8ECA                   ; if so we need to check if he is jumping
 787  8ECA
 788  8ECA                   ; get current sprite (af' contains the counter for all sprites
 789  8ECA 08                ex af,af'
 790  8ECB 5F                ld e,a
 791  8ECC 08                ex af,af'
 792  8ECD
 793  8ECD                   ;  are we on sprite 1, player, if not just check to see if sprite is on a platform
 794  8ECD 3A F6 88          ld a,(totalsprites)
 795  8ED0
 796  8ED0 BB                cp e
 797  8ED1 20 07             jr nz,check_sprite_is_on_platform
 798  8ED3
 799  8ED3                   ; if we are the player, check to see if we are jumping, so don't check if we are falling
 800  8ED3 3A FA 88          ld a,(jump)
 801  8ED6 E6 FF             and 255
 802  8ED8 20 18             jr nz,sprite_can_move
 803  8EDA
 804  8EDA              check_sprite_is_on_platform:
 805  8EDA                   ; first check if we are on a platform
 806  8EDA
 807  8EDA CD 21 90          call amionplatform
 808  8EDD
 809  8EDD
 810  8EDD 7B                ld a,e
 811  8EDE E6 01             and 1
 812  8EE0 28 10             jr z,sprite_can_move
 813  8EE2
 814  8EE2                   ; if not on plaform, move the sprite down 1 row
 815  8EE2                   ; must do this before moving
 816  8EE2 CD 3F 92          call remove_sprite
 817  8EE5
 818  8EE5 DD 7E 02          ld a,(ix+2)
 819  8EE8 3C                inc a
 820  8EE9 DD 77 02          ld (ix+2),a
 821  8EEC
 822  8EEC                   ; check for screen below
 823  8EEC CD C3 8D          call checkscreendown
 824  8EEF
 825  8EEF C3 B2 8F          jp sprite_can_be_drawn
 826  8EF2
 827  8EF2              sprite_can_move:
 828  8EF2
 829  8EF2                   ; must do this before moving
 830  8EF2 CD 3F 92          call remove_sprite
 831  8EF5
 832  8EF5                   ; add any vertical movement, even if not time to move
 833  8EF5                   ; to get fast fall from platform
 834  8EF5 DD 7E 02          ld a,(ix+2)
 835  8EF8 DD 86 05          add a,(ix+5)
 836  8EFB DD 77 02          ld (ix+2),a
 837  8EFE
 838  8EFE                   ; get move counter and add direction (either -1 or 1)
 839  8EFE DD 7E 04          ld a,(ix+4)
 840  8F01 DD 86 07          add a,(ix+7)
 841  8F04
 842  8F04                   ; if we are now "-1" then move sprite left.
 843  8F04 FA 5E 8F          jp m,move_sprite_left
 844  8F07
 845  8F07                   ; if we are now "4" then move right
 846  8F07 FE 04             cp 4
 847  8F09 28 08             jr z,move_sprite_right
 848  8F0B
 849  8F0B                   ; trim off -1 or 4 to get 0 to 3
 850  8F0B E6 03             and 3
 851  8F0D DD 77 04          ld (ix+4),a
 852  8F10
 853  8F10 C3 A7 8F          jp calculate_correct_sprite_frame
 854  8F13
 855  8F13                   ; move counter has hit "4" so time to change column.
 856  8F13
 857  8F13              move_sprite_right:
 858  8F13
 859  8F13                   ; move offset now reset
 860  8F13 AF                xor a
 861  8F14 DD 77 04          ld (ix+4),a
 862  8F17
 863  8F17                   ; get xpos, and check if we have hit the max
 864  8F17 DD 7E 01          ld a,(ix+1)
 865  8F1A DD BE 0A          cp (ix+10)     ; max
 866  8F1D                   ;jr nz,move_sprite_right_check_obstructions
 867  8F1D 28 17             jr z,move_sprite_right_hit_maximum
 868  8F1F                   ; we have not hit the max
 869  8F1F
 870  8F1F                   ; check the bottom right character to see if it is solid
 871  8F1F
 872  8F1F 01 04 02          ld bc,0204h
 873  8F22 CD CD 8F          call get_player_buffer_address
 874  8F25
 875  8F25                   ; is it a foreground block
 876  8F25 AF                xor a
 877  8F26 7E                ld a,(hl)
 878  8F27 E6 80             and 128
 879  8F29 20 2A             jr nz,move_sprite_right_ok
 880  8F2B
 881  8F2B                   ; need to put check in for background types by checking the flash attribute
 882  8F2B E5                push hl
 883  8F2C 11 00 03          ld de,back_colour_buffer-bg_buffer
 884  8F2F 19                add hl,de
 885  8F30 7E                ld a,(hl)
 886  8F31 E1                pop hl
 887  8F32
 888  8F32                   ; is it solid, if so, ok
 889  8F32 E6 80             and 128
 890  8F34
 891  8F34 28 1F             jr z,move_sprite_right_ok
 892  8F36
 893  8F36              move_sprite_right_hit_maximum:
 894  8F36                   ; are we dealing with the player?
 895  8F36 08                ex af,af'
 896  8F37 5F                ld e,a
 897  8F38 08                ex af,af'
 898  8F39
 899  8F39 3A F6 88          ld a,(totalsprites)
 900  8F3C BB                cp e
 901  8F3D 3E 03             ld a,3           ; correct move offset for smooth movement
 902  8F3F 28 0F             jr z,sprite_store_right_move_position        ; if player, just stay where we are
 903  8F41
 904  8F41                   ; reverse sprite, as we have hit an obstruction before hitting max
 905  8F41 DD 7E 07          ld a,(ix+7)
 906  8F44 ED 44             neg
 907  8F46 DD 77 07          ld (ix+7),a
 908  8F49                             ; set graphics offset to 48 (4 x 12 chars) for
 909  8F49                   ; left facing version
 910  8F49
 911  8F49                   ; frames 0-3 for right facing at 2 pixel shifts
 912  8F49                   ; 4-7 for left facing at 2 pixel shifts
 913  8F49                   ; bank has same but different animation frame
 914  8F49 3E 30             ld a,48
 915  8F4B DD 77 12          ld (ix+18),a
 916  8F4E
 917  8F4E 3E 02             ld a,2           ; correct offset for smooth movements
 918  8F50
 919  8F50              sprite_store_right_move_position:
 920  8F50 DD 77 04          ld (ix+4),a
 921  8F53 18 52             jr calculate_correct_sprite_frame
 922  8F55
 923  8F55              move_sprite_right_ok:
 924  8F55 DD 7E 01          ld a,(ix+1)
 925  8F58 3C                inc a
 926  8F59 DD 77 01          ld (ix+1),a
 927  8F5C
 928  8F5C 18 49             jr calculate_correct_sprite_frame
 929  8F5E
 930  8F5E                   ; sprite is ok to move left
 931  8F5E              move_sprite_left:
 932  8F5E                   ; move offset now reset (to 3 for left)
 933  8F5E                   ; as (ix+4) use to calculate frames for
 934  8F5E                   ; 2 pixel offsets
 935  8F5E 3E 03             ld a,3
 936  8F60 DD 77 04          ld (ix+4),a
 937  8F63
 938  8F63                   ; have we hit the minimum?
 939  8F63 DD 7E 01          ld a,(ix+1)
 940  8F66 DD BE 0B          cp (ix+11)
 941  8F69 28 17             jr z,move_sprite_left_hit_minimum
 942  8F6B
 943  8F6B                   ; get the bottom left character
 944  8F6B 01 FF 02          ld bc,02ffh
 945  8F6E CD CD 8F          call get_player_buffer_address
 946  8F71
 947  8F71                   ; if foreground, ignore
 948  8F71 AF                xor a
 949  8F72 7E                ld a,(hl)
 950  8F73 E6 80             and 128
 951  8F75 20 29             jr nz,move_sprite_left_ok
 952  8F77
 953  8F77                   ; need to put check in for background types by checking the flash attribute
 954  8F77 E5                push hl
 955  8F78 11 00 03          ld de,back_colour_buffer-bg_buffer
 956  8F7B 19                add hl,de
 957  8F7C 7E                ld a,(hl)
 958  8F7D E1                pop hl
 959  8F7E
 960  8F7E                   ; is it solid, if so, ok
 961  8F7E E6 80             and 128
 962  8F80
 963  8F80 28 1E             jr z,move_sprite_left_ok
 964  8F82
 965  8F82              move_sprite_left_hit_minimum
 966  8F82
 967  8F82                   ; is this spriute the player
 968  8F82 08                ex af,af'
 969  8F83 5F                ld e,a
 970  8F84 08                ex af,af'
 971  8F85
 972  8F85                   ;  are we on sprite 1, player
 973  8F85 3A F6 88          ld a,(totalsprites)
 974  8F88 BB                cp e         ; as we are counting total_sprites, the first will be total_srites
 975  8F89 3E 00             ld a,0                   ; offset for smooth movement (not xor a to preserve flags)
 976  8F8B 28 0E             jr z,sprite_store_left_move_position
 977  8F8D
 978  8F8D                   ; reverse sprite direction
 979  8F8D DD 7E 07          ld a,(ix+7)
 980  8F90 ED 44             neg
 981  8F92 DD 77 07          ld (ix+7),a
 982  8F95
 983  8F95                   ; set to right chars
 984  8F95 AF                xor a        ; 48 = 12 chars * 4 frames
 985  8F96 DD 77 12          ld (ix+18),a
 986  8F99
 987  8F99 3E 01             ld a,1      ; offset for smooth movement
 988  8F9B
 989  8F9B              sprite_store_left_move_position:
 990  8F9B
 991  8F9B DD 77 04          ld (ix+4),a
 992  8F9E
 993  8F9E 18 07             jr calculate_correct_sprite_frame
 994  8FA0
 995  8FA0              move_sprite_left_ok:
 996  8FA0 DD 7E 01          ld a,(ix+1)
 997  8FA3 3D                dec a
 998  8FA4 DD 77 01          ld (ix+1),a
 999  8FA7
1000  8FA7              ;        work out the frame
1001  8FA7              calculate_correct_sprite_frame:
1002  8FA7 AF                xor a
1003  8FA8 DD 46 04          ld b,(ix+4)           ; move offset
1004  8FAB              ccsf_lp
1005  8FAB C6 0C             add a,sprite_frame_size
1006  8FAD 10 FC             djnz ccsf_lp
1007  8FAF
1008  8FAF                   ; store the offset when it comes to drawing
1009  8FAF DD 77 09          ld (ix+9),a
1010  8FB2
1011  8FB2              sprite_can_be_drawn:
1012  8FB2 CD 5C 90          call draw_sprite
1013  8FB5
1014  8FB5              get_next_sprite:
1015  8FB5 11 14 00          ld de,sprite_size
1016  8FB8 DD 19             add ix,de
1017  8FBA
1018  8FBA                   ; check collision
1019  8FBA 3A F6 88          ld a,(totalsprites)
1020  8FBD 5F                ld e,a
1021  8FBE 08                ex af,af'
1022  8FBF
1023  8FBF                   ; if not player, check for collision
1024  8FBF FE 01             cp 1
1025  8FC1 28 05             jr z,nxt1
1026  8FC3
1027  8FC3 F5                push af
1028  8FC4 CD 34 97          call collide
1029  8FC7 F1                pop af
1030  8FC8
1031  8FC8              nxt1:
1032  8FC8 3D                dec a
1033  8FC9 C2 8F 8E          jp nz,ms1
1034  8FCC
1035  8FCC C9                ret
1036  8FCD
1037  8FCD                   ; based on the player x,y position get address
1038  8FCD
1039  8FCD                   ; bc = y,x offset to add on
1040  8FCD                   ; exit: hl = address
1041  8FCD
1042  8FCD              get_player_buffer_address:
1043  8FCD 21 00 BB          ld hl,row_number_lookup
1044  8FD0 DD 7E 02          ld a,(ix+2)
1045  8FD3 80                add a,b    ; offset for height
1046  8FD4 CB 17             rl a
1047  8FD6 85                add a,l
1048  8FD7 6F                ld l,a
1049  8FD8 5E                ld e,(hl)
1050  8FD9 2C                inc l
1051  8FDA 56                ld d,(hl)
1052  8FDB
1053  8FDB                   ; de has row address, so add xpos
1054  8FDB DD 7E 01          ld a,(ix+1)
1055  8FDE 81                add a,c
1056  8FDF 83                add a,e
1057  8FE0 5F                ld e,a
1058  8FE1
1059  8FE1                   ; de now has the correct offset
1060  8FE1
1061  8FE1 21 00 CB          ld hl,bg_buffer
1062  8FE4 19                add hl,de
1063  8FE5
1064  8FE5 C9                ret
1065  8FE6
1066  8FE6              amihittingblock:
1067  8FE6 01 00 00          ld bc,00000h    ; 1 chars up, 0 accross
1068  8FE9 CD CD 8F          call get_player_buffer_address
1069  8FEC
1070  8FEC                   ; is it a foreground block, if so, ok
1071  8FEC AF                xor a
1072  8FED 5F                ld e,a
1073  8FEE 7E                ld a,(hl)
1074  8FEF E6 80             and 128
1075  8FF1 20 0A             jr nz,amhb01
1076  8FF3
1077  8FF3                   ; need to put check in for background types by checking the flash attribute
1078  8FF3 E5                push hl
1079  8FF4 11 00 03          ld de,back_colour_buffer-bg_buffer
1080  8FF7 19                add hl,de
1081  8FF8 7E                ld a,(hl)
1082  8FF9 E1                pop hl
1083  8FFA
1084  8FFA                   ; is it solid, if so, ok
1085  8FFA E6 80             and 128
1086  8FFC C0                ret nz
1087  8FFD
1088  8FFD              amhb01
1089  8FFD                   ; no space, so check further along
1090  8FFD
1091  8FFD                   ; check 2 spaces along
1092  8FFD 23                inc hl
1093  8FFE 23                inc hl
1094  8FFF
1095  8FFF 7E                ld a,(hl)
1096  9000 E6 80             and 128
1097  9002 20 0A             jr nz,amhb02
1098  9004
1099  9004                   ; need to put check in for background types by checking the flash attribute
1100  9004 E5                push hl
1101  9005 11 00 03          ld de,back_colour_buffer-bg_buffer
1102  9008 19                add hl,de
1103  9009 7E                ld a,(hl)
1104  900A E1                pop hl
1105  900B
1106  900B                   ; is it solid, if so, ok
1107  900B E6 80             and 128
1108  900D C0                ret nz
1109  900E
1110  900E              amhb02:
1111  900E                   ;check 3 spaces along
1112  900E 23                inc hl
1113  900F
1114  900F 7E                ld a,(hl)
1115  9010 E6 80             and 128
1116  9012 20 0A             jr nz,amhb03
1117  9014
1118  9014                   ; need to put check in for background types by checking the flash attribute
1119  9014 E5                push hl
1120  9015 11 00 03          ld de,back_colour_buffer-bg_buffer
1121  9018 19                add hl,de
1122  9019 7E                ld a,(hl)
1123  901A E1                pop hl
1124  901B
1125  901B                   ; is it solid, if so, ok
1126  901B E6 80             and 128
1127  901D C0                ret nz
1128  901E              amhb03:
1129  901E                   ; set e to "yes"
1130  901E 1E 01             ld e,1
1131  9020
1132  9020 C9                ret
1133  9021
1134  9021              ; check to see if sprite is on a platform
1135  9021              amionplatform:
1136  9021
1137  9021
1138  9021 01 00 03               ld bc,0300h    ; 3 chars down, 0 accross
1139  9024 CD CD 8F               call get_player_buffer_address
1140  9027
1141  9027                        ; is it a foreground block, if so, ok
1142  9027 AF                     xor a
1143  9028 5F                     ld e,a
1144  9029 7E                     ld a,(hl)
1145  902A E6 80                  and 128
1146  902C 20 0A                  jr nz,ami01
1147  902E
1148  902E                        ; need to put check in for background types by checking the flash attribute
1149  902E E5                     push hl
1150  902F 11 00 03               ld de,back_colour_buffer-bg_buffer
1151  9032 19                     add hl,de
1152  9033 7E                     ld a,(hl)
1153  9034 E1                     pop hl
1154  9035
1155  9035                        ; is it solid, if so, ok
1156  9035 E6 80                  and 128
1157  9037 C0                     ret nz
1158  9038
1159  9038              ami01
1160  9038                        ; no space, so check further along
1161  9038
1162  9038                        ; check 2 spaces along
1163  9038 23                     inc hl
1164  9039 23                     inc hl
1165  903A
1166  903A 7E                     ld a,(hl)
1167  903B E6 80                  and 128
1168  903D 20 0A                  jr nz,ami02
1169  903F
1170  903F                        ; need to put check in for background types by checking the flash attribute
1171  903F E5                     push hl
1172  9040 11 00 03               ld de,back_colour_buffer-bg_buffer
1173  9043 19                     add hl,de
1174  9044 7E                     ld a,(hl)
1175  9045 E1                     pop hl
1176  9046
1177  9046                        ; is it solid, if so, ok
1178  9046 E6 80                  and 128
1179  9048 C0                     ret nz
1180  9049
1181  9049              ami02:
1182  9049                        ;check 3 spaces along
1183  9049 23                     inc hl
1184  904A
1185  904A 7E                     ld a,(hl)
1186  904B E6 80                  and 128
1187  904D 20 0A                  jr nz,ami03
1188  904F
1189  904F                        ; need to put check in for background types by checking the flash attribute
1190  904F E5                     push hl
1191  9050 11 00 03               ld de,back_colour_buffer-bg_buffer
1192  9053 19                     add hl,de
1193  9054 7E                     ld a,(hl)
1194  9055 E1                     pop hl
1195  9056
1196  9056                        ; is it solid, if so, ok
1197  9056 E6 80                  and 128
1198  9058 C0                     ret nz
1199  9059              ami03:
1200  9059                        ; set e to "yes"
1201  9059 1E 01                  ld e,1
1202  905B
1203  905B
1204  905B C9                     ret
1205  905C
1206  905C              ; ****************************************************************************
1207  905C
1208  905C              ; draw_sprite
1209  905C              ; ===========
1210  905C
1211  905C              ; a sprite is defined in characters (e.g. 1,2,3,4) which are pos to the
1212  905C              ; graphics character for a sprite.
1213  905C
1214  905C              ; draw_sprite does not render anything to the screen, it simply writes to the
1215  905C              ; correct cells in the sprite's buffer with the defined values, and tells the
1216  905C              ; update_buffer which cells to re-render
1217  905C
1218  905C              ; before calling the functions, a couple of memory variables need to be set
1219  905C
1220  905C              ; spr_addr = the sprite chars to draw
1221  905C              ; spr_buffer_addr = the sprite buffer to write to
1222  905C
1223  905C              ; do this by writing to memory directly.
1224  905C
1225  905C              ; e.g. ld hl,sprite1
1226  905C              ;      ld (spr_addr+1),hl
1227  905C
1228  905C              ; ****************************************************************************
1229  905C              draw_sprite:
1230  905C                          ; reset carry
1231  905C AF                       xor a
1232  905D
1233  905D DD 7E 02                 ld a,(ix+2)
1234  9060 32 71 95                 ld (ypostemp),a
1235  9063 DD 7E 01                 ld a,(ix+1)
1236  9066 32 70 95                 ld (xpostemp),a
1237  9069
1238  9069                          ; replaced before calling function
1239  9069              spr_addr:
1240  9069 3E 01                     ld a,1
1241  906B 32 97 90                  ld (ds_char+1),a
1242  906E
1243  906E                          ;  we build up sprite in columns
1244  906E 3E 04                    ld a,4
1245  9070 47                       ld b,a
1246  9071
1247  9071                          ;  x columns accross
1248  9071              ds_1
1249  9071 C5                       push bc
1250  9072
1251  9072                          ; rows
1252  9072 DD 7E 06                 ld a,(ix+6)
1253  9075 47                       ld b,a
1254  9076
1255  9076              ds_2
1256  9076 C5                       push bc
1257  9077
1258  9077                          ; for the y position, get the offset (y*32) for the number of rows
1259  9077 21 00 BB                 ld hl,row_number_lookup
1260  907A 3A 71 95                 ld a,(ypostemp)
1261  907D CB 17                    rl a
1262  907F 85                       add a,l
1263  9080 6F                       ld l,a
1264  9081 5E                       ld e,(hl)
1265  9082 2C                       inc l
1266  9083 56                       ld d,(hl)
1267  9084
1268  9084                          ; de has row address, so add xpos
1269  9084 3A 70 95                 ld a,(xpostemp)
1270  9087 83                       add a,e
1271  9088 5F                       ld e,a
1272  9089
1273  9089                          ; de now has the offset for the cell
1274  9089
1275  9089                          ; tell the update buffer that this cell needs updating
1276  9089 21 00 C8                 ld hl,update_buffer
1277  908C 19                       add hl,de
1278  908D
1279  908D 36 01                    ld (hl),1
1280  908F
1281  908F              ;            ld a,(ix+19)
1282  908F              ;            ld hl,sprite_colour_buffer
1283  908F              ;            add hl,de
1284  908F              ;            ld (hl),a
1285  908F
1286  908F                          ; we need to write the correct mask char into the sprite buffer
1287  908F                           ; replaced before calling function
1288  908F              spr_buffer_addr
1289  908F DD 6E 0C                 ld l,(ix+12)
1290  9092 DD 66 0D                 ld h,(ix+13)
1291  9095                                  ; e.g. sprite_buffer_1
1292  9095 19                       add hl,de
1293  9096
1294  9096                          ; hl has the correct char address in sprite buffer
1295  9096              ds_4
1296  9096
1297  9096                          ; write the char to the sprite's buffer
1298  9096              ds_char:
1299  9096
1300  9096 3E 00                    ld a,0
1301  9098 DD 86 12                 add a,(ix+18)
1302  909B DD 86 09                 add a,(ix+9)
1303  909E 77                       ld (hl),a
1304  909F
1305  909F 3A 97 90                 ld a,(ds_char+1)
1306  90A2 3C                       inc a
1307  90A3 32 97 90                 ld (ds_char+1),a
1308  90A6              ds_5
1309  90A6                          ; get next char (e.g. bottom left)
1310  90A6 13                       inc de
1311  90A7
1312  90A7                          ; get loop for rows back
1313  90A7 C1                       pop bc
1314  90A8
1315  90A8                          ; increase the row
1316  90A8 3A 71 95                 ld a,(ypostemp)
1317  90AB 3C                       inc a
1318  90AC 32 71 95                 ld (ypostemp),a
1319  90AF
1320  90AF                          ; loop to next row
1321  90AF 10 C5                    djnz ds_2
1322  90B1
1323  90B1                          ;    next column, so reset ypos
1324  90B1 DD 7E 02                 ld a,(ix+2)
1325  90B4 32 71 95                 ld (ypostemp),a
1326  90B7
1327  90B7
1328  90B7                          ; increase xpos
1329  90B7
1330  90B7 3A 70 95                 ld a,(xpostemp)
1331  90BA 3C                       inc a
1332  90BB E6 1F                    and 31
1333  90BD 32 70 95                 ld (xpostemp),a
1334  90C0
1335  90C0 C1                       pop bc
1336  90C1
1337  90C1                          ;   loop for all columns
1338  90C1 10 AE                    djnz ds_1
1339  90C3
1340  90C3                          ; the sprite buffer now contains the correct chars to render
1341  90C3                          ; and the update buffer has flagged the relevant cells to re-render
1342  90C3
1343  90C3 C9                       ret
1344  90C4
1345  90C4
1346  90C4              ; ****************************************************************************
1347  90C4
1348  90C4              ; blit_update_buffer
1349  90C4              ; ==================
1350  90C4
1351  90C4              ; check each cell in the update buffer.  if set to "1" then draw the background
1352  90C4              ; char and all sprite chars for that char to the screen
1353  90C4
1354  90C4              ; background is written directly, sprite chars are masked
1355  90C4
1356  90C4
1357  90C4
1358  90C4              blit_update_buffer:
1359  90C4
1360  90C4                        ; 768 chars to check (16 * 32)
1361  90C4
1362  90C4 21 FF CA               ld hl,update_buffer+767
1363  90C7 01 00 03               ld bc,768
1364  90CA              bb1:
1365  90CA                        ; if zero, no update need to skip to next char
1366  90CA 7E                     ld a,(hl)
1367  90CB E6 FF                  and 255
1368  90CD CA 60 91               jp z,bb2
1369  90D0
1370  90D0                        ; if "1" then we need to draw
1371  90D0              bb3:
1372  90D0
1373  90D0
1374  90D0
1375  90D0 E5                     push hl       ; position in update buffer
1376  90D1 C5                     push bc       ; counter
1377  90D2
1378  90D2 0B                     dec bc        ; decrease the counter
1379  90D3
1380  90D3
1381  90D3 C5                     push bc       ; store again
1382  90D4 E5                     push hl       ; store update postiton again
1383  90D5
1384  90D5
1385  90D5                        ; background char
1386  90D5                        ; ---------------
1387  90D5
1388  90D5                        ; first we get the memory difference between the background
1389  90D5                        ; buffer and the update buffer - 1
1390  90D5
1391  90D5 11 00 03               ld de,bg_buffer-update_buffer
1392  90D8
1393  90D8
1394  90D8 19                     add hl,de          ; hl now points to the correct char in the background buffer
1395  90D9
1396  90D9 7E                     ld a,(hl)          ; get background char
1397  90DA 08                     ex af,af'          ; store away.  we will check later to see if background is drawn in front
1398  90DB
1399  90DB                        ; mask off foreground/background indicator
1400  90DB 7E                     ld a,(hl)
1401  90DC E6 7F                  and 127
1402  90DE
1403  90DE
1404  90DE                        ; multiply by 8 to get start address (up to 127 background chars)
1405  90DE 5F                     ld e,a
1406  90DF 16 00                  ld d,0
1407  90E1
1408  90E1 CB 13                  rl e
1409  90E3 CB 12                  rl d
1410  90E5 CB 13                  rl e
1411  90E7 CB 12                  rl d
1412  90E9 CB 13                  rl e
1413  90EB CB 12                  rl d
1414  90ED
1415  90ED 21 00 C2               ld hl,bg_chars
1416  90F0 19                     add hl,de          ; hl now points to the correct graphic
1417  90F1                                           ; for the background character
1418  90F1
1419  90F1              ;          ld de,(screen_address)
1420  90F1 11 00 DA               ld de,scratch
1421  90F4
1422  90F4                        ;    de now = graphics address
1423  90F4                        ;    hl now = screen address
1424  90F4
1425  90F4
1426  90F4 EB                     ex de,hl
1427  90F5                        ; draw the background character
1428  90F5 CD AF 91               call draw_char
1429  90F8
1430  90F8 E1                     pop hl        ; hl now = position in update buffer
1431  90F9 C1                     pop bc        ; bc = counter
1432  90FA
1433  90FA
1434  90FA 08                     ex af,af'     ; if char is in the foreground skip drawing
1435  90FB E6 80                  and 128       ; sprites to give the appearence of foreground
1436  90FD 20 5F                  jr nz,bb6
1437  90FF
1438  90FF
1439  90FF                        ; sprites char
1440  90FF                        ; ---------------
1441  90FF
1442  90FF                        ;  draw the sprite characters for this cell through 1-8
1443  90FF                        ;  each is 768 bytes apart
1444  90FF
1445  90FF                        ; de = first buffer (there are 8)
1446  90FF 11 00 09               ld de,sprite_buffer_1-update_buffer
1447  9102
1448  9102 DD 21 00 C0            ld ix,sprites
1449  9106
1450  9106 3A F6 88               ld a,(totalsprites)
1451  9109              cells_a
1452  9109 08                     ex af,af'      ; store away as a loop counter
1453  910A
1454  910A 19                     add hl,de      ; hl now = char in sprite buffer
1455  910B
1456  910B E5                     push hl
1457  910C
1458  910C 7E                     ld a,(hl)      ; if no char, ignore and move to
1459  910D                                       ; next sprite
1460  910D E6 FF                  and 255
1461  910F 28 23                  jr z,cells_b
1462  9111
1463  9111 3D                     dec a
1464  9112 5F                     ld e,a         ; calculate start of graphic
1465  9113 16 00                  ld d,0
1466  9115
1467  9115                        ; * 16 per masked char
1468  9115 CB 13                  rl e
1469  9117 CB 12                  rl d
1470  9119 CB 13                  rl e
1471  911B CB 12                  rl d
1472  911D CB 13                  rl e
1473  911F CB 12                  rl d
1474  9121 CB 13                  rl e
1475  9123 CB 12                  rl d
1476  9125
1477  9125                        ; get the image bank for this sprite
1478  9125 DD 66 0E               ld h,(ix+14)
1479  9128 2E 00                  ld l,0
1480  912A
1481  912A 19                     add hl,de
1482  912B
1483  912B                        ;  hl has graphics address
1484  912B
1485  912B                        ;  get the screen address for this character square
1486  912B
1487  912B                        ;    bc is 1-768, we want 0-767
1488  912B
1489  912B 11 00 DA               ld de,scratch
1490  912E
1491  912E
1492  912E EB                     ex de,hl
1493  912F
1494  912F C5                     push bc
1495  9130 CD 68 91               call draw_char_masked
1496  9133 C1                     pop bc
1497  9134
1498  9134
1499  9134              cells_b
1500  9134 E1                     pop hl
1501  9135
1502  9135 11 14 00               ld de,sprite_size
1503  9138 DD 19                  add ix,de
1504  913A
1505  913A 11 00 03               ld de,768
1506  913D
1507  913D
1508  913D 08                     ex af,af'
1509  913E 3D                     dec a
1510  913F 20 C8                  jr nz,cells_a
1511  9141
1512  9141 21 00 DA               ld hl,scratch
1513  9144
1514  9144                        ; get cell screen address
1515  9144                        ; looks at lookup table (scr_lookup) and returns the screen address of the cell
1516  9144
1517  9144 E5                     push hl
1518  9145 21 80 B5               ld hl,scr_lookup+(yscreenoffset*64)
1519  9148 09                     add hl,bc
1520  9149 09                     add hl,bc
1521  914A
1522  914A 5E                     ld e,(hl)
1523  914B 2C                     inc l
1524  914C 56                     ld d,(hl)
1525  914D E1                     pop hl
1526  914E
1527  914E
1528  914E EB                     ex de,hl
1529  914F
1530  914F
1531  914F CD CE 91               call blit_char
1532  9152
1533  9152
1534  9152                        ;  a now contains the background colour
1535  9152
1536  9152 21 00 CE               ld hl,back_colour_buffer
1537  9155 09                     add hl,bc
1538  9156
1539  9156 7E                     ld a,(hl)                    ; or the main colour
1540  9157 E6 7F                  and 127 ; remove flash
1541  9159
1542  9159 21 40 58               ld hl,attributes
1543  915C 09                     add hl,bc
1544  915D 77                     ld (hl),a
1545  915E
1546  915E              bb6:
1547  915E C1                     pop bc
1548  915F E1                     pop hl
1549  9160
1550  9160              bb2:
1551  9160 2B                     dec hl
1552  9161 0B                     dec bc
1553  9162
1554  9162 78                     ld a,b
1555  9163 B1                     or c
1556  9164 C2 CA 90               jp nz,bb1
1557  9167
1558  9167 C9                     ret
1559  9168
1560  9168
1561  9168              ; ****************************************************************************
1562  9168
1563  9168              ; draw_char_masked
1564  9168              ; ================
1565  9168
1566  9168              ; draw 8 rows (1 char) to the screen by masking first.
1567  9168
1568  9168              ; for each line:
1569  9168
1570  9168              ; read the mask
1571  9168              ; and this with the contents of the screen
1572  9168              ; read the graphic byte
1573  9168              ; or this with the contents of the screen
1574  9168
1575  9168              ; as we are writing to scratch memory, no need to use "inc h" for next
1576  9168              ; 256 char line
1577  9168
1578  9168              ; ****************************************************************************
1579  9168              draw_char_masked:
1580  9168
1581  9168 1A                     ld a,(de)
1582  9169 A6                     and (hl)
1583  916A 77                     ld (hl),a
1584  916B 1C                     inc e
1585  916C 1A                     ld a,(de)
1586  916D B6                     or (hl)
1587  916E 77                     ld (hl),a
1588  916F 1C                     inc e
1589  9170 2C                     inc l
1590  9171 1A                     ld a,(de)
1591  9172 A6                     and (hl)
1592  9173 77                     ld (hl),a
1593  9174 1C                     inc e
1594  9175 1A                     ld a,(de)
1595  9176 B6                     or (hl)
1596  9177 77                     ld (hl),a
1597  9178 1C                     inc e
1598  9179 2C                     inc l
1599  917A 1A                     ld a,(de)
1600  917B A6                     and (hl)
1601  917C 77                     ld (hl),a
1602  917D 1C                     inc e
1603  917E 1A                     ld a,(de)
1604  917F B6                     or (hl)
1605  9180 77                     ld (hl),a
1606  9181 1C                     inc e
1607  9182 2C                     inc l
1608  9183 1A                     ld a,(de)
1609  9184 A6                     and (hl)
1610  9185 77                     ld (hl),a
1611  9186 1C                     inc e
1612  9187 1A                     ld a,(de)
1613  9188 B6                     or (hl)
1614  9189 77                     ld (hl),a
1615  918A 1C                     inc e
1616  918B 2C                     inc l
1617  918C 1A                     ld a,(de)
1618  918D A6                     and (hl)
1619  918E 77                     ld (hl),a
1620  918F 1C                     inc e
1621  9190 1A                     ld a,(de)
1622  9191 B6                     or (hl)
1623  9192 77                     ld (hl),a
1624  9193 1C                     inc e
1625  9194 2C                     inc l
1626  9195 1A                     ld a,(de)
1627  9196 A6                     and (hl)
1628  9197 77                     ld (hl),a
1629  9198 1C                     inc e
1630  9199 1A                     ld a,(de)
1631  919A B6                     or (hl)
1632  919B 77                     ld (hl),a
1633  919C 1C                     inc e
1634  919D 2C                     inc l
1635  919E 1A                     ld a,(de)
1636  919F A6                     and (hl)
1637  91A0 77                     ld (hl),a
1638  91A1 1C                     inc e
1639  91A2 1A                     ld a,(de)
1640  91A3 B6                     or (hl)
1641  91A4 77                     ld (hl),a
1642  91A5 1C                     inc e
1643  91A6 2C                     inc l
1644  91A7 1A                     ld a,(de)
1645  91A8 A6                     and (hl)
1646  91A9 77                     ld (hl),a
1647  91AA 1C                     inc e
1648  91AB 1A                     ld a,(de)
1649  91AC B6                     or (hl)
1650  91AD 77                     ld (hl),a
1651  91AE
1652  91AE C9                     ret
1653  91AF
1654  91AF              ; as we are writing to scratch memory, no need to use "inc h" for next
1655  91AF              ; 256 char line
1656  91AF              draw_char:
1657  91AF
1658  91AF 1A                     ld a,(de)
1659  91B0 77                     ld (hl),a
1660  91B1 2C                     inc l
1661  91B2 1C                     inc e
1662  91B3 1A                     ld a,(de)
1663  91B4 77                     ld (hl),a
1664  91B5 2C                     inc l
1665  91B6 1C                     inc e
1666  91B7 1A                     ld a,(de)
1667  91B8 77                     ld (hl),a
1668  91B9 2C                     inc l
1669  91BA 1C                     inc e
1670  91BB 1A                     ld a,(de)
1671  91BC 77                     ld (hl),a
1672  91BD 2C                     inc l
1673  91BE 1C                     inc e
1674  91BF 1A                     ld a,(de)
1675  91C0 77                     ld (hl),a
1676  91C1 2C                     inc l
1677  91C2 1C                     inc e
1678  91C3 1A                     ld a,(de)
1679  91C4 77                     ld (hl),a
1680  91C5 2C                     inc l
1681  91C6 1C                     inc e
1682  91C7 1A                     ld a,(de)
1683  91C8 77                     ld (hl),a
1684  91C9 2C                     inc l
1685  91CA 1C                     inc e
1686  91CB 1A                     ld a,(de)
1687  91CC 77                     ld (hl),a
1688  91CD
1689  91CD C9                     ret
1690  91CE              ; write to screen
1691  91CE              blit_char
1692  91CE
1693  91CE 1A                    ld a,(de)
1694  91CF 77                    ld (hl),a
1695  91D0 1C                    inc e
1696  91D1 24                    inc h
1697  91D2 1A                    ld a,(de)
1698  91D3 77                    ld (hl),a
1699  91D4 1C                    inc e
1700  91D5 24                    inc h
1701  91D6 1A                    ld a,(de)
1702  91D7 77                    ld (hl),a
1703  91D8 1C                    inc e
1704  91D9 24                    inc h
1705  91DA 1A                    ld a,(de)
1706  91DB 77                    ld (hl),a
1707  91DC 1C                    inc e
1708  91DD 24                    inc h
1709  91DE 1A                    ld a,(de)
1710  91DF 77                    ld (hl),a
1711  91E0 1C                    inc e
1712  91E1 24                    inc h
1713  91E2 1A                    ld a,(de)
1714  91E3 77                    ld (hl),a
1715  91E4 1C                    inc e
1716  91E5 24                    inc h
1717  91E6 1A                    ld a,(de)
1718  91E7 77                    ld (hl),a
1719  91E8 1C                    inc e
1720  91E9 24                    inc h
1721  91EA 1A                    ld a,(de)
1722  91EB 77                    ld (hl),a
1723  91EC
1724  91EC C9                    ret
1725  91ED
1726  91ED              clear_update_buffer
1727  91ED
1728  91ED 21 00 C8               ld hl,update_buffer
1729  91F0 11 01 C8               ld de,update_buffer+1
1730  91F3 36 00                  ld (hl),0
1731  91F5 01 FF 02               ld bc,767
1732  91F8 ED B0                  ldir
1733  91FA
1734  91FA C9                     ret
1735  91FB
1736  91FB
1737  91FB              ; ****************************************************************************
1738  91FB
1739  91FB              ; draw_background
1740  91FB              ; ===============
1741  91FB
1742  91FB              ; called when first drawing the screen on a new level.  goes through each
1743  91FB              ; background cell and draws it to the screen
1744  91FB
1745  91FB              ; ****************************************************************************
1746  91FB              draw_background
1747  91FB
1748  91FB                        ; the last byte in bg_buffer
1749  91FB 21 7F CD               ld hl,bg_buffer+767-128
1750  91FE
1751  91FE                        ; but 768 bytes to process
1752  91FE 01 80 02               ld bc,768-128
1753  9201
1754  9201              dbft_1
1755  9201
1756  9201 C5                     push bc
1757  9202 E5                     push hl
1758  9203                        ; mask off foreground/background indicator
1759  9203 7E                     ld a,(hl)
1760  9204 E6 7F                  and 127
1761  9206
1762  9206 5F                     ld e,a
1763  9207 16 00                  ld d,0
1764  9209
1765  9209                        ; multiply by 8 to get start address (up to 127 background chars)
1766  9209 CB 13                  rl e
1767  920B CB 12                  rl d
1768  920D CB 13                  rl e
1769  920F CB 12                  rl d
1770  9211 CB 13                  rl e
1771  9213 CB 12                  rl d
1772  9215
1773  9215 21 00 C2               ld hl,bg_chars
1774  9218 19                     add hl,de
1775  9219
1776  9219 E5                     push hl
1777  921A
1778  921A                        ;    bc is 1-768, we want 0-767
1779  921A 0B                     dec bc
1780  921B 21 80 B5               ld hl,scr_lookup+(yscreenoffset*64)
1781  921E 09                     add hl,bc
1782  921F 09                     add hl,bc
1783  9220
1784  9220 5E                     ld e,(hl)
1785  9221 2C                     inc l
1786  9222 56                     ld d,(hl)
1787  9223
1788  9223 E1                     pop hl
1789  9224
1790  9224 EB                     ex de,hl
1791  9225
1792  9225                        ; a has char
1793  9225                        ; hl has screen address
1794  9225                        ; de has graphic address
1795  9225
1796  9225 CD CE 91               call blit_char
1797  9228
1798  9228                        ; get attribute from background and copy to foreground
1799  9228
1800  9228 21 00 CE               ld hl,back_colour_buffer
1801  922B 09                     add hl,bc
1802  922C E6 7F                  and 127                 ; remove flash
1803  922E 7E                     ld a,(hl)
1804  922F
1805  922F 21 40 58               ld hl,attributes
1806  9232 09                     add hl,bc
1807  9233 E6 7F                  and 127
1808  9235 77                     ld (hl),a
1809  9236
1810  9236 E1                     pop hl
1811  9237
1812  9237 2B                     dec hl
1813  9238
1814  9238 C1                     pop bc
1815  9239
1816  9239
1817  9239 0B                     dec bc
1818  923A 79                     ld a,c
1819  923B B0                     or b
1820  923C
1821  923C
1822  923C 20 C3                  jr nz,dbft_1
1823  923E
1824  923E
1825  923E C9                     ret
1826  923F
1827  923F              ; ****************************************************************************
1828  923F
1829  923F              ; remove_sprite
1830  923F              ; ==============
1831  923F
1832  923F              ; similar to draw_sprite except rather than writing the chars for the sprite
1833  923F              ; to the sprite's buffer, a zero is written instead.  update_buffer is
1834  923F              ; updated to say that the char needs to be redrawn
1835  923F
1836  923F              ; before calling the functions,a memory variable needa to be set
1837  923F
1838  923F              ; rs_spr_buffer_addr = the sprite buffer to write to
1839  923F
1840  923F              ; do this by writing to memory directly.
1841  923F
1842  923F              ; e.g. ld hl,sprite_buffer_7
1843  923F              ;      ld (rs_spr_buffer_addr+1),hl
1844  923F
1845  923F              ; ****************************************************************************
1846  923F              remove_sprite:
1847  923F
1848  923F DD 7E 02                 ld a,(ix+2)
1849  9242 32 71 95                 ld (ypostemp),a
1850  9245 DD 7E 01                 ld a,(ix+1)
1851  9248 32 70 95                 ld (xpostemp),a
1852  924B
1853  924B
1854  924B                          ;  we build up sprite in columns
1855  924B 3E 04                    ld a,4
1856  924D 47                       ld b,a
1857  924E
1858  924E                          ;  x columns accross
1859  924E              rs_1
1860  924E C5                       push bc
1861  924F
1862  924F                          ; rows
1863  924F DD 7E 06                 ld a,(ix+6)
1864  9252 47                       ld b,a
1865  9253
1866  9253              rs_2
1867  9253 C5                       push bc
1868  9254
1869  9254
1870  9254                          ; for the y position, get the offset (y*32) for the number of rows
1871  9254 21 00 BB                 ld hl,row_number_lookup
1872  9257 3A 71 95                 ld a,(ypostemp)
1873  925A CB 17                    rl a
1874  925C 85                       add a,l
1875  925D 6F                       ld l,a
1876  925E 5E                       ld e,(hl)
1877  925F 2C                       inc l
1878  9260 56                       ld d,(hl)
1879  9261
1880  9261                          ; de has row address, so add xpos
1881  9261 3A 70 95                 ld a,(xpostemp)
1882  9264 83                       add a,e
1883  9265 5F                       ld e,a
1884  9266
1885  9266                          ; de now has the offset for the cell
1886  9266
1887  9266                          ; tell the update buffer that this cell needs updating
1888  9266 21 00 C8                 ld hl,update_buffer
1889  9269 19                       add hl,de
1890  926A
1891  926A 36 01                    ld (hl),1
1892  926C
1893  926C 21 00 CE                 ld hl,back_colour_buffer
1894  926F 19                       add hl,de
1895  9270 E6 7F                    and 127 ; remove flash
1896  9272 7E                       ld a,(hl)
1897  9273
1898  9273              ;            ld hl,sprite_colour_buffer
1899  9273              ;            add hl,de
1900  9273              ;           ld (hl),a
1901  9273
1902  9273                          ; we need to write the correct mask char into the sprite buffer
1903  9273                           ; replaced before calling function
1904  9273
1905  9273 DD 6E 0C                 ld l,(ix+12)
1906  9276 DD 66 0D                 ld h,(ix+13)
1907  9279                                  ; e.g. sprite_buffer_1
1908  9279 19                       add hl,de
1909  927A
1910  927A                          ; hl has the correct char address in sprite buffer
1911  927A              rs_4
1912  927A
1913  927A 36 00                    ld (hl),0
1914  927C              rs_5
1915  927C
1916  927C                          ; get loop for rows back
1917  927C C1                       pop bc
1918  927D
1919  927D                          ; increase the row
1920  927D 3A 71 95                 ld a,(ypostemp)
1921  9280 3C                       inc a
1922  9281 32 71 95                 ld (ypostemp),a
1923  9284
1924  9284                          ; loop to next row
1925  9284 10 CD                    djnz rs_2
1926  9286
1927  9286                          ;    next column, so reset ypos
1928  9286 DD 7E 02                 ld a,(ix+2)
1929  9289 32 71 95                 ld (ypostemp),a
1930  928C
1931  928C                          ; increase xpos
1932  928C
1933  928C 3A 70 95                 ld a,(xpostemp)
1934  928F 3C                       inc a
1935  9290 32 70 95                 ld (xpostemp),a
1936  9293
1937  9293 C1                       pop bc
1938  9294
1939  9294                          ;   loop for all columns
1940  9294 10 B8                    djnz rs_1
1941  9296
1942  9296                          ; the sprite buffer now contains the correct chars to render
1943  9296                          ; and the update buffer has flagged the relevant cells to re-render
1944  9296
1945  9296 C9                     ret
1946  9297
1947  9297
1948  9297
1949  9297
1950  9297              draw_screen_compressed:
1951  9297 21 00 00                ld hl,0
1952  929A 22 F7 88                ld (dl_xpos),hl
1953  929D
1954  929D
1955  929D
1956  929D              dlc_1:
1957  929D 1A                      ld a,(de)
1958  929E FE FF                   cp 255
1959  92A0 C8                      ret z
1960  92A1
1961  92A1 1A                      ld a,(de)
1962  92A2 E6 0F                   and 15
1963  92A4 32 F9 88                ld (dl_block),a
1964  92A7
1965  92A7 1A                      ld a,(de)
1966  92A8 1F                      rra
1967  92A9 1F                      rra
1968  92AA 1F                      rra
1969  92AB 1F                      rra
1970  92AC E6 0F                   and 15
1971  92AE
1972  92AE                         ; repeater stored as 0-15 which means 1 to 16 repeats
1973  92AE 3C                      inc a
1974  92AF
1975  92AF
1976  92AF
1977  92AF 47                      ld b,a
1978  92B0              dlc_2:
1979  92B0 C5                      push bc
1980  92B1
1981  92B1 3A F9 88                ld a,(dl_block)
1982  92B4
1983  92B4 CD 34 93                call draw_block
1984  92B7
1985  92B7              dlc_3:
1986  92B7 3A F7 88                ld a,(dl_xpos)
1987  92BA 3C                      inc a
1988  92BB 3C                      inc a
1989  92BC 32 F7 88                ld (dl_xpos),a
1990  92BF E6 1F                   and 31
1991  92C1 20 0C                   jr nz,dlc_4
1992  92C3
1993  92C3 AF                      xor a
1994  92C4 32 F7 88                ld (dl_xpos),a
1995  92C7 3A F8 88                ld a,(dl_ypos)
1996  92CA 3C                      inc a
1997  92CB 3C                      inc a
1998  92CC 32 F8 88                ld (dl_ypos),a
1999  92CF
2000  92CF              dlc_4:
2001  92CF C1                      pop bc
2002  92D0 10 DE                   djnz dlc_2
2003  92D2
2004  92D2
2005  92D2 13                      inc de
2006  92D3
2007  92D3 18 C8                   jr dlc_1
2008  92D5
2009  92D5 C9                      ret
2010  92D6
2011  92D6              ; de contains screen data
2012  92D6              setup_screen
2013  92D6
2014  92D6 CD AB 8C                  call saveplayerstatus
2015  92D9
2016  92D9
2017  92D9                           ; save the last known position of the player so that we cn
2018  92D9                           ; put them back here if they lose a life
2019  92D9 3A 01 C0                  ld a,(sprites+1)
2020  92DC 32 03 89                  ld (player_xpos_onscreen),a
2021  92DF 3A 02 C0                  ld a,(sprites+2)
2022  92E2 32 04 89                  ld (player_ypos_onscreen),a
2023  92E5
2024  92E5                           ; get pointer to screen data
2025  92E5 CD 92 8C                  call getscreen
2026  92E8
2027  92E8                           ;  expand first sprite
2028  92E8 1A                        ld a,(de)
2029  92E9 6F                        ld l,a
2030  92EA 13                        inc de
2031  92EB 1A                        ld a,(de)
2032  92EC 67                        ld h,a
2033  92ED 22 FE 88                  ld (unexs),hl
2034  92F0 21 00 DB                  ld hl,sprite_expand_1
2035  92F3 22 00 89                  ld (unexd),hl
2036  92F6 13                        inc de
2037  92F7
2038  92F7 D5                        push de
2039  92F8 CD 03 96                  call expand
2040  92FB D1                        pop de
2041  92FC
2042  92FC                           ; expand 2nd sprite
2043  92FC 1A                        ld a,(de)
2044  92FD 6F                        ld l,a
2045  92FE 13                        inc de
2046  92FF 1A                        ld a,(de)
2047  9300 67                        ld h,a
2048  9301 22 FE 88                  ld (unexs),hl
2049  9304 21 00 E7                  ld hl,sprite_expand_2
2050  9307 22 00 89                  ld (unexd),hl
2051  930A 13                        inc de
2052  930B
2053  930B D5                        push de
2054  930C CD 03 96                  call expand
2055  930F
2056  930F                           ; clear all buffers
2057  930F 11 01 CB                  ld de,bg_buffer+1
2058  9312 21 00 CB                  ld hl,bg_buffer
2059  9315 36 00                     ld (hl),0
2060  9317 01 FB 0E                  ld bc,767*5 ; 2 Buffers and 3 sprites
2061  931A ED B0                     ldir
2062  931C
2063  931C                           ; clear back colour buffer
2064  931C                           ;ld de,back_colour_buffer+1
2065  931C                           ;ld hl,back_colour_buffer
2066  931C                           ;ld (hl),0 ; %01000101
2067  931C                           ;ld bc,767
2068  931C                           ;ldir
2069  931C
2070  931C                           ; draw screen to screen
2071  931C D1                        pop de
2072  931D CD 97 92                  call draw_screen_compressed
2073  9320
2074  9320                           ; uncompress sprite data for this screen
2075  9320 13                        inc de
2076  9321 1A                        ld a,(de)
2077  9322 E6 FF                     and 255
2078  9324 28 07                     jr z,screencont
2079  9326 DD 21 14 C0               ld ix,enemy_sprites
2080  932A CD A9 96                  call decompress_screen_sprites
2081  932D
2082  932D              screencont:
2083  932D CD FB 91                  call draw_background
2084  9330
2085  9330                           ; clear out the update buffer for the first time
2086  9330 CD ED 91                  call clear_update_buffer
2087  9333
2088  9333                           ;ld hl,attributes+640
2089  9333
2090  9333                           ;ld de,attributes+641
2091  9333                           ;ld (hl),paper_cyan+ink_black+attr_bright
2092  9333                           ;ld bc,31
2093  9333                           ;ldir
2094  9333
2095  9333                           ;ld de,level_name
2096  9333                           ;call draw_string_multiple
2097  9333
2098  9333
2099  9333 C9                        ret
2100  9334
2101  9334              ; ***************************
2102  9334              ; draw_block
2103  9334
2104  9334              ; draw a block to the screen (16 * 10)
2105  9334              ; ***************************
2106  9334
2107  9334              draw_block:
2108  9334                         ; find address of block (held in a)
2109  9334                         ; get the 4 chars and draw them to bg_buffer and colours
2110  9334
2111  9334 D5                      push de     ; current address in screen
2112  9335
2113  9335 21 00 C7                ld hl,blox  ; where the definitions for the blocks are stored
2114  9338
2115  9338                         ; get block number and multiply by 4
2116  9338 CB 17                   rl a
2117  933A CB 17                   rl a
2118  933C
2119  933C 6F                      ld l,a      ; hl = blox + (4*id)
2120  933D
2121  933D E5                      push hl     ; store blox address
2122  933E EB                      ex de,hl    ; de = blox address
2123  933F D5                      push de
2124  9340
2125  9340 AF                      xor a
2126  9341 21 00 BB                ld hl,row_number_lookup
2127  9344 3A F8 88                ld a,(dl_ypos)
2128  9347 CB 17                   rl a
2129  9349 85                      add a,l
2130  934A 6F                      ld l,a
2131  934B 5E                      ld e,(hl)
2132  934C 2C                      inc l
2133  934D 56                      ld d,(hl)
2134  934E
2135  934E                        ; de has row address, so add xpos
2136  934E 3A F7 88                ld a,(dl_xpos)
2137  9351 83                      add a,e
2138  9352 5F                      ld e,a
2139  9353
2140  9353                        ; de now has the correct offset
2141  9353
2142  9353 21 00 CB                ld hl,bg_buffer
2143  9356 19                      add hl,de
2144  9357
2145  9357 D1                      pop de   ; de = blox addresss
2146  9358
2147  9358 E5                      push hl  ; bg_buffer address
2148  9359 D5                      push de
2149  935A
2150  935A 01 20 00                ld bc,32
2151  935D
2152  935D 1A                      ld a,(de)   ;      block id
2153  935E 77                      ld (hl),a
2154  935F 13                      inc de
2155  9360 23                      inc hl
2156  9361 1A                      ld a,(de)   ;      block id
2157  9362 77                      ld (hl),a
2158  9363 2B                      dec hl
2159  9364 13                      inc de
2160  9365 09                      add hl,bc
2161  9366 1A                      ld a,(de)   ;      block id
2162  9367 77                      ld (hl),a
2163  9368 13                      inc de
2164  9369 23                      inc hl
2165  936A 1A                      ld a,(de)   ;      block id
2166  936B 77                      ld (hl),a
2167  936C
2168  936C D1                      pop de
2169  936D E1                      pop hl
2170  936E
2171  936E
2172  936E 01 00 03                ld bc,back_colour_buffer-bg_buffer
2173  9371 09                      add hl,bc
2174  9372
2175  9372
2176  9372                         ; hl now has colour
2177  9372
2178  9372 01 00 C6                ld bc,bg_chars_attrs
2179  9375
2180  9375 1A                      ld a,(de)
2181  9376 E6 7F                   and 127
2182  9378 4F                      ld c,a
2183  9379
2184  9379 0A                      ld a,(bc)
2185  937A 77                      ld (hl),a
2186  937B 23                      inc hl
2187  937C 03                      inc bc
2188  937D
2189  937D 0A                      ld a,(bc)
2190  937E 77                      ld (hl),a
2191  937F 2B                      dec hl
2192  9380 03                      inc bc
2193  9381
2194  9381 D5                      push de
2195  9382 11 20 00                ld de,32
2196  9385 19                      add hl,de
2197  9386 D1                      pop de
2198  9387
2199  9387 0A                      ld a,(bc)
2200  9388 77                      ld (hl),a
2201  9389 23                      inc hl
2202  938A 03                      inc bc
2203  938B
2204  938B 0A                      ld a,(bc)
2205  938C 77                      ld (hl),a
2206  938D
2207  938D E1                      pop hl
2208  938E D1                      pop de
2209  938F
2210  938F C9                      ret
2211  9390
2212  9390
2213  9390
2214  9390
2215  9390
2216  9390              ;           defw 04002h
2217  9390
2218  9390                          include "functions.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/functions.asm
   1+ 9390
   2+ 9390              key_b equ 0
   3+ 9390              key_h equ 1
   4+ 9390              key_y equ 2
   5+ 9390              key_6 equ 3
   6+ 9390              key_5 equ 4
   7+ 9390              key_t equ 5
   8+ 9390              key_g equ 6
   9+ 9390              key_v equ 7
  10+ 9390              key_n equ 8
  11+ 9390              key_j equ 9
  12+ 9390              key_u equ 10
  13+ 9390              key_7 equ 11
  14+ 9390              key_4 equ 12
  15+ 9390              key_r equ 13
  16+ 9390              key_f equ 14
  17+ 9390              key_c equ 15
  18+ 9390              key_m equ 16
  19+ 9390              key_k equ 17
  20+ 9390              key_i equ 18
  21+ 9390              key_8 equ 19
  22+ 9390              key_3 equ 20
  23+ 9390              key_e equ 21
  24+ 9390              key_d equ 22
  25+ 9390              key_x equ 23
  26+ 9390              key_symbol equ 24
  27+ 9390              key_l equ 25
  28+ 9390              key_o equ 26
  29+ 9390              key_9 equ 27
  30+ 9390              key_2 equ 28
  31+ 9390              key_w equ 29
  32+ 9390              key_s equ 30
  33+ 9390              key_z equ 31
  34+ 9390              key_space equ 32
  35+ 9390              key_enter equ 33
  36+ 9390              key_p equ 34
  37+ 9390              key_0 equ 35
  38+ 9390              key_1 equ 36
  39+ 9390              key_q equ 37
  40+ 9390              key_a equ 38
  41+ 9390              key_shift equ 39
  42+ 9390
  43+ 9390              ;   title:  1000.15 calculate_screen_address
  44+ 9390              ;   date:   24/11/2006
  45+ 9390              ;   author: r.l.pearmain
  46+ 9390
  47+ 9390              ;   description:
  48+ 9390              ;       calculate screen address into hl
  49+ 9390
  50+ 9390              ;   on entry:
  51+ 9390              ;      hl=string address
  52+ 9390              ;   on exit
  53+ 9390
  54+ 9390
  55+ 9390              calculate_screen_address
  56+ 9390
  57+ 9390              	; calculate display address
  58+ 9390
  59+ 9390 3A 71 95     	ld   a,(ypostemp)
  60+ 9393 6F           	ld   l,a
  61+ 9394 3A 70 95     	ld   a,(xpostemp)
  62+ 9397
  63+ 9397 26 B3        	ld   h,screentable/256
  64+ 9399
  65+ 9399 86           	add   a,(hl)
  66+ 939A
  67+ 939A 24           	inc  h
  68+ 939B 66           	ld   h,(hl)
  69+ 939C 6F           	ld   l,a
  70+ 939D
  71+ 939D C9           	ret
  72+ 939E
  73+ 939E
  74+ 939E              calculate_attribute_address
  75+ 939E
  76+ 939E
  77+ 939E              	; for the y position, get the offset (y*32) for the number of rows
  78+ 939E 21 00 BB     	ld hl,row_number_lookup
  79+ 93A1 3A 71 95     	ld a,(ypostemp)
  80+ 93A4 CB 17        	rl a
  81+ 93A6 85           	add a,l
  82+ 93A7 6F           	ld l,a
  83+ 93A8 5E           	ld e,(hl)
  84+ 93A9 2C           	inc l
  85+ 93AA 3E 58        	ld a,58h
  86+ 93AC 56           	ld d,(hl)
  87+ 93AD 82           	add a,d
  88+ 93AE 57           	ld d,a
  89+ 93AF
  90+ 93AF              	; de has row address, so add xpos
  91+ 93AF 3A 70 95     	ld a,(xpostemp)
  92+ 93B2 83           	add a,e
  93+ 93B3 5F           	ld e,a
  94+ 93B4
  95+ 93B4 EB           	ex de,hl
  96+ 93B5
  97+ 93B5 C9           	ret
  98+ 93B6
  99+ 93B6              ;   title:  1000.12 draw_string
 100+ 93B6              ;   date:   06/11/2006
 101+ 93B6              ;   author: r.l.pearmain
 102+ 93B6
 103+ 93B6              ;   on entry:
 104+ 93B6              ;      de=string address
 105+ 93B6              ;   on exit
 106+ 93B6
 107+ 93B6
 108+ 93B6              draw_string
 109+ 93B6
 110+ 93B6
 111+ 93B6 3A 70 95     	ld a,(xpostemp)
 112+ 93B9 6F           	ld l,a
 113+ 93BA 3A 71 95     	ld a,(ypostemp)
 114+ 93BD 67           	ld h,a
 115+ 93BE E5           	push hl
 116+ 93BF
 117+ 93BF              	; read xpos from string
 118+ 93BF 1A           	ld a,(de)
 119+ 93C0 32 70 95     	ld (xpostemp),a
 120+ 93C3 13           	inc de
 121+ 93C4
 122+ 93C4              	; read ypos from string
 123+ 93C4
 124+ 93C4 1A           	ld a,(de)
 125+ 93C5 32 71 95     	ld (ypostemp),a
 126+ 93C8 13           	inc de
 127+ 93C9
 128+ 93C9              	; read colour from  string
 129+ 93C9
 130+ 93C9 1A           	ld a,(de)
 131+ 93CA 32 72 95     	ld (color),a
 132+ 93CD 13           	inc de
 133+ 93CE
 134+ 93CE CD DB 93     	call draw_string_chars
 135+ 93D1
 136+ 93D1 E1           	pop hl
 137+ 93D2 7D           	ld a,l
 138+ 93D3 32 70 95     	ld (xpostemp),a
 139+ 93D6 7C           	ld a,h
 140+ 93D7 32 71 95     	ld (ypostemp),a
 141+ 93DA
 142+ 93DA C9           	ret
 143+ 93DB
 144+ 93DB
 145+ 93DB              ;   title:  1000.13 draw_string_chars
 146+ 93DB              ;   date:   06/11/2006
 147+ 93DB              ;   author: r.l.pearmain
 148+ 93DB
 149+ 93DB              ;   on entry:
 150+ 93DB              ;      de=string address
 151+ 93DB              ;   on exit
 152+ 93DB
 153+ 93DB              draw_string_chars
 154+ 93DB
 155+ 93DB              	; read char
 156+ 93DB 1A           	ld a,(de)
 157+ 93DC E6 7F        	and 127
 158+ 93DE
 159+ 93DE              	; calculate char gfx address
 160+ 93DE
 161+ 93DE D5           	push de
 162+ 93DF
 163+ 93DF 21 FE 89     	ld hl,font
 164+ 93E2
 165+ 93E2 D6 20        	sub 32              ; example a=65 'a'-32 = 33
 166+ 93E4 5F           	ld e,a              ; so de = 33
 167+ 93E5 16 00        	ld d,0
 168+ 93E7
 169+ 93E7              	;	* by 8
 170+ 93E7 CB 13        	rl e                ; 33 * 8 = 264
 171+ 93E9 CB 12        	rl d
 172+ 93EB CB 13        	rl e
 173+ 93ED CB 12        	rl d
 174+ 93EF CB 13        	rl e
 175+ 93F1 CB 12        	rl d
 176+ 93F3
 177+ 93F3 19           	add hl,de          ; hl = font + 264
 178+ 93F4 EB           	ex de,hl           ; de now has the gfx address of the char
 179+ 93F5
 180+ 93F5              	; call 1000.8 draw_char
 181+ 93F5
 182+ 93F5 CD 90 93     	call calculate_screen_address
 183+ 93F8 CD 15 94     	call draw_char_to_screen
 184+ 93FB
 185+ 93FB CD 9E 93     	call calculate_attribute_address
 186+ 93FE 3A 72 95     	ld a,(color)
 187+ 9401 77           	ld (hl),a
 188+ 9402
 189+ 9402              	; increase xpos
 190+ 9402
 191+ 9402 3A 70 95     	ld a,(xpostemp)
 192+ 9405 3C           	inc a
 193+ 9406 E6 1F        	and 31
 194+ 9408 32 70 95     	ld (xpostemp),a
 195+ 940B
 196+ 940B D1           	pop de
 197+ 940C
 198+ 940C AF           	xor a
 199+ 940D 1A           	ld a,(de)
 200+ 940E E6 80        	and 128
 201+ 9410 C0           	ret nz
 202+ 9411
 203+ 9411 13           	inc de             ; next char
 204+ 9412
 205+ 9412 C3 DB 93     	jp draw_string_chars
 206+ 9415
 207+ 9415              draw_char_to_screen:
 208+ 9415
 209+ 9415 06 08        				ld b,8
 210+ 9417              dcts1:
 211+ 9417 1A           				ld a,(de)
 212+ 9418 77           				ld (hl),a
 213+ 9419 13           				inc de
 214+ 941A 24           				inc h
 215+ 941B 10 FA        				djnz dcts1
 216+ 941D
 217+ 941D
 218+ 941D C9           				ret
 219+ 941E
 220+ 941E              draw_blank_char_to_screen:
 221+ 941E
 222+ 941E AF           				xor a
 223+ 941F 06 08        				ld b,8
 224+ 9421              dbcts1:
 225+ 9421
 226+ 9421 77           				ld (hl),a
 227+ 9422 13           				inc de
 228+ 9423 24           				inc h
 229+ 9424 10 FB        				djnz dbcts1
 230+ 9426
 231+ 9426
 232+ 9426 C9           				ret
 233+ 9427
 234+ 9427              ;   title:  1000.14 draw_string_multiple
 235+ 9427              ;   date:   07/11/2006
 236+ 9427              ;   author: r.l.pearmain
 237+ 9427
 238+ 9427              ;   description:
 239+ 9427              ;       print multiple strings
 240+ 9427              ;       finally terminated with 128
 241+ 9427
 242+ 9427              ;   on entry:
 243+ 9427              ;      de=string address
 244+ 9427              ;   on exit
 245+ 9427
 246+ 9427              draw_string_multiple
 247+ 9427
 248+ 9427 CD B6 93     	call draw_string
 249+ 942A
 250+ 942A              	; read next char
 251+ 942A 13           	inc de
 252+ 942B 1A           	ld a,(de)
 253+ 942C
 254+ 942C              	; is it a terminator
 255+ 942C E6 80        	and 128
 256+ 942E
 257+ 942E              	; yes, then end
 258+ 942E C0           	ret nz
 259+ 942F
 260+ 942F              	; else draw next string
 261+ 942F C3 27 94     	jp draw_string_multiple
 262+ 9432
 263+ 9432              ;   title:  2000.1 key_wait
 264+ 9432              ;   date:   28/10/2006
 265+ 9432              ;   author: r.l.pearmain / david webb
 266+ 9432              ;   description:
 267+ 9432
 268+ 9432              ;       wait until any key is pressed
 269+ 9432
 270+ 9432              ;   on entry:
 271+ 9432
 272+ 9432
 273+ 9432
 274+ 9432              key_wait
 275+ 9432
 276+ 9432 AF           	xor a
 277+ 9433
 278+ 9433              	; read the entire keyboard
 279+ 9433 DB FE        	in a,(0feh)
 280+ 9435 2F           	cpl
 281+ 9436 E6 1F        	and 1fh
 282+ 9438
 283+ 9438              	; if key not pressed then check
 284+ 9438
 285+ 9438 28 F8        	jr z, key_wait
 286+ 943A
 287+ 943A C9           	ret
 288+ 943B
 289+ 943B              ;   title:  2000.2 key_wait
 290+ 943B              ;   date:   28/10/2006
 291+ 943B              ;   author: r.l.pearmain / david webb
 292+ 943B              ;   description:
 293+ 943B
 294+ 943B              ;       test all keys and find the one that is pressed
 295+ 943B
 296+ 943B              ;   on entry:
 297+ 943B
 298+ 943B              ;   on exit:
 299+ 943B
 300+ 943B              ;      if key pressed d = key code (see key code reference)
 301+ 943B              ;      if no key pressed d = 0ffh
 302+ 943B              ;      if more than one key is pressed, zero flag reset
 303+ 943B
 304+ 943B              key_find
 305+ 943B
 306+ 943B 11 2F FF     	ld de,0ff2fh    ; d=0ffh (no key pressed), e=02fh (initial key value)
 307+ 943E 01 FE FE     	ld bc,0fefeh    ; bc=port address for each half row
 308+ 9441
 309+ 9441              k_f_1
 310+ 9441              	; read a half row
 311+ 9441 ED 78        	in a,(c)
 312+ 9443 2F           	cpl
 313+ 9444 E6 1F        	and 1fh
 314+ 9446
 315+ 9446              	; jump if no key pressed
 316+ 9446 28 0C        	jr z,k_f_3
 317+ 9448
 318+ 9448              	; test for multipress
 319+ 9448 14           	inc d
 320+ 9449 C0           	ret nz           ; return if multipress
 321+ 944A
 322+ 944A              	; calculate key value
 323+ 944A 67           	ld h,a
 324+ 944B 7B           	ld a,e
 325+ 944C              k_f_2
 326+ 944C D6 08        	sub 8
 327+ 944E CB 3C        	srl h
 328+ 9450 30 FA        	jr nc,k_f_2
 329+ 9452
 330+ 9452              	; 2nd test for multipress
 331+ 9452
 332+ 9452 C0           	ret nz
 333+ 9453
 334+ 9453              	; store key value in d
 335+ 9453 57           	ld d,a
 336+ 9454
 337+ 9454              	; test the other 7 rows
 338+ 9454              k_f_3
 339+ 9454
 340+ 9454 1D           	dec e
 341+ 9455 CB 00        	rlc b
 342+ 9457 38 E8        	jr c,k_f_1
 343+ 9459
 344+ 9459              	; set zero flag
 345+ 9459 BF           	cp a
 346+ 945A C8           	ret z
 347+ 945B
 348+ 945B              ;   title:  2000.3 key_test
 349+ 945B              ;   date:   28/10/2006
 350+ 945B              ;   author: r.l.pearmain / david webb
 351+ 945B              ;   description:
 352+ 945B
 353+ 945B              ;       test a supplied key to see if it is pressed
 354+ 945B
 355+ 945B              ;   on entry:
 356+ 945B
 357+ 945B              ;       a=key code (see key code reference)
 358+ 945B              ;   on exit:
 359+ 945B
 360+ 945B              ;      if key pressed carry reset
 361+ 945B
 362+ 945B              key_test
 363+ 945B
 364+ 945B 4F           	ld c,a                       ; e.g a 00100110 26 [ key bit position 100 (4) half row 110 (6) ]
 365+ 945C
 366+ 945C              	; b=16-address line number
 367+ 945C
 368+ 945C E6 07        	and 7                        ; e.g a = 110 (6)
 369+ 945E 3C           	inc a                        ; e.g a = 111 (7)
 370+ 945F 47           	ld b,a                       ; e.g b = 7
 371+ 9460
 372+ 9460              	; c=data line no+1
 373+ 9460              	; e.g. c=5-int(c/8)
 374+ 9460
 375+ 9460              	; shift 3 times to the right
 376+ 9460 CB 39        	srl c                        ; e.g. a = 00100110 to
 377+ 9462 CB 39        	srl c
 378+ 9464 CB 39        	srl c                        ; e.g. a = 00000100 (4)
 379+ 9466
 380+ 9466              	; subtract from 5
 381+ 9466
 382+ 9466 3E 05        	ld a,5
 383+ 9468 91           	sub c
 384+ 9469 4F           	ld c,a                       ; e.g. c = 1, so we only need to rotate input 1 times to get if
 385+ 946A              								;      pressed or not
 386+ 946A
 387+ 946A              	; calculate hi byte of port address
 388+ 946A
 389+ 946A 3E FE        	ld a,0feh
 390+ 946C              k_t_1
 391+ 946C 0F           	rrca
 392+ 946D 10 FD        	djnz k_t_1                  ; e.g. 0feh = 11111110 rotate 7 times = 11111101 (0fdh)
 393+ 946F
 394+ 946F              	; read half row
 395+ 946F DB FE        	in a,(0feh)                 ; e.g. read the line with a-g (0fdh)
 396+ 9471
 397+ 9471              	; put required key bit into carry
 398+ 9471              k_t_2
 399+ 9471 1F           	rra
 400+ 9472 0D           	dec c
 401+ 9473 20 FC        	jr nz,k_t_2                 ; e.g. keep rotating 1 times
 402+ 9475
 403+ 9475 3F           	ccf                         ; ensure 1 = pressed ( i.e. c = 0 ensure it is 1)
 404+ 9476
 405+ 9476 C9           	ret
 406+ 9477
 407+ 9477              ;   title:  2000.4 key_string_lookup
 408+ 9477              ;   date:   06/11/2006
 409+ 9477              ;   author: r.l.pearmain
 410+ 9477              ;   description:
 411+ 9477
 412+ 9477              ;       return address of string based on key press
 413+ 9477
 414+ 9477              ;   on entry:
 415+ 9477
 416+ 9477              ;       a=key code (see key code reference)
 417+ 9477              ;   on exit:
 418+ 9477
 419+ 9477              ;      de=key string address
 420+ 9477
 421+ 9477              key_string_lookup
 422+ 9477
 423+ 9477 21 B3 95     	ld hl,key_string_table
 424+ 947A
 425+ 947A
 426+ 947A 07           	rlca                     ; 2 bytes per address
 427+ 947B
 428+ 947B 5F           	ld e,a
 429+ 947C 16 00        	ld d,0
 430+ 947E 19           	add hl,de
 431+ 947F 5E           	ld e,(hl)
 432+ 9480 23           	inc hl
 433+ 9481 56           	ld d,(hl)
 434+ 9482
 435+ 9482 C9           	ret
 436+ 9483
 437+ 9483              ;   title:  2000.5 key_wait_unique
 438+ 9483              ;   date:   06/11/2006
 439+ 9483              ;   author: r.l.pearmain
 440+ 9483              ;   description:
 441+ 9483
 442+ 9483              ;       return key code (see key code reference)
 443+ 9483              ;       that is not the same as the last key
 444+ 9483              ;       pressed
 445+ 9483
 446+ 9483              ;   on entry:
 447+ 9483
 448+ 9483              ;	none
 449+ 9483
 450+ 9483              ;   on exit:
 451+ 9483
 452+ 9483              ;      a=key code
 453+ 9483
 454+ 9483              ;  main function
 455+ 9483              key_wait_unique
 456+ 9483
 457+ 9483              	; get key press
 458+ 9483 CD 3B 94     	call key_find
 459+ 9486
 460+ 9486              	; retry if either no keypress or multiple keys, reset last key to none (ff)
 461+ 9486 20 06        	jr nz,k_w_u_1
 462+ 9488 14           	inc d
 463+ 9489 28 03        	jr z,k_w_u_1
 464+ 948B 15           	dec d
 465+ 948C
 466+ 948C 18 07        	jr k_w_u_2
 467+ 948E
 468+ 948E              ;    reset key
 469+ 948E              k_w_u_1
 470+ 948E 3E FF        	ld a,0ffh
 471+ 9490 32 A2 94     	ld (k_w_u_lastkey),a
 472+ 9493
 473+ 9493 18 EE        	jr key_wait_unique
 474+ 9495
 475+ 9495              k_w_u_2
 476+ 9495              	; compare keypress to the last key pressed
 477+ 9495 3A A2 94     	ld a,(k_w_u_lastkey)
 478+ 9498 6F           	ld l,a
 479+ 9499
 480+ 9499 7A           	ld a,d
 481+ 949A BD           	cp l
 482+ 949B
 483+ 949B              	; if the same key pressed try again
 484+ 949B 28 E6        	jr z,key_wait_unique
 485+ 949D
 486+ 949D 7A           	ld a,d                    ; store key press in lastkey
 487+ 949E 32 A2 94     	ld (k_w_u_lastkey),a
 488+ 94A1
 489+ 94A1 C9           	ret
 490+ 94A2
 491+ 94A2              k_w_u_lastkey:
 492+ 94A2 00           	defb 0
 493+ 94A3
 494+ 94A3              ;   title:  2000.6 key_redefine_check_unique
 495+ 94A3              ;   date:   07/11/2006
 496+ 94A3              ;   author: r.l.pearmain
 497+ 94A3              ;   description:
 498+ 94A3
 499+ 94A3              ;   checks keys store to ensure it doesnt already exist
 500+ 94A3
 501+ 94A3              ;   on entry:
 502+ 94A3
 503+ 94A3              ;       a=key code
 504+ 94A3
 505+ 94A3              ;   on exit:
 506+ 94A3
 507+ 94A3              ;      nz if key ok
 508+ 94A3
 509+ 94A3              key_redefine_check_unique
 510+ 94A3
 511+ 94A3 4F           	ld c,a
 512+ 94A4 11 75 95     	ld de,key_store
 513+ 94A7
 514+ 94A7              	; keys to check = 5
 515+ 94A7 06 05        	ld b,5
 516+ 94A9              k_r_c_u_1
 517+ 94A9
 518+ 94A9              	; is key pressed found
 519+ 94A9 1A           	ld a,(de)
 520+ 94AA B9           	cp c
 521+ 94AB C8           	ret z
 522+ 94AC
 523+ 94AC
 524+ 94AC
 525+ 94AC              	; check next key
 526+ 94AC 13           	inc de
 527+ 94AD
 528+ 94AD              	; any keys left to check?
 529+ 94AD 10 FA        	djnz k_r_c_u_1
 530+ 94AF
 531+ 94AF C5           	push bc
 532+ 94B0 0E 02        	ld c,2
 533+ 94B2 06 00        			ld b,0          ;full volume.
 534+ 94B4 3E 04        			ld a,4
 535+ 94B6 CD 24 80     			call PLY_AKM_PLAYSOUNDEFFECT
 536+ 94B9 C1           		pop bc
 537+ 94BA 79           	ld a,c
 538+ 94BB
 539+ 94BB C9           	ret
 540+ 94BC
 541+ 94BC              ;   title:  2000.7 key_redefine
 542+ 94BC              ;   date:   07/11/2006
 543+ 94BC              ;   author: r.l.pearmain
 544+ 94BC              ;   description:
 545+ 94BC
 546+ 94BC              ;   redefine all 5 keys
 547+ 94BC
 548+ 94BC              ;   on entry:
 549+ 94BC
 550+ 94BC              ;       none
 551+ 94BC
 552+ 94BC              ;   on exit:
 553+ 94BC
 554+ 94BC              ;      5 unique keys defined
 555+ 94BC
 556+ 94BC              key_redefine
 557+ 94BC
 558+ 94BC              	; reset keys
 559+ 94BC 21 75 95     	ld hl,key_store
 560+ 94BF 36 FF        	ld (hl),0ffh
 561+ 94C1 11 76 95     	ld de,key_store+1
 562+ 94C4 01 04 00     	ld bc,4
 563+ 94C7 ED B0        	ldir
 564+ 94C9              	; point x,y to the first screen key
 565+ 94C9
 566+ 94C9 3A 6D 95     	ld a,(key_redefine_xpos)
 567+ 94CC 32 70 95     	ld (xpostemp),a
 568+ 94CF 3A 6E 95     	ld a,(key_redefine_ypos)
 569+ 94D2 32 71 95     	ld (ypostemp),a
 570+ 94D5 3A 6F 95     	ld a,(key_redefine_color)
 571+ 94D8 32 72 95     	ld (color),a
 572+ 94DB
 573+ 94DB
 574+ 94DB 11 75 95     	ld de,key_store
 575+ 94DE
 576+ 94DE              	; keys to define = 4
 577+ 94DE 06 03        	ld b,3
 578+ 94E0
 579+ 94E0              k_r_1
 580+ 94E0
 581+ 94E0 C5           	push bc
 582+ 94E1 D5           	push de
 583+ 94E2
 584+ 94E2              k_r_2
 585+ 94E2              	; example for redefine
 586+ 94E2 CD 83 94     	call key_wait_unique
 587+ 94E5 CD A3 94     	call key_redefine_check_unique
 588+ 94E8 28 F8        	jr z,k_r_2
 589+ 94EA
 590+ 94EA F5           	push af
 591+ 94EB CD 77 94     	call key_string_lookup
 592+ 94EE CD DB 93     	call draw_string_chars
 593+ 94F1 F1           	pop af
 594+ 94F2
 595+ 94F2 D1           	pop de
 596+ 94F3
 597+ 94F3 12           	ld (de),a
 598+ 94F4 13           	inc de
 599+ 94F5
 600+ 94F5              	; next row line by 2
 601+ 94F5 3A 71 95     	ld a,(ypostemp)
 602+ 94F8 3C           	inc a
 603+ 94F9 3C           	inc a
 604+ 94FA 32 71 95     	ld (ypostemp),a
 605+ 94FD
 606+ 94FD 3A 6D 95     	ld a,(key_redefine_xpos)
 607+ 9500 32 70 95     	ld (xpostemp),a
 608+ 9503
 609+ 9503 C1           	pop bc
 610+ 9504
 611+ 9504              	; any more keys to define
 612+ 9504 10 DA        	djnz k_r_1
 613+ 9506
 614+ 9506 C9           	ret
 615+ 9507
 616+ 9507              draw_window:
 617+ 9507
 618+ 9507 1A           	ld a,(de)
 619+ 9508 32 70 95     	ld (xpostemp),a
 620+ 950B 13           	inc de
 621+ 950C 1A           	ld a,(de)
 622+ 950D 32 71 95     	ld (ypostemp),a
 623+ 9510 13           	inc de
 624+ 9511 1A           	ld a,(de)
 625+ 9512 32 73 95     	ld (widthtemp),a
 626+ 9515 13           	inc de
 627+ 9516 1A           	ld a,(de)
 628+ 9517 32 74 95     	ld (heighttemp),a
 629+ 951A
 630+ 951A CD 1E 95     	call window
 631+ 951D
 632+ 951D C9           	ret
 633+ 951E
 634+ 951E
 635+ 951E
 636+ 951E              window:
 637+ 951E
 638+ 951E 3A 74 95     	ld a,(heighttemp)
 639+ 9521 47           	ld b,a
 640+ 9522              w1:
 641+ 9522 C5           	push bc
 642+ 9523
 643+ 9523 3A 70 95     	ld a,(xpostemp)
 644+ 9526 F5           	push af
 645+ 9527
 646+ 9527 3A 73 95     	ld a,(widthtemp)
 647+ 952A 47           	ld b,a
 648+ 952B              w2:
 649+ 952B
 650+ 952B C5           	push bc
 651+ 952C CD 90 93     	call calculate_screen_address
 652+ 952F E5           	push hl
 653+ 9530 CD 1E 94     	call draw_blank_char_to_screen
 654+ 9533 E1           	pop hl
 655+ 9534 CD 9E 93     	call calculate_attribute_address
 656+ 9537 AF           	xor a
 657+ 9538 77           	ld (hl),a
 658+ 9539
 659+ 9539 3A 70 95     	ld a,(xpostemp)
 660+ 953C 3C           	inc a
 661+ 953D 32 70 95     	ld (xpostemp),a
 662+ 9540 C1           	pop bc
 663+ 9541 10 E8        	djnz w2
 664+ 9543
 665+ 9543 F1           	pop af
 666+ 9544 32 70 95     	ld (xpostemp),a
 667+ 9547
 668+ 9547 3A 71 95     	ld a,(ypostemp)
 669+ 954A 3C           	inc a
 670+ 954B 32 71 95     	ld (ypostemp),a
 671+ 954E
 672+ 954E C1           	pop bc
 673+ 954F
 674+ 954F 10 D1        	djnz w1
 675+ 9551
 676+ 9551 C9           	ret
 677+ 9552
 678+ 9552              cls:
 679+ 9552 21 00 40     	ld hl,4000h
 680+ 9555 11 01 40     	ld de,4001h
 681+ 9558 36 00        	ld (hl),0
 682+ 955A 01 FF 17     	ld bc,17ffh
 683+ 955D ED B0        	ldir
 684+ 955F
 685+ 955F 21 00 58     	ld hl,5800h
 686+ 9562 11 01 58     	ld de,5801h
 687+ 9565 36 07        	ld (hl),7
 688+ 9567 01 FF 02     	ld bc,2ffh
 689+ 956A ED B0        	ldir
 690+ 956C
 691+ 956C C9           	ret
 692+ 956D
 693+ 956D              key_redefine_xpos:
 694+ 956D 11           	defb 17
 695+ 956E              key_redefine_ypos:
 696+ 956E 08           	defb 8
 697+ 956F              key_redefine_color:
 698+ 956F 45           	defb %01000101
 699+ 9570
 700+ 9570 00           xpostemp: defb 0
 701+ 9571 00           ypostemp: defb 0
 702+ 9572 00           color: defb 0
 703+ 9573 00           widthtemp: defb 0
 704+ 9574 00           heighttemp: defb 0
 705+ 9575
 706+ 9575
 707+ 9575              ;   keys used by game = up,down,left,right,fire
 708+ 9575              key_store:
 709+ 9575 1A           	defb 01ah
 710+ 9576 22           	defb 022h
 711+ 9577 20           	defb 020h
 712+ 9578 1E           	defb 01eh
 713+ 9579 FF           	defb 0ffh
 714+ 957A              	; strings to display by redefine function
 715+ 957A              key_strings:
 716+ 957A
 717+ 957A B1           key_string_1:             defb '1'+128
 718+ 957B B2           key_string_2:             defb '2'+128
 719+ 957C B3           key_string_3:             defb '3'+128
 720+ 957D B4           key_string_4:             defb '4'+128
 721+ 957E B5           key_string_5:             defb '5'+128
 722+ 957F B6           key_string_6:             defb '6'+128
 723+ 9580 B7           key_string_7:             defb '7'+128
 724+ 9581 B8           key_string_8:             defb '8'+128
 725+ 9582 B9           key_string_9:             defb '9'+128
 726+ 9583 B0           key_string_0:             defb '0'+128
 727+ 9584 C1           key_string_a:             defb 'A'+128
 728+ 9585 C2           key_string_b:             defb 'B'+128
 729+ 9586 C3           key_string_c:             defb 'C'+128
 730+ 9587 C4           key_string_d:             defb 'D'+128
 731+ 9588 C5           key_string_e:             defb 'E'+128
 732+ 9589 C6           key_string_f:             defb 'F'+128
 733+ 958A C7           key_string_g:             defb 'G'+128
 734+ 958B C8           key_string_h:             defb 'H'+128
 735+ 958C C9           key_string_i:             defb 'I'+128
 736+ 958D CA           key_string_j:             defb 'J'+128
 737+ 958E CB           key_string_k:             defb 'K'+128
 738+ 958F CC           key_string_l:             defb 'L'+128
 739+ 9590 CD           key_string_m:             defb 'M'+128
 740+ 9591 CE           key_string_n:             defb 'N'+128
 741+ 9592 CF           key_string_o:             defb 'O'+128
 742+ 9593 D0           key_string_p:             defb 'P'+128
 743+ 9594 D1           key_string_q:             defb 'Q'+128
 744+ 9595 D2           key_string_r:             defb 'R'+128
 745+ 9596 D3           key_string_s:             defb 'S'+128
 746+ 9597 D4           key_string_t:             defb 'T'+128
 747+ 9598 D5           key_string_u:             defb 'U'+128
 748+ 9599 D6           key_string_v:             defb 'V'+128
 749+ 959A D7           key_string_w:             defb 'W'+128
 750+ 959B D8           key_string_x:             defb 'X'+128
 751+ 959C D9           key_string_y:             defb 'Y'+128
 752+ 959D DA           key_string_z:             defb 'Z'+128
 753+ 959E 45 4E 54 45  key_string_enter:         defb 'ENTE','R'+128
 753+ 95A2 D2
 754+ 95A3 53 48 49 46  key_string_shift:         defb 'SHIF','T'+128
 754+ 95A7 D4
 755+ 95A8 53 59 4D 42  key_string_symbol:        defb 'SYMBO','L'+128
 755+ 95AC 4F CC
 756+ 95AE 53 50 41 43  key_string_space:         defb 'SPAC','E'+128
 756+ 95B2 C5
 757+ 95B3
 758+ 95B3              ;   look up the string to display
 759+ 95B3              ;   based on key number
 760+ 95B3              key_string_table:
 761+ 95B3
 762+ 95B3 85 95        	defw key_string_b                ; 0
 763+ 95B5 8B 95        	defw key_string_h                ; 1
 764+ 95B7 9C 95        	defw key_string_y                ; 2
 765+ 95B9 7F 95        	defw key_string_6                ; 3
 766+ 95BB 7E 95        	defw key_string_5                ; 4
 767+ 95BD 97 95        	defw key_string_t                ; 5
 768+ 95BF 8A 95        	defw key_string_g                ; 6
 769+ 95C1 99 95        	defw key_string_v                ; 7
 770+ 95C3 91 95        	defw key_string_n                ; 8
 771+ 95C5 8D 95        	defw key_string_j                ; 9
 772+ 95C7 98 95        	defw key_string_u                ; 10
 773+ 95C9 80 95        	defw key_string_7                ; 11
 774+ 95CB 7D 95        	defw key_string_4                ; 12
 775+ 95CD 95 95        	defw key_string_r                ; 13
 776+ 95CF 89 95        	defw key_string_f                ; 14
 777+ 95D1 86 95        	defw key_string_c                ; 15
 778+ 95D3 90 95        	defw key_string_m                ; 16
 779+ 95D5 8E 95        	defw key_string_k                ; 17
 780+ 95D7 8C 95        	defw key_string_i                ; 18
 781+ 95D9 81 95        	defw key_string_8                ; 19
 782+ 95DB 7C 95        	defw key_string_3                ; 20
 783+ 95DD 88 95        	defw key_string_e                ; 21
 784+ 95DF 87 95        	defw key_string_d                ; 22
 785+ 95E1 9B 95        	defw key_string_x                ; 23
 786+ 95E3 A8 95        	defw key_string_symbol           ; 24
 787+ 95E5 8F 95        	defw key_string_l                ; 25
 788+ 95E7 92 95        	defw key_string_o                ; 26
 789+ 95E9 82 95        	defw key_string_9                ; 27
 790+ 95EB 7B 95        	defw key_string_2                ; 28
 791+ 95ED 9A 95        	defw key_string_w                ; 29
 792+ 95EF 96 95        	defw key_string_s                ; 30
 793+ 95F1 9D 95        	defw key_string_z                ; 31
 794+ 95F3 AE 95        	defw key_string_space            ; 32
 795+ 95F5 9E 95        	defw key_string_enter            ; 33
 796+ 95F7 93 95        	defw key_string_p                ; 34
 797+ 95F9 83 95        	defw key_string_0                ; 35
 798+ 95FB 7A 95        	defw key_string_1                ; 36
 799+ 95FD 94 95        	defw key_string_q                ; 37
 800+ 95FF 84 95        	defw key_string_a                ; 38
 801+ 9601 A3 95        	defw key_string_shift            ; 39
 802+ 9603
 803+ 9603
 804+ 9603
 805+ 9603
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/functions.asm
2219  9603
2220  9603
2221  9603
2222  9603                ;  **************************************
2223  9603                ;  *                                    *
2224  9603                ;  * expand                             *
2225  9603                ;  *                                    *
2226  9603                ;  * this function takes the 2 frame 2  *
2227  9603                ;  * byte (3x3) graphic pointed by de   *
2228  9603                ;  * and expands it to 2k with all the  *
2229  9603                ;  * white space etc needed             *
2230  9603                ;  *                                    *
2231  9603                ;  **************************************
2232  9603
2233  9603
2234  9603
2235  9603
2236  9603              ;         expand 72 bytes per frame into the draw area (2k)
2237  9603
2238  9603              ;         on entry, unexd will be the start + 9 to allow a blank character at 1 the top
2239  9603              ;         this will expand
2240  9603
2241  9603              ;         147
2242  9603              ;         258
2243  9603              ;         369
2244  9603
2245  9603              ;         into
2246  9603
2247  9603              ;         0000
2248  9603              ;         1470
2249  9603              ;         2580
2250  9603              ;         3690
2251  9603
2252  9603              ;         and then the next 7 frames
2253  9603              ;         of 2
2254  9603
2255  9603
2256  9603              expand:
2257  9603
2258  9603
2259  9603 2A 00 89               ld hl,(unexd)    ; hl = unexpanded destination (starts with +8 offset)
2260  9606                                          ; store in chars as columns, rows
2261  9606
2262  9606 ED 5B FE 88            ld de,(unexs)  ; de = unexpanded source (gfx)
2263  960A
2264  960A 06 04                  ld b,4           ; left1 and 2, right 1 and 2
2265  960C              ex5:
2266  960C
2267  960C C5                     push bc
2268  960D
2269  960D 06 04                  ld b,4       ; repeat 4 times (1 for each 2 pixel horizontal pixel movement)
2270  960F
2271  960F              ex3:
2272  960F C5                     push bc
2273  9610 D5                     push de
2274  9611
2275  9611              ; **********************
2276  9611              ; expand
2277  9611              ; **********************
2278  9611
2279  9611              ; first frame, straight copy and add right hand blank column.
2280  9611              ; 4 frames, l1, l2, r1, r2 = 16 times
2281  9611
2282  9611 06 03                  ld b,3      ;  3 chars
2283  9613              ex2:
2284  9613 C5                     push bc
2285  9614 06 30                  ld b,48     ; 24 lines * mask
2286  9616              ex1:
2287  9616 1A                     ld a,(de)
2288  9617 77                     ld (hl),a
2289  9618 23                     inc hl
2290  9619 13                     inc de
2291  961A 10 FA                  djnz ex1
2292  961C
2293  961C C1                     pop bc
2294  961D 10 F4                  djnz ex2
2295  961F
2296  961F 06 18                  ld b,24
2297  9621              ex4:
2298  9621 36 FF                  ld (hl),255
2299  9623 23                     inc hl
2300  9624 36 00                  ld (hl),0
2301  9626 23                     inc hl
2302  9627
2303  9627 10 F8                  djnz ex4
2304  9629
2305  9629 D1                     pop de
2306  962A C1                     pop bc
2307  962B
2308  962B 10 E2                  djnz ex3
2309  962D
2310  962D C1                     pop bc
2311  962E
2312  962E E5                     push hl
2313  962F 21 90 00               ld hl,144
2314  9632 19                     add hl,de
2315  9633 EB                     ex de,hl
2316  9634
2317  9634 E1                     pop hl
2318  9635 10 D5                  djnz ex5
2319  9637
2320  9637
2321  9637
2322  9637              ; **********************
2323  9637              ; shift
2324  9637              ; **********************
2325  9637
2326  9637
2327  9637                        ;    all done, now shift each of the bytes right (the difficult bit to work out as they are stored as columns)
2328  9637 2A 00 89               ld hl,(unexd)
2329  963A 11 C0 00               ld de,192
2330  963D 19                     add hl,de
2331  963E
2332  963E 06 04                  ld b,4
2333  9640              shbb:
2334  9640 C5                     push bc
2335  9641 E5                     push hl
2336  9642
2337  9642 11 30 00               ld de,48
2338  9645
2339  9645 3E 02                  ld a,2
2340  9647 32 FB 88               ld (shcol),a
2341  964A
2342  964A 06 03                  ld b,3         ; frames
2343  964C              shaa:
2344  964C C5                     push bc
2345  964D E5                     push hl
2346  964E
2347  964E 06 18                  ld b,24        ; 1 column = 3 * 8 = 24 pixel rows (then add blank at end)
2348  9650              sh1:
2349  9650 E5                     push hl
2350  9651 C5                     push bc
2351  9652
2352  9652                        ; make sure left hand side is blank (mask 128)
2353  9652 7E                     ld a,(hl)
2354  9653 F6 80                  or 128
2355  9655 32 FC 88               ld (shbit),a
2356  9658
2357  9658 CD 86 96               call rotate_bytes
2358  965B
2359  965B C1                     pop bc
2360  965C E1                     pop hl
2361  965D
2362  965D 23                     inc hl                             ; move to the next row
2363  965E
2364  965E E5                     push hl
2365  965F C5                     push bc
2366  9660
2367  9660                        ; make sure left hand side is blank 0
2368  9660 AF                     xor a
2369  9661 32 FC 88               ld (shbit),a
2370  9664
2371  9664 CD 86 96               call rotate_bytes
2372  9667
2373  9667 C1                     pop bc
2374  9668 E1                     pop hl
2375  9669
2376  9669 23                     inc hl                             ; move to the next line
2377  966A
2378  966A                                                   ; because it is stored in columns, the next horizonal byte
2379  966A                                                   ; is 32 bytes on as it is stored in columns
2380  966A
2381  966A 10 E4                  djnz sh1
2382  966C
2383  966C
2384  966C E1                     pop hl
2385  966D
2386  966D                        ; move to next frame
2387  966D 01 C0 00               ld bc,192
2388  9670 09                     add hl,bc
2389  9671
2390  9671 C1                     pop bc
2391  9672
2392  9672                        ; increase rotation by 2
2393  9672 AF                     xor a
2394  9673 3A FB 88               ld a,(shcol)
2395  9676 C6 02                  add a,2
2396  9678 32 FB 88               ld (shcol),a
2397  967B
2398  967B
2399  967B 10 CF                  djnz shaa
2400  967D
2401  967D
2402  967D E1                     pop hl
2403  967E
2404  967E 01 00 03               ld bc,768
2405  9681 09                     add hl,bc
2406  9682
2407  9682 C1                     pop bc
2408  9683
2409  9683 10 BB                  djnz shbb
2410  9685
2411  9685
2412  9685 C9             ret
2413  9686
2414  9686
2415  9686              rotate_bytes:
2416  9686
2417  9686 3A FB 88               ld a,(shcol)   ; the amount of times to shift the bytes
2418  9689 47                     ld b,a
2419  968A              sh5:
2420  968A E5                     push hl
2421  968B C5                     push bc
2422  968C
2423  968C 06 04                  ld b,4         ; 4 columns in row4
2424  968E              sh2:
2425  968E 3A FC 88               ld a,(shbit)   ; will be either %10000000 or %00000000
2426  9691 4F                     ld c,a
2427  9692
2428  9692              ; c holds the bit if after shifting it exits
2429  9692 7E                     ld a,(hl)      ; get graphic byte (e.g %00111101)
2430  9693 E6 01                  and 1          ; leave the lowest bit (e.g. %00000001)
2431  9695 CB 0F                  rrc a          ; rotate right and carry (e.g. a = %10000000)
2432  9697 32 FC 88               ld (shbit),a    ; shbit stores a 128 or a 0 (e.g. %10000000)
2433  969A
2434  969A 7E                     ld a,(hl)       ; get the byte to shift
2435  969B CB 1F                  rr a            ; rotate right
2436  969D E6 7F                  and %01111111   ; remove the left hand bit
2437  969F B1                     or c            ; add on the shifted bit
2438  96A0
2439  96A0              sh2c
2440  96A0 77                     ld (hl),a       ; put back into the graphic
2441  96A1
2442  96A1 19                     add hl,de                          ;   next line byte (48 bytes after this one, 1 column)
2443  96A2
2444  96A2 10 EA                  djnz sh2        ; repeat for all the columns
2445  96A4
2446  96A4
2447  96A4 C1                     pop bc
2448  96A5 E1                     pop hl
2449  96A6
2450  96A6 10 E2                  djnz sh5        ; repeat for the number of times it needs rotating
2451  96A8
2452  96A8 C9                     ret
2453  96A9              ; 5.3k left
2454  96A9
2455  96A9              decompress_screen_sprites:
2456  96A9
2457  96A9                ; get number of sprites
2458  96A9 1A             ld a,(de)
2459  96AA
2460  96AA 32 F6 88       ld (totalsprites),a
2461  96AD
2462  96AD E6 FE          and 254
2463  96AF C8             ret z
2464  96B0
2465  96B0 47             ld b,a
2466  96B1 13             inc de
2467  96B2
2468  96B2              dls:
2469  96B2 C5             push bc
2470  96B3                ; count down
2471  96B3 1A             ld a,(de)
2472  96B4 E6 0F          and 15
2473  96B6 DD 77 00       ld (ix+0),a
2474  96B9
2475  96B9                ; colour
2476  96B9 CD 2C 97       call loadleft
2477  96BC DD 77 13       ld (ix+19),a
2478  96BF
2479  96BF 13             inc de
2480  96C0
2481  96C0                ; xpos
2482  96C0 1A             ld a,(de)
2483  96C1 17             rla
2484  96C2 E6 1F          and 31
2485  96C4 DD 77 01       ld (ix+1),a
2486  96C7
2487  96C7                ; ypos
2488  96C7 1A             ld a,(de)
2489  96C8 CD 2C 97       call loadleft
2490  96CB 17             rla
2491  96CC E6 1F          and 31
2492  96CE DD 77 02       ld (ix+2),a
2493  96D1
2494  96D1 DD 36 03 0C    ld (ix+3),12
2495  96D5 DD 36 04 00    ld (ix+4),0
2496  96D9 DD 36 05 00    ld (ix+5),0
2497  96DD DD 36 06 03    ld (ix+6),3
2498  96E1 DD 36 08 01    ld (ix+8),1
2499  96E5 DD 36 09 00    ld (ix+9),0
2500  96E9 DD 36 0F 06    ld (ix+15),6
2501  96ED DD 36 12 00    ld (ix+18),0
2502  96F1
2503  96F1 13             inc de
2504  96F2
2505  96F2 1A             ld a,(de)   ; max
2506  96F3 17             rla
2507  96F4 E6 1F          and 31
2508  96F6 DD 77 0A       ld (ix + 10),a
2509  96F9
2510  96F9 CD 2C 97       call loadleft
2511  96FC 17             rla
2512  96FD E6 1F          and 31
2513  96FF DD 77 0B       ld (ix+11),a ; min
2514  9702
2515  9702 13             inc de
2516  9703
2517  9703 1A             ld a,(de)
2518  9704 DD 77 0C       ld (ix+12),a
2519  9707 13             inc de
2520  9708 1A             ld a,(de)
2521  9709 DD 77 0D       ld (ix+13),a
2522  970C 13             inc de
2523  970D 1A             ld a,(de)
2524  970E DD 77 0E       ld (ix+14),a
2525  9711 13             inc de
2526  9712
2527  9712 1A             ld a,(de)
2528  9713 E6 0F          and 15
2529  9715 DD 77 10       ld (ix+16),a
2530  9718 CD 2C 97       call loadleft
2531  971B DD 77 11       ld (ix+17),a
2532  971E
2533  971E 13             inc de
2534  971F
2535  971F 1A             ld a,(de)
2536  9720 DD 77 07       ld (ix+7),a
2537  9723
2538  9723 13             inc de
2539  9724
2540  9724 01 14 00       ld bc,sprite_size
2541  9727 DD 09          add ix,bc
2542  9729
2543  9729 C1             pop bc
2544  972A 10 86          djnz dls
2545  972C
2546  972C              ret
2547  972C
2548  972C              loadleft:
2549  972C
2550  972C 1A               ld a,(de)
2551  972D 1F               rra
2552  972E 1F               rra
2553  972F 1F               rra
2554  9730 1F               rra
2555  9731 E6 0F            and 15
2556  9733
2557  9733 C9           	ret
2558  9734
2559  9734
2560  9734                   ; Get x pos (0-31) and multiply and add anim frame to get exact x (0-192)
2561  9734                   ; Do the same with the sprite
2562  9734                   ; then do a width check (24 pixels of the sprite)
2563  9734
2564  9734
2565  9734              collide:
2566  9734
2567  9734 FD 21 00 C0       ld iy,sprites    ;      get player
2568  9738 FD 7E 01          ld a,(iy+1)      ;      player xpos
2569  973B CB 17             rl a             ;    Multiply by 8
2570  973D CB 17             rl a
2571  973F CB 17             rl a
2572  9741 5F                ld e,a                ;  e has proper x pos
2573  9742 FD 7E 04          ld a,(iy+4)      ; Add anim counter
2574  9745 CB 17             rl a              ; Rotate by 2 (2 pixels per frame)
2575  9747 83                add a,e           ; store in e
2576  9748 5F                ld e,a
2577  9749
2578  9749
2579  9749 DD 7E 01          ld a,(ix+1)         ; Do same with enemy
2580  974C CB 17             rl a
2581  974E CB 17             rl a
2582  9750 CB 17             rl a
2583  9752 DD 86 04          add a,(ix+4)
2584  9755
2585  9755 93                sub e
2586  9756 C6 14             add a,20            ; 24 amd 48 were not as accurate
2587  9758 FE 28             cp 40
2588  975A D0                ret nc                       ; if no match then no x col
2589  975B
2590  975B 3A 02 C0          ld a,(sprites+2)
2591  975E DD 96 02          sub (ix+2)                 ; Sprite Y Pos
2592  9761 C6 03             add a,3
2593  9763 FE 04             cp 4
2594  9765
2595  9765 D0                ret nc
2596  9766
2597  9766 3E 01             ld a,1
2598  9768 32 02 89          ld (collided),a
2599  976B
2600  976B C9                ret
2601  976C
2602  976C
2603  976C              showkeys:
2604  976C
2605  976C 21 01 A6                  ld hl,keydata+1  ; Offset for number of keys
2606  976F
2607  976F 3A 00 A6                  ld a,(keydata)   ; Total keys to collect
2608  9772
2609  9772 47                        ld b,a
2610  9773              sk1:
2611  9773 C5                        push bc
2612  9774
2613  9774
2614  9774 3E 01                     ld a,1
2615  9776 32 F2 88                  ld (gotkey),a
2616  9779
2617  9779 3A 06 89                  ld a,(currentscreen)
2618  977C 5F                        ld e,a
2619  977D
2620  977D 7E                        ld a,(hl)
2621  977E BB                        cp e                            ; is it on this screen
2622  977F 20 6A                     jr nz,sk2
2623  9781
2624  9781
2625  9781 E5                        push hl
2626  9782                           ; put key on screen
2627  9782 23                        inc hl
2628  9783 7E                        ld a,(hl)
2629  9784 32 F0 88                  ld (keyxpostemp),a
2630  9787 23                        inc hl
2631  9788 7E                        ld a,(hl)
2632  9789 32 F1 88                  ld (keyypostemp),a
2633  978C 23                        inc hl
2634  978D
2635  978D                           ; is it enabled
2636  978D 7E                        ld a,(hl)
2637  978E E6 FF                     and 255
2638  9790 20 03                     jr nz,sk4
2639  9792
2640  9792
2641  9792 E1                        pop hl
2642  9793 18 56                     jr sk2
2643  9795
2644  9795
2645  9795              sk4:
2646  9795                           ; for the y position, get the offset (y*32) for the number of rows
2647  9795 21 00 BB                 ld hl,row_number_lookup
2648  9798 3A F1 88                 ld a,(keyypostemp)
2649  979B CB 17                    rl a
2650  979D 85                       add a,l
2651  979E 6F                       ld l,a
2652  979F 5E                       ld e,(hl)
2653  97A0 2C                       inc l
2654  97A1 56                       ld d,(hl)
2655  97A2
2656  97A2                          ; de has row address, so add xpos
2657  97A2 3A F0 88                 ld a,(keyxpostemp)
2658  97A5 83                       add a,e
2659  97A6 5F                       ld e,a
2660  97A7
2661  97A7                          ; de now has the offset for the cell
2662  97A7
2663  97A7 21 00 D1                 ld hl,sprite_buffer_1
2664  97AA 19                       add hl,de
2665  97AB 7E                       ld a,(hl)
2666  97AC E6 FF                    and 255
2667  97AE 28 37                    jr z,sk3
2668  97B0
2669  97B0                          ; tell it to redraw
2670  97B0 21 00 C8                 ld hl,update_buffer
2671  97B3 19                       add hl,de
2672  97B4 36 01                    ld (hl),1
2673  97B6
2674  97B6 E1                       pop hl
2675  97B7
2676  97B7 E5                       push hl
2677  97B8 2C                       inc l
2678  97B9 2C                       inc l
2679  97BA 2C                       inc l
2680  97BB 36 00                    ld (hl),0
2681  97BD 2C                       inc l
2682  97BE 2C                       inc l
2683  97BF 2C                       inc l
2684  97C0 2C                       inc l
2685  97C1 36 00                    ld (hl),0
2686  97C3
2687  97C3 E1                       pop hl
2688  97C4
2689  97C4 E5                       push hl
2690  97C5
2691  97C5
2692  97C5
2693  97C5 CD FC 97                 call updateitemsdisplay
2694  97C8
2695  97C8
2696  97C8 0E 02                    ld c,2
2697  97CA 06 00                    ld b,0          ;full volume.
2698  97CC 3E 03                    ld a,3
2699  97CE CD 24 80                 call PLY_AKM_PLAYSOUNDEFFECT
2700  97D1
2701  97D1 3A F5 88                 ld a,(keyslefttocollect)
2702  97D4 3D                       dec a
2703  97D5 32 F5 88                 ld (keyslefttocollect),a
2704  97D8
2705  97D8 28 08                    jr z,sk5
2706  97DA
2707  97DA
2708  97DA 11 52 89                 ld de,items
2709  97DD CD B6 93                 call draw_string
2710  97E0
2711  97E0
2712  97E0 18 05                    jr sk3
2713  97E2              sk5
2714  97E2
2715  97E2               ;           call dissolve
2716  97E2
2717  97E2 E1                       pop hl
2718  97E3 C1                       pop bc
2719  97E4
2720  97E4 C3 E5 8B                 jp begin
2721  97E7
2722  97E7              sk3:
2723  97E7
2724  97E7 CD 1F 98                 call drawkey
2725  97EA
2726  97EA
2727  97EA E1                       pop hl
2728  97EB
2729  97EB
2730  97EB
2731  97EB
2732  97EB
2733  97EB              sk2:
2734  97EB C1                        pop bc
2735  97EC 11 08 00                  ld de,8
2736  97EF 19                        add hl,de
2737  97F0
2738  97F0
2739  97F0 10 81                     djnz sk1
2740  97F2
2741  97F2 3A F3 88                  ld a,(lastcol)
2742  97F5 3C                        inc a
2743  97F6 E6 07                     and 7
2744  97F8 32 F3 88                  ld (lastcol),a
2745  97FB
2746  97FB
2747  97FB C9                        ret
2748  97FC
2749  97FC
2750  97FC
2751  97FC
2752  97FC              updateitemsdisplay:
2753  97FC
2754  97FC
2755  97FC 3A 56 89                  ld a,(items+4)
2756  97FF 3D                        dec a
2757  9800 32 56 89                  ld (items+4),a
2758  9803 FE 2F                     cp '0'-1
2759  9805 20 15                     jr nz,uid1
2760  9807
2761  9807 3E 39                     ld a,'9'
2762  9809 32 56 89                  ld (items+4),a
2763  980C
2764  980C 3A 55 89                  ld a,(items+3)
2765  980F 3D                        dec a
2766  9810 32 55 89                  ld (items+3),a
2767  9813
2768  9813 FE 30                     cp '0'
2769  9815 20 05                     jr nz,uid1
2770  9817 3E 20                     ld a,' '
2771  9819 32 55 89                  ld (items+3),a
2772  981C
2773  981C              uid1:
2774  981C C9                        ret
2775  981D
2776  981D              endofgame:
2777  981D 18 FE                     jr endofgame
2778  981F
2779  981F              drawkey:
2780  981F
2781  981F                          ; draw to screen
2782  981F 21 00 CE                 ld hl,back_colour_buffer
2783  9822 19                       add hl,de
2784  9823 7E                       ld a,(hl)
2785  9824 E6 C7                    and %11000111
2786  9826
2787  9826 D5                       push de
2788  9827 5F                       ld e,a
2789  9828
2790  9828 3A F3 88                 ld a,(lastcol)
2791  982B 17                       rla
2792  982C 17                       rla
2793  982D 17                       rla
2794  982E
2795  982E B3                       or e
2796  982F
2797  982F
2798  982F D1                       pop de
2799  9830 21 40 58                 ld hl,attributes
2800  9833 19                       add hl,de
2801  9834
2802  9834
2803  9834 77                       ld (hl),a
2804  9835
2805  9835 3A F1 88                 ld   a,(keyypostemp)
2806  9838 C6 02                    add a,yscreenoffset
2807  983A 6F                       ld   l,a
2808  983B 3A F0 88                 ld   a,(keyxpostemp)
2809  983E
2810  983E 26 B3                    ld   h,screentable/256
2811  9840
2812  9840 86                       add   a,(hl)
2813  9841
2814  9841 24                       inc  h
2815  9842 66                       ld   h,(hl)
2816  9843 6F                       ld   l,a
2817  9844 3A F3 88                 ld a,(lastcol)
2818  9847 E6 03                    and %00000011
2819  9849
2820  9849 17                       rla           ; * 2
2821  984A 17                       rla           ; * 4
2822  984B 17                       rla           ; * 8
2823  984C
2824  984C 11 08 DA                 ld de,keygfx
2825  984F 5F                       ld e,a
2826  9850
2827  9850 CD 15 94                 call draw_char_to_screen
2828  9853
2829  9853 C9                       ret
2830  9854
2831  9854              resetkeystocollect:
2832  9854
2833  9854 3A 00 A6                  ld a,(keydata)
2834  9857 32 F5 88                  ld (keyslefttocollect),a
2835  985A
2836  985A
2837  985A 3A 00 A6                  ld a,(keydata)
2838  985D C6 30                     add a,'0'
2839  985F 32 56 89                  ld (items+4),a
2840  9862
2841  9862 21 04 A6                  ld hl,keydata+4
2842  9865 11 08 00                  ld de,8
2843  9868 3A 00 A6                  ld a,(keydata)
2844  986B 47                        ld b,a
2845  986C              rktc1:
2846  986C 36 01                     ld (hl),1
2847  986E 19                        add hl,de
2848  986F
2849  986F 10 FB                     djnz rktc1
2850  9871
2851  9871 C9                        ret
2852  9872
2853  9872
2854  9872              decreaseenergy:
2855  9872
2856  9872
2857  9872 0E 02             ld c,2
2858  9874 06 00             ld b,0          ;full volume.
2859  9876 3E 02             ld a,2
2860  9878 CD 24 80          call PLY_AKM_PLAYSOUNDEFFECT
2861  987B
2862  987B 3A F4 88         ld a,(energy)
2863  987E 3D               dec a
2864  987F 32 F4 88         ld (energy),a
2865  9882
2866  9882
2867  9882 21 E2 5A         ld hl,attributes+768-30-(yscreenoffset*32)
2868  9885 5F               ld e,a
2869  9886 16 00            ld d,0
2870  9888 19               add hl,de
2871  9889 36 47            ld (hl),paper_black+ink_white+attr_bright
2872  988B
2873  988B
2874  988B C9               ret
2875  988C
2876  988C
2877  988C
2878  988C 45 4E 44 20       defb 'END OF CODE'
2878  9890 4F 46 20 43
2878  9894 4F 44 45
2879  9897
2880  9897              	org $a600
2881  A600              keydata:
2882  A600 00 00 00...  	defs $ff
2883  A6FF
2884  A6FF              ; ****************************************************************************
2885  A6FF              ; graphics (masked)
2886  A6FF
2887  A6FF              ; the graphics are stored as characters, mask then graphic line.  therefore,
2888  A6FF              ; each character uses 16 bytes (8 mask, 8 char).
2889  A6FF
2890  A6FF              ; the graphics are exported from 7up, in the following order
2891  A6FF
2892  A6FF              ; sort priorities: mask, char line, y char, x char
2893  A6FF              ; attributes:      no attributes
2894  A6FF              ; mask:            yes, mask before
2895  A6FF
2896  A6FF              ; 4k (256 chars)
2897  A6FF              ; ****************************************************************************
2898  A6FF
2899  A6FF              ; bank 0
2900  A6FF              	org $a700
2901  A700              player_gfx:
2902  A700              	include "graphics/pearlr1i.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearlr1i.asm
   1+ A700              ; ASM source file created by SevenuP v1.20
   2+ A700              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ A700
   4+ A700              ;GRAPHIC DATA:
   5+ A700              ;Pixel Size:      ( 32,  24)
   6+ A700              ;Char Size:       (  4,   3)
   7+ A700              ;Frames:             4
   8+ A700              ;Sort Priorities: Mask, Char line, Y char, X char, Frame number
   9+ A700              ;Data Outputted:  Gfx
  10+ A700              ;Interleave:      Sprite
  11+ A700              ;Mask:            Yes, before graphic
  12+ A700
  13+ A700              PEARLR1i:
  14+ A700 86 79 00 CF  	DEFB	134,121,  0,207,  0,130,  0,152
  14+ A704 00 82 00 98
  15+ A708 00 8C 00 C0  	DEFB	  0,140,  0,192,  0,192,  0,128
  15+ A70C 00 C0 00 80
  16+ A710 00 80 00 80  	DEFB	  0,128,  0,128,  0,128,  0,128
  16+ A714 00 80 00 80
  17+ A718 00 C0 80 40  	DEFB	  0,192,128, 64,192, 32,224, 24
  17+ A71C C0 20 E0 18
  18+ A720 10 EF 0C B3  	DEFB	 16,239, 12,179,  0,142,  0,226
  18+ A724 00 8E 00 E2
  19+ A728 C0 3C F8 07  	DEFB	192, 60,248,  7,254,  1,254,  1
  19+ A72C FE 01 FE 01
  20+ A730 00 FF 00 00  	DEFB	  0,255,  0,  0,  0,  0,  0,  7
  20+ A734 00 00 00 07
  21+ A738 00 0F 00 00  	DEFB	  0, 15,  0,  0,  0, 14,  0, 15
  21+ A73C 00 0E 00 0F
  22+ A740 00 07 00 10  	DEFB	  0,  7,  0, 16,  0, 64,  0, 51
  22+ A744 00 40 00 33
  23+ A748 00 07 00 77  	DEFB	  0,  7,  0,119,  0,  3,  0, 16
  23+ A74C 00 03 00 10
  24+ A750 00 E0 00 01  	DEFB	  0,224,  0,  1,  0, 64,  0,224
  24+ A754 00 40 00 E0
  25+ A758 00 4D 00 75  	DEFB	  0, 77,  0,117,  0,117,  0,  0
  25+ A75C 00 75 00 00
  26+ A760 00 FF 00 24  	DEFB	  0,255,  0, 36,  0,  0,  0,188
  26+ A764 00 00 00 BC
  27+ A768 00 DE 00 00  	DEFB	  0,222,  0,  0,  0, 82,  0,222
  27+ A76C 00 52 00 DE
  28+ A770 00 DE 00 00  	DEFB	  0,222,  0,  0,  0,112,  0,116
  28+ A774 00 70 00 74
  29+ A778 00 8E 00 DE  	DEFB	  0,142,  0,222,  0,204,  0,  0
  29+ A77C 00 CC 00 00
  30+ A780 00 FF 7F 80  	DEFB	  0,255,127,128,127,128, 63,192
  30+ A784 7F 80 3F C0
  31+ A788 1F 60 1F 20  	DEFB	 31, 96, 31, 32, 31,160, 31, 32
  31+ A78C 1F A0 1F 20
  32+ A790 7F 80 3F C0  	DEFB	127,128, 63,192, 63, 64, 63, 64
  32+ A794 3F 40 3F 40
  33+ A798 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63, 64, 63, 64
  33+ A79C 3F 40 3F 40
  34+ A7A0 3F 40 3F C0  	DEFB	 63, 64, 63,192, 63, 64, 63,192
  34+ A7A4 3F 40 3F C0
  35+ A7A8 3F 40 3F C0  	DEFB	 63, 64, 63,192, 63, 64, 63,192
  35+ A7AC 3F 40 3F C0
  36+ A7B0 7F 80 FF 00  	DEFB	127,128,255,  0,255,  0,255,  0
  36+ A7B4 FF 00 FF 00
  37+ A7B8 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  37+ A7BC FF 00 FF 00
  38+ A7C0 E1 1E C0 33  	DEFB	225, 30,192, 51,192, 32,192, 38
  38+ A7C4 C0 20 C0 26
  39+ A7C8 C0 23 C0 30  	DEFB	192, 35,192, 48,192, 48,192, 32
  39+ A7CC C0 30 C0 20
  40+ A7D0 C0 20 C0 20  	DEFB	192, 32,192, 32,192, 32,192, 32
  40+ A7D4 C0 20 C0 20
  41+ A7D8 C0 30 E0 10  	DEFB	192, 48,224, 16,240,  8,248,  6
  41+ A7DC F0 08 F8 06
  42+ A7E0 C4 3B C3 2C  	DEFB	196, 59,195, 44,192, 35,192, 56
  42+ A7E4 C0 23 C0 38
  43+ A7E8 F0 0F FE 01  	DEFB	240, 15,254,  1,255,  0,255,  0
  43+ A7EC FF 00 FF 00
  44+ A7F0 80 7F 00 C0  	DEFB	128,127,  0,192,  0,128,  0,  1
  44+ A7F4 00 80 00 01
  45+ A7F8 00 03 00 00  	DEFB	  0,  3,  0,  0,  0,  3,  0,  3
  45+ A7FC 00 03 00 03
  46+ A800 00 01 00 04  	DEFB	  0,  1,  0,  4,  0, 16,  0, 12
  46+ A804 00 10 00 0C
  47+ A808 00 01 00 1D  	DEFB	  0,  1,  0, 29,  0,  0,  0,  4
  47+ A80C 00 00 00 04
  48+ A810 00 F8 00 C0  	DEFB	  0,248,  0,192,  0,144,  0,184
  48+ A814 00 90 00 B8
  49+ A818 00 13 00 DD  	DEFB	  0, 19,  0,221,128, 93,128, 64
  49+ A81C 80 5D 80 40
  50+ A820 00 FF 00 09  	DEFB	  0,255,  0,  9,  0,  0,  0,239
  50+ A824 00 00 00 EF
  51+ A828 00 F7 00 00  	DEFB	  0,247,  0,  0,  0,148,  0,247
  51+ A82C 00 94 00 F7
  52+ A830 00 F7 00 00  	DEFB	  0,247,  0,  0,  0, 28,  0,221
  52+ A834 00 1C 00 DD
  53+ A838 00 E3 00 F7  	DEFB	  0,227,  0,247,  0,243,  0,  0
  53+ A83C 00 F3 00 00
  54+ A840 00 3F 1F 60  	DEFB	  0, 63, 31, 96, 31, 32, 15, 48
  54+ A844 1F 20 0F 30
  55+ A848 07 58 07 48  	DEFB	  7, 88,  7, 72,  7,104,  7,  8
  55+ A84C 07 68 07 08
  56+ A850 1F E0 0F 30  	DEFB	 31,224, 15, 48, 15, 16, 15, 16
  56+ A854 0F 10 0F 10
  57+ A858 0F 90 0F 10  	DEFB	 15,144, 15, 16, 15,144, 15,144
  57+ A85C 0F 90 0F 90
  58+ A860 0F 90 0F 30  	DEFB	 15,144, 15, 48, 15, 16, 15, 48
  58+ A864 0F 10 0F 30
  59+ A868 0F 90 0F B0  	DEFB	 15,144, 15,176, 15, 16, 15, 48
  59+ A86C 0F 10 0F 30
  60+ A870 1F E0 FF 00  	DEFB	 31,224,255,  0,255,  0,255,  0
  60+ A874 FF 00 FF 00
  61+ A878 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  61+ A87C FF 00 FF 00
  62+ A880 F8 07 F0 0C  	DEFB	248,  7,240, 12,240,  8,240,  9
  62+ A884 F0 08 F0 09
  63+ A888 F0 08 F0 0C  	DEFB	240,  8,240, 12,240, 12,240,  8
  63+ A88C F0 0C F0 08
  64+ A890 F0 08 F0 08  	DEFB	240,  8,240,  8,240,  8,240,  8
  64+ A894 F0 08 F0 08
  65+ A898 F0 0C F8 04  	DEFB	240, 12,248,  4,252,  2,254,  1
  65+ A89C FC 02 FE 01
  66+ A8A0 F1 0E F0 0B  	DEFB	241, 14,240, 11,240,  8,240, 14
  66+ A8A4 F0 08 F0 0E
  67+ A8A8 FC 03 FF 00  	DEFB	252,  3,255,  0,255,  0,255,  0
  67+ A8AC FF 00 FF 00
  68+ A8B0 60 9F 00 F0  	DEFB	 96,159,  0,240,  0, 32,  0,128
  68+ A8B4 00 20 00 80
  69+ A8B8 00 C0 00 00  	DEFB	  0,192,  0,  0,  0,  0,  0,  0
  69+ A8BC 00 00 00 00
  70+ A8C0 00 00 00 01  	DEFB	  0,  0,  0,  1,  0,  4,  0,  3
  70+ A8C4 00 04 00 03
  71+ A8C8 00 00 00 07  	DEFB	  0,  0,  0,  7,  0,  0,  0,129
  71+ A8CC 00 00 00 81
  72+ A8D0 00 FE C0 30  	DEFB	  0,254,192, 48,  0,228,  0, 46
  72+ A8D4 00 E4 00 2E
  73+ A8D8 00 C4 80 77  	DEFB	  0,196,128,119,224, 23,224, 16
  73+ A8DC E0 17 E0 10
  74+ A8E0 00 FF 00 02  	DEFB	  0,255,  0,  2,  0,  0,  0,123
  74+ A8E4 00 00 00 7B
  75+ A8E8 00 FD 00 00  	DEFB	  0,253,  0,  0,  0,229,  0,253
  75+ A8EC 00 E5 00 FD
  76+ A8F0 00 7D 00 00  	DEFB	  0,125,  0,  0,  0,  7,  0, 55
  76+ A8F4 00 07 00 37
  77+ A8F8 00 78 00 7D  	DEFB	  0,120,  0,125,  0, 60,  0,  0
  77+ A8FC 00 3C 00 00
  78+ A900 00 0F 07 18  	DEFB	  0, 15,  7, 24,  7,  8,  3, 12
  78+ A904 07 08 03 0C
  79+ A908 01 D6 01 52  	DEFB	  1,214,  1, 82,  1, 90,  1,  2
  79+ A90C 01 5A 01 02
  80+ A910 07 F8 03 4C  	DEFB	  7,248,  3, 76,  3,  4,  3,196
  80+ A914 03 04 03 C4
  81+ A918 03 E4 03 04  	DEFB	  3,228,  3,  4,  3, 36,  3,228
  81+ A91C 03 24 03 E4
  82+ A920 03 E4 03 0C  	DEFB	  3,228,  3, 12,  3,  4,  3, 76
  82+ A924 03 04 03 4C
  83+ A928 03 E4 03 EC  	DEFB	  3,228,  3,236,  3,196,  3, 12
  83+ A92C 03 C4 03 0C
  84+ A930 07 F8 FF 00  	DEFB	  7,248,255,  0,255,  0,255,  0
  84+ A934 FF 00 FF 00
  85+ A938 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  85+ A93C FF 00 FF 00
  86+ A940 FE 01 FC 03  	DEFB	254,  1,252,  3,252,  2,252,  2
  86+ A944 FC 02 FC 02
  87+ A948 FC 02 FC 03  	DEFB	252,  2,252,  3,252,  3,252,  2
  87+ A94C FC 03 FC 02
  88+ A950 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  2,252,  2
  88+ A954 FC 02 FC 02
  89+ A958 FC 03 FE 01  	DEFB	252,  3,254,  1,255,  0,255,  0
  89+ A95C FF 00 FF 00
  90+ A960 FC 03 FC 02  	DEFB	252,  3,252,  2,252,  2,252,  3
  90+ A964 FC 02 FC 03
  91+ A968 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  91+ A96C FF 00 FF 00
  92+ A970 18 E7 00 3C  	DEFB	 24,231,  0, 60,  0,  8,  0, 96
  92+ A974 00 08 00 60
  93+ A978 00 30 00 00  	DEFB	  0, 48,  0,  0,  0,  0,  0,  0
  93+ A97C 00 00 00 00
  94+ A980 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  1,  0,  0
  94+ A984 00 01 00 00
  95+ A988 00 00 00 01  	DEFB	  0,  0,  0,  1,  0,128,128, 96
  95+ A98C 00 80 80 60
  96+ A990 40 BF 30 CC  	DEFB	 64,191, 48,204,  0, 57,  0,139
  96+ A994 00 39 00 8B
  97+ A998 00 F1 E0 1D  	DEFB	  0,241,224, 29,248,  5,248,  4
  97+ A99C F8 05 F8 04
  98+ A9A0 00 FF 00 00  	DEFB	  0,255,  0,  0,  0,  0,  0, 30
  98+ A9A4 00 00 00 1E
  99+ A9A8 00 3F 00 00  	DEFB	  0, 63,  0,  0,  0, 57,  0, 63
  99+ A9AC 00 39 00 3F
 100+ A9B0 00 1F 00 40  	DEFB	  0, 31,  0, 64,  0,  1,  0,205
 100+ A9B4 00 01 00 CD
 101+ A9B8 00 1E 00 DF  	DEFB	  0, 30,  0,223,  0, 15,  0, 64
 101+ A9BC 00 0F 00 40
 102+ A9C0 00 83 01 06  	DEFB	  0,131,  1,  6,  1,  2,  0,131
 102+ A9C4 01 02 00 83
 103+ A9C8 00 35 00 D4  	DEFB	  0, 53,  0,212,  0,214,  0,  0
 103+ A9CC 00 D6 00 00
 104+ A9D0 01 FE 00 93  	DEFB	  1,254,  0,147,  0,  1,  0,241
 104+ A9D4 00 01 00 F1
 105+ A9D8 00 79 00 01  	DEFB	  0,121,  0,  1,  0, 73,  0,121
 105+ A9DC 00 49 00 79
 106+ A9E0 00 79 00 03  	DEFB	  0,121,  0,  3,  0,193,  0,211
 106+ A9E4 00 C1 00 D3
 107+ A9E8 00 39 00 7B  	DEFB	  0, 57,  0,123,  0, 49,  0,  3
 107+ A9EC 00 31 00 03
 108+ A9F0 01 FE FF 00  	DEFB	  1,254,255,  0,255,  0,255,  0
 108+ A9F4 FF 00 FF 00
 109+ A9F8 7F 80 7F 80  	DEFB	127,128,127,128,127,128,127,128
 109+ A9FC 7F 80 7F 80
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearlr1i.asm
2903  AA00              	include "graphics/pearll1i.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearll1i.asm
   1+ AA00              ; ASM source file created by SevenuP v1.20
   2+ AA00              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ AA00
   4+ AA00              ;GRAPHIC DATA:
   5+ AA00              ;Pixel Size:      ( 32,  24)
   6+ AA00              ;Char Size:       (  4,   3)
   7+ AA00              ;Frames:             4
   8+ AA00              ;Sort Priorities: Mask, Char line, Y char, X char, Frame number
   9+ AA00              ;Data Outputted:  Gfx
  10+ AA00              ;Interleave:      Sprite
  11+ AA00              ;Mask:            Yes, before graphic
  12+ AA00
  13+ AA00              PEARLL1I:
  14+ AA00 80 7F 00 C9  	DEFB	128,127,  0,201,  0,128,  0,143
  14+ AA04 00 80 00 8F
  15+ AA08 00 9E 00 80  	DEFB	  0,158,  0,128,  0,146,  0,158
  15+ AA0C 00 92 00 9E
  16+ AA10 00 9E 00 C0  	DEFB	  0,158,  0,192,  0,131,  0,203
  16+ AA14 00 83 00 CB
  17+ AA18 00 9C 00 DE  	DEFB	  0,156,  0,222,  0,140,  0,192
  17+ AA1C 00 8C 00 C0
  18+ AA20 80 7F FF 00  	DEFB	128,127,255,  0,255,  0,255,  0
  18+ AA24 FF 00 FF 00
  19+ AA28 FE 01 FE 01  	DEFB	254,  1,254,  1,254,  1,254,  1
  19+ AA2C FE 01 FE 01
  20+ AA30 00 FF 00 00  	DEFB	  0,255,  0,  0,  0,  0,  0,120
  20+ AA34 00 00 00 78
  21+ AA38 00 FC 00 00  	DEFB	  0,252,  0,  0,  0,156,  0,252
  21+ AA3C 00 9C 00 FC
  22+ AA40 00 F8 00 02  	DEFB	  0,248,  0,  2,  0,128,  0,179
  22+ AA44 00 80 00 B3
  23+ AA48 00 78 00 FB  	DEFB	  0,120,  0,251,  0,240,  0,  2
  23+ AA4C 00 F0 00 02
  24+ AA50 00 C1 80 60  	DEFB	  0,193,128, 96,128, 64,  0,193
  24+ AA54 80 40 00 C1
  25+ AA58 00 AC 00 2B  	DEFB	  0,172,  0, 43,  0,107,  0,  0
  25+ AA5C 00 6B 00 00
  26+ AA60 18 E7 00 3C  	DEFB	 24,231,  0, 60,  0, 16,  0,  6
  26+ AA64 00 10 00 06
  27+ AA68 00 0C 00 00  	DEFB	  0, 12,  0,  0,  0,  0,  0,  0
  27+ AA6C 00 00 00 00
  28+ AA70 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,128,  0,  0
  28+ AA74 00 80 00 00
  29+ AA78 00 00 00 80  	DEFB	  0,  0,  0,128,  0,  1,  1,  6
  29+ AA7C 00 01 01 06
  30+ AA80 02 FD 0C 33  	DEFB	  2,253, 12, 51,  0,156,  0,209
  30+ AA84 00 9C 00 D1
  31+ AA88 00 8F 07 B8  	DEFB	  0,143,  7,184, 31,160, 31, 32
  31+ AA8C 1F A0 1F 20
  32+ AA90 7F 80 3F C0  	DEFB	127,128, 63,192, 63, 64, 63, 64
  32+ AA94 3F 40 3F 40
  33+ AA98 3F 40 3F C0  	DEFB	 63, 64, 63,192, 63,192, 63, 64
  33+ AA9C 3F C0 3F 40
  34+ AAA0 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63, 64, 63, 64
  34+ AAA4 3F 40 3F 40
  35+ AAA8 3F C0 7F 80  	DEFB	 63,192,127,128,255,  0,255,  0
  35+ AAAC FF 00 FF 00
  36+ AAB0 3F C0 3F 40  	DEFB	 63,192, 63, 64, 63, 64, 63,192
  36+ AAB4 3F 40 3F C0
  37+ AAB8 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  37+ AABC FF 00 FF 00
  38+ AAC0 E0 1F C0 32  	DEFB	224, 31,192, 50,192, 32,192, 35
  38+ AAC4 C0 20 C0 23
  39+ AAC8 C0 27 C0 20  	DEFB	192, 39,192, 32,192, 36,192, 39
  39+ AACC C0 24 C0 27
  40+ AAD0 C0 27 C0 30  	DEFB	192, 39,192, 48,192, 32,192, 50
  40+ AAD4 C0 20 C0 32
  41+ AAD8 C0 27 C0 37  	DEFB	192, 39,192, 55,192, 35,192, 48
  41+ AADC C0 23 C0 30
  42+ AAE0 E0 1F FF 00  	DEFB	224, 31,255,  0,255,  0,255,  0
  42+ AAE4 FF 00 FF 00
  43+ AAE8 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  43+ AAEC FF 00 FF 00
  44+ AAF0 00 FF 00 40  	DEFB	  0,255,  0, 64,  0,  0,  0,222
  44+ AAF4 00 00 00 DE
  45+ AAF8 00 BF 00 00  	DEFB	  0,191,  0,  0,  0,167,  0,191
  45+ AAFC 00 A7 00 BF
  46+ AB00 00 BE 00 00  	DEFB	  0,190,  0,  0,  0,224,  0,236
  46+ AB04 00 E0 00 EC
  47+ AB08 00 1E 00 BE  	DEFB	  0, 30,  0,190,  0, 60,  0,  0
  47+ AB0C 00 3C 00 00
  48+ AB10 00 F0 E0 18  	DEFB	  0,240,224, 24,224, 16,192, 48
  48+ AB14 E0 10 C0 30
  49+ AB18 80 6B 80 4A  	DEFB	128,107,128, 74,128, 90,128, 64
  49+ AB1C 80 5A 80 40
  50+ AB20 06 F9 00 0F  	DEFB	  6,249,  0, 15,  0,  4,  0,  1
  50+ AB24 00 04 00 01
  51+ AB28 00 03 00 00  	DEFB	  0,  3,  0,  0,  0,  0,  0,  0
  51+ AB2C 00 00 00 00
  52+ AB30 00 00 00 80  	DEFB	  0,  0,  0,128,  0, 32,  0,192
  52+ AB34 00 20 00 C0
  53+ AB38 00 00 00 E0  	DEFB	  0,  0,  0,224,  0,  0,  0,129
  53+ AB3C 00 00 00 81
  54+ AB40 00 7F 03 0C  	DEFB	  0,127,  3, 12,  0, 39,  0,116
  54+ AB44 00 27 00 74
  55+ AB48 00 23 01 EE  	DEFB	  0, 35,  1,238,  7,232,  7,  8
  55+ AB4C 07 E8 07 08
  56+ AB50 1F E0 0F 30  	DEFB	 31,224, 15, 48, 15, 16, 15,144
  56+ AB54 0F 10 0F 90
  57+ AB58 0F 10 0F 30  	DEFB	 15, 16, 15, 48, 15, 48, 15, 16
  57+ AB5C 0F 30 0F 10
  58+ AB60 0F 10 0F 10  	DEFB	 15, 16, 15, 16, 15, 16, 15, 16
  58+ AB64 0F 10 0F 10
  59+ AB68 0F 30 1F 20  	DEFB	 15, 48, 31, 32, 63, 64,127,128
  59+ AB6C 3F 40 7F 80
  60+ AB70 8F 70 0F D0  	DEFB	143,112, 15,208, 15, 16, 15,112
  60+ AB74 0F 10 0F 70
  61+ AB78 3F C0 FF 00  	DEFB	 63,192,255,  0,255,  0,255,  0
  61+ AB7C FF 00 FF 00
  62+ AB80 F8 07 F0 0C  	DEFB	248,  7,240, 12,240,  8,240,  8
  62+ AB84 F0 08 F0 08
  63+ AB88 F0 09 F0 08  	DEFB	240,  9,240,  8,240,  9,240,  9
  63+ AB8C F0 09 F0 09
  64+ AB90 F0 09 F0 0C  	DEFB	240,  9,240, 12,240,  8,240, 12
  64+ AB94 F0 08 F0 0C
  65+ AB98 F0 09 F0 0D  	DEFB	240,  9,240, 13,240,  8,240, 12
  65+ AB9C F0 08 F0 0C
  66+ ABA0 F8 07 FF 00  	DEFB	248,  7,255,  0,255,  0,255,  0
  66+ ABA4 FF 00 FF 00
  67+ ABA8 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  67+ ABAC FF 00 FF 00
  68+ ABB0 00 FF 00 90  	DEFB	  0,255,  0,144,  0,  0,  0,247
  68+ ABB4 00 00 00 F7
  69+ ABB8 00 EF 00 00  	DEFB	  0,239,  0,  0,  0, 41,  0,239
  69+ ABBC 00 29 00 EF
  70+ ABC0 00 EF 00 00  	DEFB	  0,239,  0,  0,  0, 56,  0,187
  70+ ABC4 00 38 00 BB
  71+ ABC8 00 C7 00 EF  	DEFB	  0,199,  0,239,  0,207,  0,  0
  71+ ABCC 00 CF 00 00
  72+ ABD0 00 FC F8 06  	DEFB	  0,252,248,  6,248,  4,240, 12
  72+ ABD4 F8 04 F0 0C
  73+ ABD8 E0 1A E0 12  	DEFB	224, 26,224, 18,224, 22,224, 16
  73+ ABDC E0 16 E0 10
  74+ ABE0 01 FE 00 03  	DEFB	  1,254,  0,  3,  0,  1,  0,128
  74+ ABE4 00 01 00 80
  75+ ABE8 00 C0 00 00  	DEFB	  0,192,  0,  0,  0,192,  0,192
  75+ ABEC 00 C0 00 C0
  76+ ABF0 00 80 00 20  	DEFB	  0,128,  0, 32,  0,  8,  0, 48
  76+ ABF4 00 08 00 30
  77+ ABF8 00 80 00 B8  	DEFB	  0,128,  0,184,  0,  0,  0, 32
  77+ ABFC 00 00 00 20
  78+ AC00 00 1F 00 03  	DEFB	  0, 31,  0,  3,  0,  9,  0, 29
  78+ AC04 00 09 00 1D
  79+ AC08 00 C8 00 BB  	DEFB	  0,200,  0,187,  1,186,  1,  2
  79+ AC0C 01 BA 01 02
  80+ AC10 87 78 03 CC  	DEFB	135,120,  3,204,  3,  4,  3,100
  80+ AC14 03 04 03 64
  81+ AC18 03 C4 03 0C  	DEFB	  3,196,  3, 12,  3, 12,  3,  4
  81+ AC1C 03 0C 03 04
  82+ AC20 03 04 03 04  	DEFB	  3,  4,  3,  4,  3,  4,  3,  4
  82+ AC24 03 04 03 04
  83+ AC28 03 0C 07 08  	DEFB	  3, 12,  7,  8, 15, 16, 31, 96
  83+ AC2C 0F 10 1F 60
  84+ AC30 23 DC C3 34  	DEFB	 35,220,195, 52,  3,196,  3, 28
  84+ AC34 03 C4 03 1C
  85+ AC38 0F F0 7F 80  	DEFB	 15,240,127,128,255,  0,255,  0
  85+ AC3C FF 00 FF 00
  86+ AC40 FE 01 FC 03  	DEFB	254,  1,252,  3,252,  2,252,  2
  86+ AC44 FC 02 FC 02
  87+ AC48 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  2,252,  2
  87+ AC4C FC 02 FC 02
  88+ AC50 FC 02 FC 03  	DEFB	252,  2,252,  3,252,  2,252,  3
  88+ AC54 FC 02 FC 03
  89+ AC58 FC 02 FC 03  	DEFB	252,  2,252,  3,252,  2,252,  3
  89+ AC5C FC 02 FC 03
  90+ AC60 FE 01 FF 00  	DEFB	254,  1,255,  0,255,  0,255,  0
  90+ AC64 FF 00 FF 00
  91+ AC68 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  91+ AC6C FF 00 FF 00
  92+ AC70 00 FF 00 24  	DEFB	  0,255,  0, 36,  0,  0,  0, 61
  92+ AC74 00 00 00 3D
  93+ AC78 00 7B 00 00  	DEFB	  0,123,  0,  0,  0, 74,  0,123
  93+ AC7C 00 4A 00 7B
  94+ AC80 00 7B 00 00  	DEFB	  0,123,  0,  0,  0, 14,  0, 46
  94+ AC84 00 0E 00 2E
  95+ AC88 00 71 00 7B  	DEFB	  0,113,  0,123,  0, 51,  0,  0
  95+ AC8C 00 33 00 00
  96+ AC90 00 FF FE 01  	DEFB	  0,255,254,  1,254,  1,252,  3
  96+ AC94 FE 01 FC 03
  97+ AC98 F8 06 F8 04  	DEFB	248,  6,248,  4,248,  5,248,  4
  97+ AC9C F8 05 F8 04
  98+ ACA0 00 FF 00 00  	DEFB	  0,255,  0,  0,  0,  0,  0,224
  98+ ACA4 00 00 00 E0
  99+ ACA8 00 F0 00 00  	DEFB	  0,240,  0,  0,  0,112,  0,240
  99+ ACAC 00 70 00 F0
 100+ ACB0 00 E0 00 08  	DEFB	  0,224,  0,  8,  0,  2,  0,204
 100+ ACB4 00 02 00 CC
 101+ ACB8 00 E0 00 EE  	DEFB	  0,224,  0,238,  0,192,  0,  8
 101+ ACBC 00 C0 00 08
 102+ ACC0 00 07 00 80  	DEFB	  0,  7,  0,128,  0,  2,  0,  7
 102+ ACC4 00 02 00 07
 103+ ACC8 00 B2 00 AE  	DEFB	  0,178,  0,174,  0,174,  0,  0
 103+ ACCC 00 AE 00 00
 104+ ACD0 61 9E 00 F3  	DEFB	 97,158,  0,243,  0, 65,  0, 25
 104+ ACD4 00 41 00 19
 105+ ACD8 00 31 00 03  	DEFB	  0, 49,  0,  3,  0,  3,  0,  1
 105+ ACDC 00 03 00 01
 106+ ACE0 00 01 00 01  	DEFB	  0,  1,  0,  1,  0,  1,  0,  1
 106+ ACE4 00 01 00 01
 107+ ACE8 00 03 01 02  	DEFB	  0,  3,  1,  2,  3,  4,  7, 24
 107+ ACEC 03 04 07 18
 108+ ACF0 08 F7 30 CD  	DEFB	  8,247, 48,205,  0,113,  0, 71
 108+ ACF4 00 71 00 47
 109+ ACF8 03 3C 1F E0  	DEFB	  3, 60, 31,224,127,128,127,128
 109+ ACFC 7F 80 7F 80
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearll1i.asm
2904  AD00
2905  AD00              ; bank 1
2906  AD00              	org $ad00
2907  AD00              	include "graphics/pearlr2i.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearlr2i.asm
   1+ AD00              ; ASM source file created by SevenuP v1.20
   2+ AD00              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ AD00
   4+ AD00              ;GRAPHIC DATA:
   5+ AD00              ;Pixel Size:      ( 32,  24)
   6+ AD00              ;Char Size:       (  4,   3)
   7+ AD00              ;Frames:             4
   8+ AD00              ;Sort Priorities: Mask, Char line, Y char, X char, Frame number
   9+ AD00              ;Data Outputted:  Gfx
  10+ AD00              ;Interleave:      Sprite
  11+ AD00              ;Mask:            Yes, before graphic
  12+ AD00
  13+ AD00              PEARLR2I:
  14+ AD00 FF 00 8F 70  	DEFB	255,  0,143,112,  0,207,  0,130
  14+ AD04 00 CF 00 82
  15+ AD08 00 98 00 8C  	DEFB	  0,152,  0,140,  0,128,  0,128
  15+ AD0C 00 80 00 80
  16+ AD10 00 80 00 80  	DEFB	  0,128,  0,128,  0,128,  0,128
  16+ AD14 00 80 00 80
  17+ AD18 00 80 80 40  	DEFB	  0,128,128, 64,128, 64,192, 32
  17+ AD1C 80 40 C0 20
  18+ AD20 E0 18 00 E7  	DEFB	224, 24,  0,231,  0,185,  0,142
  18+ AD24 00 B9 00 8E
  19+ AD28 80 60 E0 1D  	DEFB	128, 96,224, 29,240, 11,240,  8
  19+ AD2C F0 0B F0 08
  20+ AD30 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  20+ AD34 00 00 00 00
  21+ AD38 00 07 00 0F  	DEFB	  0,  7,  0, 15,  0,  0,  0, 14
  21+ AD3C 00 00 00 0E
  22+ AD40 00 0F 00 07  	DEFB	  0, 15,  0,  7,  0, 16,  0, 64
  22+ AD44 00 10 00 40
  23+ AD48 00 33 00 07  	DEFB	  0, 51,  0,  7,  0,119,  0,  3
  23+ AD4C 00 77 00 03
  24+ AD50 00 10 00 E0  	DEFB	  0, 16,  0,224,  0,  0,  0, 64
  24+ AD54 00 00 00 40
  25+ AD58 00 E0 00 C8  	DEFB	  0,224,  0,200,  0,183,  7,  8
  25+ AD5C 00 B7 07 08
  26+ AD60 FF 00 00 FF  	DEFB	255,  0,  0,255,  0, 36,  0,  0
  26+ AD64 00 24 00 00
  27+ AD68 00 BC 00 DE  	DEFB	  0,188,  0,222,  0,  0,  0, 82
  27+ AD6C 00 00 00 52
  28+ AD70 00 DE 00 DE  	DEFB	  0,222,  0,222,  0,  0,  0,112
  28+ AD74 00 00 00 70
  29+ AD78 00 74 00 8E  	DEFB	  0,116,  0,142,  0,222,  0,204
  29+ AD7C 00 DE 00 CC
  30+ AD80 00 00 00 7F  	DEFB	  0,  0,  0,127,  3, 12,  1, 50
  30+ AD84 03 0C 01 32
  31+ AD88 00 DD 00 ED  	DEFB	  0,221,  0,237,  0, 99,  1,142
  31+ AD8C 00 63 01 8E
  32+ AD90 FF 00 7F 80  	DEFB	255,  0,127,128, 63,192, 63, 64
  32+ AD94 3F C0 3F 40
  33+ AD98 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63, 64, 63, 64
  33+ AD9C 3F 40 3F 40
  34+ ADA0 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63,192, 63, 64
  34+ ADA4 3F C0 3F 40
  35+ ADA8 3F C0 3F 40  	DEFB	 63,192, 63, 64, 63,192, 63, 64
  35+ ADAC 3F C0 3F 40
  36+ ADB0 3F C0 7F 80  	DEFB	 63,192,127,128,255,  0,255,  0
  36+ ADB4 FF 00 FF 00
  37+ ADB8 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  37+ ADBC FF 00 FF 00
  38+ ADC0 FF 00 E3 1C  	DEFB	255,  0,227, 28,192, 51,192, 32
  38+ ADC4 C0 33 C0 20
  39+ ADC8 C0 26 C0 23  	DEFB	192, 38,192, 35,192, 32,192, 32
  39+ ADCC C0 20 C0 20
  40+ ADD0 C0 20 C0 20  	DEFB	192, 32,192, 32,192, 32,192, 32
  40+ ADD4 C0 20 C0 20
  41+ ADD8 C0 20 E0 10  	DEFB	192, 32,224, 16,224, 16,240,  8
  41+ ADDC E0 10 F0 08
  42+ ADE0 F8 06 C0 39  	DEFB	248,  6,192, 57,192, 46,192, 35
  42+ ADE4 C0 2E C0 23
  43+ ADE8 E0 18 F8 07  	DEFB	224, 24,248,  7,252,  2,252,  2
  43+ ADEC FC 02 FC 02
  44+ ADF0 FF 00 C0 3F  	DEFB	255,  0,192, 63,  0,192,  0,128
  44+ ADF4 00 C0 00 80
  45+ ADF8 00 01 00 03  	DEFB	  0,  1,  0,  3,  0,  0,  0,  3
  45+ ADFC 00 00 00 03
  46+ AE00 00 03 00 01  	DEFB	  0,  3,  0,  1,  0,  4,  0, 16
  46+ AE04 00 04 00 10
  47+ AE08 00 0C 00 01  	DEFB	  0, 12,  0,  1,  0, 29,  0,  0
  47+ AE0C 00 1D 00 00
  48+ AE10 00 04 00 F8  	DEFB	  0,  4,  0,248,  0, 64,  0,144
  48+ AE14 00 40 00 90
  49+ AE18 00 38 00 72  	DEFB	  0, 56,  0,114,  0,237,  1,  2
  49+ AE1C 00 ED 01 02
  50+ AE20 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  9,  0,  0
  50+ AE24 00 09 00 00
  51+ AE28 00 EF 00 F7  	DEFB	  0,239,  0,247,  0,  0,  0,148
  51+ AE2C 00 00 00 94
  52+ AE30 00 F7 00 F7  	DEFB	  0,247,  0,247,  0,  0,  0, 28
  52+ AE34 00 00 00 1C
  53+ AE38 00 DD 00 E3  	DEFB	  0,221,  0,227,  0,247,  0,243
  53+ AE3C 00 F7 00 F3
  54+ AE40 00 00 00 1F  	DEFB	  0,  0,  0, 31,  0,  3,  0, 12
  54+ AE44 00 03 00 0C
  55+ AE48 00 37 00 3B  	DEFB	  0, 55,  0, 59,  0,216,192, 35
  55+ AE4C 00 D8 C0 23
  56+ AE50 FF 00 1F E0  	DEFB	255,  0, 31,224, 15, 48, 15, 16
  56+ AE54 0F 30 0F 10
  57+ AE58 0F 10 0F 90  	DEFB	 15, 16, 15,144, 15, 16, 15,144
  57+ AE5C 0F 10 0F 90
  58+ AE60 0F 90 0F 90  	DEFB	 15,144, 15,144, 15, 48, 15, 16
  58+ AE64 0F 30 0F 10
  59+ AE68 0F 30 0F 90  	DEFB	 15, 48, 15,144, 15,176, 15, 16
  59+ AE6C 0F B0 0F 10
  60+ AE70 0F 30 1F E0  	DEFB	 15, 48, 31,224,255,  0,127,128
  60+ AE74 FF 00 7F 80
  61+ AE78 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63,192,127,128
  61+ AE7C 3F C0 7F 80
  62+ AE80 FF 00 F8 07  	DEFB	255,  0,248,  7,240, 12,240,  8
  62+ AE84 F0 0C F0 08
  63+ AE88 F0 09 F0 08  	DEFB	240,  9,240,  8,240,  8,240,  8
  63+ AE8C F0 08 F0 08
  64+ AE90 F0 08 F0 08  	DEFB	240,  8,240,  8,240,  8,240,  8
  64+ AE94 F0 08 F0 08
  65+ AE98 F0 08 F8 04  	DEFB	240,  8,248,  4,248,  4,252,  2
  65+ AE9C F8 04 FC 02
  66+ AEA0 FE 01 F0 0E  	DEFB	254,  1,240, 14,240, 11,240,  8
  66+ AEA4 F0 0B F0 08
  67+ AEA8 F8 06 FE 01  	DEFB	248,  6,254,  1,255,  0,255,  0
  67+ AEAC FF 00 FF 00
  68+ AEB0 FF 00 F0 0F  	DEFB	255,  0,240, 15,  0,240,  0, 32
  68+ AEB4 00 F0 00 20
  69+ AEB8 00 80 00 C0  	DEFB	  0,128,  0,192,  0,  0,  0,  0
  69+ AEBC 00 00 00 00
  70+ AEC0 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  1,  0,  4
  70+ AEC4 00 01 00 04
  71+ AEC8 00 03 00 00  	DEFB	  0,  3,  0,  0,  0,  7,  0,  0
  71+ AECC 00 07 00 00
  72+ AED0 00 81 00 7E  	DEFB	  0,129,  0,126,  0,144,  0,228
  72+ AED4 00 90 00 E4
  73+ AED8 00 0E 00 DC  	DEFB	  0, 14,  0,220,  0,187,  0,128
  73+ AEDC 00 BB 00 80
  74+ AEE0 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  2,  0,  0
  74+ AEE4 00 02 00 00
  75+ AEE8 00 7B 00 FD  	DEFB	  0,123,  0,253,  0,  0,  0,229
  75+ AEEC 00 00 00 E5
  76+ AEF0 00 FD 00 7D  	DEFB	  0,253,  0,125,  0,  0,  0,  7
  76+ AEF4 00 00 00 07
  77+ AEF8 00 37 00 78  	DEFB	  0, 55,  0,120,  0,125,  0, 60
  77+ AEFC 00 7D 00 3C
  78+ AF00 00 00 00 07  	DEFB	  0,  0,  0,  7,  0,  0,  0,  3
  78+ AF04 00 00 00 03
  79+ AF08 00 0D 00 8E  	DEFB	  0, 13,  0,142,  0,118,112,136
  79+ AF0C 00 76 70 88
  80+ AF10 FF 00 07 F8  	DEFB	255,  0,  7,248,  3, 76,  3,  4
  80+ AF14 03 4C 03 04
  81+ AF18 03 C4 03 E4  	DEFB	  3,196,  3,228,  3,  4,  3, 36
  81+ AF1C 03 04 03 24
  82+ AF20 03 E4 03 E4  	DEFB	  3,228,  3,228,  3, 12,  3,  4
  82+ AF24 03 0C 03 04
  83+ AF28 03 4C 03 E4  	DEFB	  3, 76,  3,228,  3,236,  3,196
  83+ AF2C 03 EC 03 C4
  84+ AF30 03 0C 07 F8  	DEFB	  3, 12,  7,248, 63,192, 31, 32
  84+ AF34 3F C0 1F 20
  85+ AF38 0F D0 0F D0  	DEFB	 15,208, 15,208, 15, 48, 31,224
  85+ AF3C 0F 30 1F E0
  86+ AF40 FF 00 FE 01  	DEFB	255,  0,254,  1,252,  3,252,  2
  86+ AF44 FC 03 FC 02
  87+ AF48 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  2,252,  2
  87+ AF4C FC 02 FC 02
  88+ AF50 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  2,252,  2
  88+ AF54 FC 02 FC 02
  89+ AF58 FC 02 FE 01  	DEFB	252,  2,254,  1,254,  1,255,  0
  89+ AF5C FE 01 FF 00
  90+ AF60 FF 00 FC 03  	DEFB	255,  0,252,  3,252,  2,252,  2
  90+ AF64 FC 02 FC 02
  91+ AF68 FE 01 FF 00  	DEFB	254,  1,255,  0,255,  0,255,  0
  91+ AF6C FF 00 FF 00
  92+ AF70 FF 00 3C C3  	DEFB	255,  0, 60,195,  0, 60,  0,  8
  92+ AF74 00 3C 00 08
  93+ AF78 00 60 00 30  	DEFB	  0, 96,  0, 48,  0,  0,  0,  0
  93+ AF7C 00 00 00 00
  94+ AF80 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,  1
  94+ AF84 00 00 00 01
  95+ AF88 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  1,  0,128
  95+ AF8C 00 01 00 80
  96+ AF90 80 60 00 9F  	DEFB	128, 96,  0,159,  0,228,  0, 57
  96+ AF94 00 E4 00 39
  97+ AF98 00 83 80 77  	DEFB	  0,131,128,119,192, 46,192, 32
  97+ AF9C C0 2E C0 20
  98+ AFA0 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  98+ AFA4 00 00 00 00
  99+ AFA8 00 1E 00 3F  	DEFB	  0, 30,  0, 63,  0,  0,  0, 57
  99+ AFAC 00 00 00 39
 100+ AFB0 00 3F 00 1F  	DEFB	  0, 63,  0, 31,  0, 64,  0,  1
 100+ AFB4 00 40 00 01
 101+ AFB8 00 CD 00 1E  	DEFB	  0,205,  0, 30,  0,223,  0, 15
 101+ AFBC 00 DF 00 0F
 102+ AFC0 00 40 00 81  	DEFB	  0, 64,  0,129,  0,  0,  0,  0
 102+ AFC4 00 00 00 00
 103+ AFC8 00 83 00 23  	DEFB	  0,131,  0, 35,  0,221, 28, 34
 103+ AFCC 00 DD 1C 22
 104+ AFD0 FF 00 01 FE  	DEFB	255,  0,  1,254,  0,147,  0,  1
 104+ AFD4 00 93 00 01
 105+ AFD8 00 F1 00 79  	DEFB	  0,241,  0,121,  0,  1,  0, 73
 105+ AFDC 00 01 00 49
 106+ AFE0 00 79 00 79  	DEFB	  0,121,  0,121,  0,  3,  0,193
 106+ AFE4 00 03 00 C1
 107+ AFE8 00 D3 00 39  	DEFB	  0,211,  0, 57,  0,123,  0, 49
 107+ AFEC 00 7B 00 31
 108+ AFF0 00 03 01 FE  	DEFB	  0,  3,  1,254, 15, 48,  7,200
 108+ AFF4 0F 30 07 C8
 109+ AFF8 03 74 03 B4  	DEFB	  3,116,  3,180,  3,140,  7, 56
 109+ AFFC 03 8C 07 38
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearlr2i.asm
2908  B000              	include "graphics/pearll2i.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearll2i.asm
   1+ B000              ; ASM source file created by SevenuP v1.20
   2+ B000              ; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   3+ B000
   4+ B000              ;GRAPHIC DATA:
   5+ B000              ;Pixel Size:      ( 32,  24)
   6+ B000              ;Char Size:       (  4,   3)
   7+ B000              ;Frames:             4
   8+ B000              ;Sort Priorities: Mask, Char line, Y char, X char, Frame number
   9+ B000              ;Data Outputted:  Gfx
  10+ B000              ;Interleave:      Sprite
  11+ B000              ;Mask:            Yes, before graphic
  12+ B000
  13+ B000              PEARLL2I:
  14+ B000 FF 00 80 7F  	DEFB	255,  0,128,127,  0,201,  0,128
  14+ B004 00 C9 00 80
  15+ B008 00 8F 00 9E  	DEFB	  0,143,  0,158,  0,128,  0,146
  15+ B00C 00 80 00 92
  16+ B010 00 9E 00 9E  	DEFB	  0,158,  0,158,  0,192,  0,131
  16+ B014 00 C0 00 83
  17+ B018 00 CB 00 9C  	DEFB	  0,203,  0,156,  0,222,  0,140
  17+ B01C 00 DE 00 8C
  18+ B020 00 C0 80 7F  	DEFB	  0,192,128,127,240, 12,224, 19
  18+ B024 F0 0C E0 13
  19+ B028 C0 2E C0 2D  	DEFB	192, 46,192, 45,192, 49,224, 28
  19+ B02C C0 31 E0 1C
  20+ B030 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  20+ B034 00 00 00 00
  21+ B038 00 78 00 FC  	DEFB	  0,120,  0,252,  0,  0,  0,156
  21+ B03C 00 00 00 9C
  22+ B040 00 FC 00 F8  	DEFB	  0,252,  0,248,  0,  2,  0,128
  22+ B044 00 02 00 80
  23+ B048 00 B3 00 78  	DEFB	  0,179,  0,120,  0,251,  0,240
  23+ B04C 00 FB 00 F0
  24+ B050 00 02 00 81  	DEFB	  0,  2,  0,129,  0,  0,  0,  0
  24+ B054 00 00 00 00
  25+ B058 00 C1 00 C4  	DEFB	  0,193,  0,196,  0,187, 56, 68
  25+ B05C 00 BB 38 44
  26+ B060 FF 00 3C C3  	DEFB	255,  0, 60,195,  0, 60,  0, 16
  26+ B064 00 3C 00 10
  27+ B068 00 06 00 0C  	DEFB	  0,  6,  0, 12,  0,  0,  0,  0
  27+ B06C 00 00 00 00
  28+ B070 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,  0,  0,128
  28+ B074 00 00 00 80
  29+ B078 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,128,  0,  1
  29+ B07C 00 80 00 01
  30+ B080 01 06 00 F9  	DEFB	  1,  6,  0,249,  0, 39,  0,156
  30+ B084 00 27 00 9C
  31+ B088 00 C1 01 EE  	DEFB	  0,193,  1,238,  3,116,  3,  4
  31+ B08C 03 74 03 04
  32+ B090 FF 00 7F 80  	DEFB	255,  0,127,128, 63,192, 63, 64
  32+ B094 3F C0 3F 40
  33+ B098 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63, 64, 63, 64
  33+ B09C 3F 40 3F 40
  34+ B0A0 3F 40 3F 40  	DEFB	 63, 64, 63, 64, 63, 64, 63, 64
  34+ B0A4 3F 40 3F 40
  35+ B0A8 3F 40 7F 80  	DEFB	 63, 64,127,128,127,128,255,  0
  35+ B0AC 7F 80 FF 00
  36+ B0B0 FF 00 3F C0  	DEFB	255,  0, 63,192, 63, 64, 63, 64
  36+ B0B4 3F 40 3F 40
  37+ B0B8 7F 80 FF 00  	DEFB	127,128,255,  0,255,  0,255,  0
  37+ B0BC FF 00 FF 00
  38+ B0C0 FF 00 E0 1F  	DEFB	255,  0,224, 31,192, 50,192, 32
  38+ B0C4 C0 32 C0 20
  39+ B0C8 C0 23 C0 27  	DEFB	192, 35,192, 39,192, 32,192, 36
  39+ B0CC C0 20 C0 24
  40+ B0D0 C0 27 C0 27  	DEFB	192, 39,192, 39,192, 48,192, 32
  40+ B0D4 C0 30 C0 20
  41+ B0D8 C0 32 C0 27  	DEFB	192, 50,192, 39,192, 55,192, 35
  41+ B0DC C0 37 C0 23
  42+ B0E0 C0 30 E0 1F  	DEFB	192, 48,224, 31,252,  3,248,  4
  42+ B0E4 FC 03 F8 04
  43+ B0E8 F0 0B F0 0B  	DEFB	240, 11,240, 11,240, 12,248,  7
  43+ B0EC F0 0C F8 07
  44+ B0F0 FF 00 00 FF  	DEFB	255,  0,  0,255,  0, 64,  0,  0
  44+ B0F4 00 40 00 00
  45+ B0F8 00 DE 00 BF  	DEFB	  0,222,  0,191,  0,  0,  0,167
  45+ B0FC 00 00 00 A7
  46+ B100 00 BF 00 BE  	DEFB	  0,191,  0,190,  0,  0,  0,224
  46+ B104 00 00 00 E0
  47+ B108 00 EC 00 1E  	DEFB	  0,236,  0, 30,  0,190,  0, 60
  47+ B10C 00 BE 00 3C
  48+ B110 00 00 00 E0  	DEFB	  0,  0,  0,224,  0,  0,  0,192
  48+ B114 00 00 00 C0
  49+ B118 00 B0 00 71  	DEFB	  0,176,  0,113,  0,110, 14, 17
  49+ B11C 00 6E 0E 11
  50+ B120 FF 00 0F F0  	DEFB	255,  0, 15,240,  0, 15,  0,  4
  50+ B124 00 0F 00 04
  51+ B128 00 01 00 03  	DEFB	  0,  1,  0,  3,  0,  0,  0,  0
  51+ B12C 00 00 00 00
  52+ B130 00 00 00 00  	DEFB	  0,  0,  0,  0,  0,128,  0, 32
  52+ B134 00 80 00 20
  53+ B138 00 C0 00 00  	DEFB	  0,192,  0,  0,  0,224,  0,  0
  53+ B13C 00 E0 00 00
  54+ B140 00 81 00 7E  	DEFB	  0,129,  0,126,  0,  9,  0, 39
  54+ B144 00 09 00 27
  55+ B148 00 70 00 3B  	DEFB	  0,112,  0, 59,  0,221,  0,  1
  55+ B14C 00 DD 00 01
  56+ B150 FF 00 1F E0  	DEFB	255,  0, 31,224, 15, 48, 15, 16
  56+ B154 0F 30 0F 10
  57+ B158 0F 90 0F 10  	DEFB	 15,144, 15, 16, 15, 16, 15, 16
  57+ B15C 0F 10 0F 10
  58+ B160 0F 10 0F 10  	DEFB	 15, 16, 15, 16, 15, 16, 15, 16
  58+ B164 0F 10 0F 10
  59+ B168 0F 10 1F 20  	DEFB	 15, 16, 31, 32, 31, 32, 63, 64
  59+ B16C 1F 20 3F 40
  60+ B170 7F 80 0F 70  	DEFB	127,128, 15,112, 15,208, 15, 16
  60+ B174 0F D0 0F 10
  61+ B178 1F 60 7F 80  	DEFB	 31, 96,127,128,255,  0,255,  0
  61+ B17C FF 00 FF 00
  62+ B180 FF 00 F8 07  	DEFB	255,  0,248,  7,240, 12,240,  8
  62+ B184 F0 0C F0 08
  63+ B188 F0 08 F0 09  	DEFB	240,  8,240,  9,240,  8,240,  9
  63+ B18C F0 08 F0 09
  64+ B190 F0 09 F0 09  	DEFB	240,  9,240,  9,240, 12,240,  8
  64+ B194 F0 0C F0 08
  65+ B198 F0 0C F0 09  	DEFB	240, 12,240,  9,240, 13,240,  8
  65+ B19C F0 0D F0 08
  66+ B1A0 F0 0C F8 07  	DEFB	240, 12,248,  7,255,  0,254,  1
  66+ B1A4 FF 00 FE 01
  67+ B1A8 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  3,254,  1
  67+ B1AC FC 03 FE 01
  68+ B1B0 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,144,  0,  0
  68+ B1B4 00 90 00 00
  69+ B1B8 00 F7 00 EF  	DEFB	  0,247,  0,239,  0,  0,  0, 41
  69+ B1BC 00 00 00 29
  70+ B1C0 00 EF 00 EF  	DEFB	  0,239,  0,239,  0,  0,  0, 56
  70+ B1C4 00 00 00 38
  71+ B1C8 00 BB 00 C7  	DEFB	  0,187,  0,199,  0,239,  0,207
  71+ B1CC 00 EF 00 CF
  72+ B1D0 00 00 00 F8  	DEFB	  0,  0,  0,248,  0,192,  0, 48
  72+ B1D4 00 C0 00 30
  73+ B1D8 00 EC 00 DC  	DEFB	  0,236,  0,220,  0, 27,  3,196
  73+ B1DC 00 1B 03 C4
  74+ B1E0 FF 00 03 FC  	DEFB	255,  0,  3,252,  0,  3,  0,  1
  74+ B1E4 00 03 00 01
  75+ B1E8 00 80 00 C0  	DEFB	  0,128,  0,192,  0,  0,  0,192
  75+ B1EC 00 00 00 C0
  76+ B1F0 00 C0 00 80  	DEFB	  0,192,  0,128,  0, 32,  0,  8
  76+ B1F4 00 20 00 08
  77+ B1F8 00 30 00 80  	DEFB	  0, 48,  0,128,  0,184,  0,  0
  77+ B1FC 00 B8 00 00
  78+ B200 00 20 00 1F  	DEFB	  0, 32,  0, 31,  0,  2,  0,  9
  78+ B204 00 02 00 09
  79+ B208 00 1C 00 4E  	DEFB	  0, 28,  0, 78,  0,183,128, 64
  79+ B20C 00 B7 80 40
  80+ B210 FF 00 C7 38  	DEFB	255,  0,199, 56,  3,204,  3,  4
  80+ B214 03 CC 03 04
  81+ B218 03 64 03 C4  	DEFB	  3,100,  3,196,  3,  4,  3,  4
  81+ B21C 03 04 03 04
  82+ B220 03 04 03 04  	DEFB	  3,  4,  3,  4,  3,  4,  3,  4
  82+ B224 03 04 03 04
  83+ B228 03 04 07 08  	DEFB	  3,  4,  7,  8,  7,  8, 15, 16
  83+ B22C 07 08 0F 10
  84+ B230 1F 60 03 9C  	DEFB	 31, 96,  3,156,  3,116,  3,196
  84+ B234 03 74 03 C4
  85+ B238 07 18 1F E0  	DEFB	  7, 24, 31,224, 63, 64, 63, 64
  85+ B23C 3F 40 3F 40
  86+ B240 FF 00 FE 01  	DEFB	255,  0,254,  1,252,  3,252,  2
  86+ B244 FC 03 FC 02
  87+ B248 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  2,252,  2
  87+ B24C FC 02 FC 02
  88+ B250 FC 02 FC 02  	DEFB	252,  2,252,  2,252,  3,252,  2
  88+ B254 FC 03 FC 02
  89+ B258 FC 03 FC 02  	DEFB	252,  3,252,  2,252,  3,252,  2
  89+ B25C FC 03 FC 02
  90+ B260 FC 03 FE 01  	DEFB	252,  3,254,  1,255,  0,255,  0
  90+ B264 FF 00 FF 00
  91+ B268 FF 00 FF 00  	DEFB	255,  0,255,  0,255,  0,255,  0
  91+ B26C FF 00 FF 00
  92+ B270 FF 00 00 FF  	DEFB	255,  0,  0,255,  0, 36,  0,  0
  92+ B274 00 24 00 00
  93+ B278 00 3D 00 7B  	DEFB	  0, 61,  0,123,  0,  0,  0, 74
  93+ B27C 00 00 00 4A
  94+ B280 00 7B 00 7B  	DEFB	  0,123,  0,123,  0,  0,  0, 14
  94+ B284 00 00 00 0E
  95+ B288 00 2E 00 71  	DEFB	  0, 46,  0,113,  0,123,  0, 51
  95+ B28C 00 7B 00 33
  96+ B290 00 00 00 FE  	DEFB	  0,  0,  0,254,192, 48,128, 76
  96+ B294 C0 30 80 4C
  97+ B298 00 BB 00 B7  	DEFB	  0,187,  0,183,  0,198,128,113
  97+ B29C 00 C6 80 71
  98+ B2A0 FF 00 00 FF  	DEFB	255,  0,  0,255,  0,  0,  0,  0
  98+ B2A4 00 00 00 00
  99+ B2A8 00 E0 00 F0  	DEFB	  0,224,  0,240,  0,  0,  0,112
  99+ B2AC 00 00 00 70
 100+ B2B0 00 F0 00 E0  	DEFB	  0,240,  0,224,  0,  8,  0,  2
 100+ B2B4 00 08 00 02
 101+ B2B8 00 CC 00 E0  	DEFB	  0,204,  0,224,  0,238,  0,192
 101+ B2BC 00 EE 00 C0
 102+ B2C0 00 08 00 07  	DEFB	  0,  8,  0,  7,  0,  0,  0,  2
 102+ B2C4 00 00 00 02
 103+ B2C8 00 07 00 13  	DEFB	  0,  7,  0, 19,  0,237,224, 16
 103+ B2CC 00 ED E0 10
 104+ B2D0 FF 00 F1 0E  	DEFB	255,  0,241, 14,  0,243,  0, 65
 104+ B2D4 00 F3 00 41
 105+ B2D8 00 19 00 31  	DEFB	  0, 25,  0, 49,  0,  1,  0,  1
 105+ B2DC 00 01 00 01
 106+ B2E0 00 01 00 01  	DEFB	  0,  1,  0,  1,  0,  1,  0,  1
 106+ B2E4 00 01 00 01
 107+ B2E8 00 01 01 02  	DEFB	  0,  1,  1,  2,  1,  2,  3,  4
 107+ B2EC 01 02 03 04
 108+ B2F0 07 18 00 E7  	DEFB	  7, 24,  0,231,  0,157,  0,113
 108+ B2F4 00 9D 00 71
 109+ B2F8 01 06 07 B8  	DEFB	  1,  6,  7,184, 15,208, 15, 16
 109+ B2FC 0F D0 0F 10
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/graphics/pearll2i.asm
2909  B300
2910  B300
2911  B300
2912  B300
2913  B300              ; hi bytes of screen
2914  B300              	org $b300
2915  B300
2916  B300
2917  B300              screentable:
2918  B300
2919  B300 00 20 40 60       defb 00h,20h,40h,60h,80h,0a0h,0c0h,0e0h
2919  B304 80 A0 C0 E0
2920  B308 00 20 40 60       defb 00h,20h,40h,60h,80h,0a0h,0c0h,0e0h
2920  B30C 80 A0 C0 E0
2921  B310 00 20 40 60       defb 00h,20h,40h,60h,80h,0a0h,0c0h,0e0h
2921  B314 80 A0 C0 E0
2922  B318
2923  B318              ; lo bytes of screen
2924  B318              	org $b400
2925  B400
2926  B400 40 40 40 40       defb 40h,40h,40h,40h,40h,40h,40h,40h
2926  B404 40 40 40 40
2927  B408 48 48 48 48       defb 48h,48h,48h,48h,48h,48h,48h,48h
2927  B40C 48 48 48 48
2928  B410 50 50 50 50       defb 50h,50h,50h,50h,50h,50h,50h,50h
2928  B414 50 50 50 50
2929  B418
2930  B418
2931  B418
2932  B418
2933  B418
2934  B418
2935  B418
2936  B418
2937  B418
2938  B418
2939  B418
2940  B418
2941  B418              ; ****************************************************************************
2942  B418
2943  B418              ; lookup tables
2944  B418              ; =============
2945  B418
2946  B418              ; this section contains all the lookup tables used by the application
2947  B418              ; ****************************************************************************
2948  B418
2949  B418
2950  B418              ; 1k for addresses (768*2 bytes)
2951  B418              	org $b500
2952  B500
2953  B500              ; each character block (0-767) has it's address (2 byte) stored here
2954  B500              scr_lookup:
2955  B500                        include "includes/address.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/address.asm
   1+ B500              ;       Addresses for quick lookup
   2+ B500
   3+ B500              ;       512x2 = 1024k
   4+ B500
   5+ B500 00 40        	defw 16384
   6+ B502 01 40        	defw 16385
   7+ B504 02 40        	defw 16386
   8+ B506 03 40        	defw 16387
   9+ B508 04 40        	defw 16388
  10+ B50A 05 40        	defw 16389
  11+ B50C 06 40        	defw 16390
  12+ B50E 07 40        	defw 16391
  13+ B510 08 40        	defw 16392
  14+ B512 09 40        	defw 16393
  15+ B514 0A 40        	defw 16394
  16+ B516 0B 40        	defw 16395
  17+ B518 0C 40        	defw 16396
  18+ B51A 0D 40        	defw 16397
  19+ B51C 0E 40        	defw 16398
  20+ B51E 0F 40        	defw 16399
  21+ B520 10 40        	defw 16400
  22+ B522 11 40        	defw 16401
  23+ B524 12 40        	defw 16402
  24+ B526 13 40        	defw 16403
  25+ B528 14 40        	defw 16404
  26+ B52A 15 40        	defw 16405
  27+ B52C 16 40        	defw 16406
  28+ B52E 17 40        	defw 16407
  29+ B530 18 40        	defw 16408
  30+ B532 19 40        	defw 16409
  31+ B534 1A 40        	defw 16410
  32+ B536 1B 40        	defw 16411
  33+ B538 1C 40        	defw 16412
  34+ B53A 1D 40        	defw 16413
  35+ B53C 1E 40        	defw 16414
  36+ B53E 1F 40        	defw 16415
  37+ B540 20 40        	defw 16416
  38+ B542 21 40        	defw 16417
  39+ B544 22 40        	defw 16418
  40+ B546 23 40        	defw 16419
  41+ B548 24 40        	defw 16420
  42+ B54A 25 40        	defw 16421
  43+ B54C 26 40        	defw 16422
  44+ B54E 27 40        	defw 16423
  45+ B550 28 40        	defw 16424
  46+ B552 29 40        	defw 16425
  47+ B554 2A 40        	defw 16426
  48+ B556 2B 40        	defw 16427
  49+ B558 2C 40        	defw 16428
  50+ B55A 2D 40        	defw 16429
  51+ B55C 2E 40        	defw 16430
  52+ B55E 2F 40        	defw 16431
  53+ B560 30 40        	defw 16432
  54+ B562 31 40        	defw 16433
  55+ B564 32 40        	defw 16434
  56+ B566 33 40        	defw 16435
  57+ B568 34 40        	defw 16436
  58+ B56A 35 40        	defw 16437
  59+ B56C 36 40        	defw 16438
  60+ B56E 37 40        	defw 16439
  61+ B570 38 40        	defw 16440
  62+ B572 39 40        	defw 16441
  63+ B574 3A 40        	defw 16442
  64+ B576 3B 40        	defw 16443
  65+ B578 3C 40        	defw 16444
  66+ B57A 3D 40        	defw 16445
  67+ B57C 3E 40        	defw 16446
  68+ B57E 3F 40        	defw 16447
  69+ B580 40 40        	defw 16448
  70+ B582 41 40        	defw 16449
  71+ B584 42 40        	defw 16450
  72+ B586 43 40        	defw 16451
  73+ B588 44 40        	defw 16452
  74+ B58A 45 40        	defw 16453
  75+ B58C 46 40        	defw 16454
  76+ B58E 47 40        	defw 16455
  77+ B590 48 40        	defw 16456
  78+ B592 49 40        	defw 16457
  79+ B594 4A 40        	defw 16458
  80+ B596 4B 40        	defw 16459
  81+ B598 4C 40        	defw 16460
  82+ B59A 4D 40        	defw 16461
  83+ B59C 4E 40        	defw 16462
  84+ B59E 4F 40        	defw 16463
  85+ B5A0 50 40        	defw 16464
  86+ B5A2 51 40        	defw 16465
  87+ B5A4 52 40        	defw 16466
  88+ B5A6 53 40        	defw 16467
  89+ B5A8 54 40        	defw 16468
  90+ B5AA 55 40        	defw 16469
  91+ B5AC 56 40        	defw 16470
  92+ B5AE 57 40        	defw 16471
  93+ B5B0 58 40        	defw 16472
  94+ B5B2 59 40        	defw 16473
  95+ B5B4 5A 40        	defw 16474
  96+ B5B6 5B 40        	defw 16475
  97+ B5B8 5C 40        	defw 16476
  98+ B5BA 5D 40        	defw 16477
  99+ B5BC 5E 40        	defw 16478
 100+ B5BE 5F 40        	defw 16479
 101+ B5C0 60 40        	defw 16480
 102+ B5C2 61 40        	defw 16481
 103+ B5C4 62 40        	defw 16482
 104+ B5C6 63 40        	defw 16483
 105+ B5C8 64 40        	defw 16484
 106+ B5CA 65 40        	defw 16485
 107+ B5CC 66 40        	defw 16486
 108+ B5CE 67 40        	defw 16487
 109+ B5D0 68 40        	defw 16488
 110+ B5D2 69 40        	defw 16489
 111+ B5D4 6A 40        	defw 16490
 112+ B5D6 6B 40        	defw 16491
 113+ B5D8 6C 40        	defw 16492
 114+ B5DA 6D 40        	defw 16493
 115+ B5DC 6E 40        	defw 16494
 116+ B5DE 6F 40        	defw 16495
 117+ B5E0 70 40        	defw 16496
 118+ B5E2 71 40        	defw 16497
 119+ B5E4 72 40        	defw 16498
 120+ B5E6 73 40        	defw 16499
 121+ B5E8 74 40        	defw 16500
 122+ B5EA 75 40        	defw 16501
 123+ B5EC 76 40        	defw 16502
 124+ B5EE 77 40        	defw 16503
 125+ B5F0 78 40        	defw 16504
 126+ B5F2 79 40        	defw 16505
 127+ B5F4 7A 40        	defw 16506
 128+ B5F6 7B 40        	defw 16507
 129+ B5F8 7C 40        	defw 16508
 130+ B5FA 7D 40        	defw 16509
 131+ B5FC 7E 40        	defw 16510
 132+ B5FE 7F 40        	defw 16511
 133+ B600 80 40        	defw 16512
 134+ B602 81 40        	defw 16513
 135+ B604 82 40        	defw 16514
 136+ B606 83 40        	defw 16515
 137+ B608 84 40        	defw 16516
 138+ B60A 85 40        	defw 16517
 139+ B60C 86 40        	defw 16518
 140+ B60E 87 40        	defw 16519
 141+ B610 88 40        	defw 16520
 142+ B612 89 40        	defw 16521
 143+ B614 8A 40        	defw 16522
 144+ B616 8B 40        	defw 16523
 145+ B618 8C 40        	defw 16524
 146+ B61A 8D 40        	defw 16525
 147+ B61C 8E 40        	defw 16526
 148+ B61E 8F 40        	defw 16527
 149+ B620 90 40        	defw 16528
 150+ B622 91 40        	defw 16529
 151+ B624 92 40        	defw 16530
 152+ B626 93 40        	defw 16531
 153+ B628 94 40        	defw 16532
 154+ B62A 95 40        	defw 16533
 155+ B62C 96 40        	defw 16534
 156+ B62E 97 40        	defw 16535
 157+ B630 98 40        	defw 16536
 158+ B632 99 40        	defw 16537
 159+ B634 9A 40        	defw 16538
 160+ B636 9B 40        	defw 16539
 161+ B638 9C 40        	defw 16540
 162+ B63A 9D 40        	defw 16541
 163+ B63C 9E 40        	defw 16542
 164+ B63E 9F 40        	defw 16543
 165+ B640 A0 40        	defw 16544
 166+ B642 A1 40        	defw 16545
 167+ B644 A2 40        	defw 16546
 168+ B646 A3 40        	defw 16547
 169+ B648 A4 40        	defw 16548
 170+ B64A A5 40        	defw 16549
 171+ B64C A6 40        	defw 16550
 172+ B64E A7 40        	defw 16551
 173+ B650 A8 40        	defw 16552
 174+ B652 A9 40        	defw 16553
 175+ B654 AA 40        	defw 16554
 176+ B656 AB 40        	defw 16555
 177+ B658 AC 40        	defw 16556
 178+ B65A AD 40        	defw 16557
 179+ B65C AE 40        	defw 16558
 180+ B65E AF 40        	defw 16559
 181+ B660 B0 40        	defw 16560
 182+ B662 B1 40        	defw 16561
 183+ B664 B2 40        	defw 16562
 184+ B666 B3 40        	defw 16563
 185+ B668 B4 40        	defw 16564
 186+ B66A B5 40        	defw 16565
 187+ B66C B6 40        	defw 16566
 188+ B66E B7 40        	defw 16567
 189+ B670 B8 40        	defw 16568
 190+ B672 B9 40        	defw 16569
 191+ B674 BA 40        	defw 16570
 192+ B676 BB 40        	defw 16571
 193+ B678 BC 40        	defw 16572
 194+ B67A BD 40        	defw 16573
 195+ B67C BE 40        	defw 16574
 196+ B67E BF 40        	defw 16575
 197+ B680 C0 40        	defw 16576
 198+ B682 C1 40        	defw 16577
 199+ B684 C2 40        	defw 16578
 200+ B686 C3 40        	defw 16579
 201+ B688 C4 40        	defw 16580
 202+ B68A C5 40        	defw 16581
 203+ B68C C6 40        	defw 16582
 204+ B68E C7 40        	defw 16583
 205+ B690 C8 40        	defw 16584
 206+ B692 C9 40        	defw 16585
 207+ B694 CA 40        	defw 16586
 208+ B696 CB 40        	defw 16587
 209+ B698 CC 40        	defw 16588
 210+ B69A CD 40        	defw 16589
 211+ B69C CE 40        	defw 16590
 212+ B69E CF 40        	defw 16591
 213+ B6A0 D0 40        	defw 16592
 214+ B6A2 D1 40        	defw 16593
 215+ B6A4 D2 40        	defw 16594
 216+ B6A6 D3 40        	defw 16595
 217+ B6A8 D4 40        	defw 16596
 218+ B6AA D5 40        	defw 16597
 219+ B6AC D6 40        	defw 16598
 220+ B6AE D7 40        	defw 16599
 221+ B6B0 D8 40        	defw 16600
 222+ B6B2 D9 40        	defw 16601
 223+ B6B4 DA 40        	defw 16602
 224+ B6B6 DB 40        	defw 16603
 225+ B6B8 DC 40        	defw 16604
 226+ B6BA DD 40        	defw 16605
 227+ B6BC DE 40        	defw 16606
 228+ B6BE DF 40        	defw 16607
 229+ B6C0 E0 40        	defw 16608
 230+ B6C2 E1 40        	defw 16609
 231+ B6C4 E2 40        	defw 16610
 232+ B6C6 E3 40        	defw 16611
 233+ B6C8 E4 40        	defw 16612
 234+ B6CA E5 40        	defw 16613
 235+ B6CC E6 40        	defw 16614
 236+ B6CE E7 40        	defw 16615
 237+ B6D0 E8 40        	defw 16616
 238+ B6D2 E9 40        	defw 16617
 239+ B6D4 EA 40        	defw 16618
 240+ B6D6 EB 40        	defw 16619
 241+ B6D8 EC 40        	defw 16620
 242+ B6DA ED 40        	defw 16621
 243+ B6DC EE 40        	defw 16622
 244+ B6DE EF 40        	defw 16623
 245+ B6E0 F0 40        	defw 16624
 246+ B6E2 F1 40        	defw 16625
 247+ B6E4 F2 40        	defw 16626
 248+ B6E6 F3 40        	defw 16627
 249+ B6E8 F4 40        	defw 16628
 250+ B6EA F5 40        	defw 16629
 251+ B6EC F6 40        	defw 16630
 252+ B6EE F7 40        	defw 16631
 253+ B6F0 F8 40        	defw 16632
 254+ B6F2 F9 40        	defw 16633
 255+ B6F4 FA 40        	defw 16634
 256+ B6F6 FB 40        	defw 16635
 257+ B6F8 FC 40        	defw 16636
 258+ B6FA FD 40        	defw 16637
 259+ B6FC FE 40        	defw 16638
 260+ B6FE FF 40        	defw 16639
 261+ B700 00 48        	defw 18432
 262+ B702 01 48        	defw 18433
 263+ B704 02 48        	defw 18434
 264+ B706 03 48        	defw 18435
 265+ B708 04 48        	defw 18436
 266+ B70A 05 48        	defw 18437
 267+ B70C 06 48        	defw 18438
 268+ B70E 07 48        	defw 18439
 269+ B710 08 48        	defw 18440
 270+ B712 09 48        	defw 18441
 271+ B714 0A 48        	defw 18442
 272+ B716 0B 48        	defw 18443
 273+ B718 0C 48        	defw 18444
 274+ B71A 0D 48        	defw 18445
 275+ B71C 0E 48        	defw 18446
 276+ B71E 0F 48        	defw 18447
 277+ B720 10 48        	defw 18448
 278+ B722 11 48        	defw 18449
 279+ B724 12 48        	defw 18450
 280+ B726 13 48        	defw 18451
 281+ B728 14 48        	defw 18452
 282+ B72A 15 48        	defw 18453
 283+ B72C 16 48        	defw 18454
 284+ B72E 17 48        	defw 18455
 285+ B730 18 48        	defw 18456
 286+ B732 19 48        	defw 18457
 287+ B734 1A 48        	defw 18458
 288+ B736 1B 48        	defw 18459
 289+ B738 1C 48        	defw 18460
 290+ B73A 1D 48        	defw 18461
 291+ B73C 1E 48        	defw 18462
 292+ B73E 1F 48        	defw 18463
 293+ B740 20 48        	defw 18464
 294+ B742 21 48        	defw 18465
 295+ B744 22 48        	defw 18466
 296+ B746 23 48        	defw 18467
 297+ B748 24 48        	defw 18468
 298+ B74A 25 48        	defw 18469
 299+ B74C 26 48        	defw 18470
 300+ B74E 27 48        	defw 18471
 301+ B750 28 48        	defw 18472
 302+ B752 29 48        	defw 18473
 303+ B754 2A 48        	defw 18474
 304+ B756 2B 48        	defw 18475
 305+ B758 2C 48        	defw 18476
 306+ B75A 2D 48        	defw 18477
 307+ B75C 2E 48        	defw 18478
 308+ B75E 2F 48        	defw 18479
 309+ B760 30 48        	defw 18480
 310+ B762 31 48        	defw 18481
 311+ B764 32 48        	defw 18482
 312+ B766 33 48        	defw 18483
 313+ B768 34 48        	defw 18484
 314+ B76A 35 48        	defw 18485
 315+ B76C 36 48        	defw 18486
 316+ B76E 37 48        	defw 18487
 317+ B770 38 48        	defw 18488
 318+ B772 39 48        	defw 18489
 319+ B774 3A 48        	defw 18490
 320+ B776 3B 48        	defw 18491
 321+ B778 3C 48        	defw 18492
 322+ B77A 3D 48        	defw 18493
 323+ B77C 3E 48        	defw 18494
 324+ B77E 3F 48        	defw 18495
 325+ B780 40 48        	defw 18496
 326+ B782 41 48        	defw 18497
 327+ B784 42 48        	defw 18498
 328+ B786 43 48        	defw 18499
 329+ B788 44 48        	defw 18500
 330+ B78A 45 48        	defw 18501
 331+ B78C 46 48        	defw 18502
 332+ B78E 47 48        	defw 18503
 333+ B790 48 48        	defw 18504
 334+ B792 49 48        	defw 18505
 335+ B794 4A 48        	defw 18506
 336+ B796 4B 48        	defw 18507
 337+ B798 4C 48        	defw 18508
 338+ B79A 4D 48        	defw 18509
 339+ B79C 4E 48        	defw 18510
 340+ B79E 4F 48        	defw 18511
 341+ B7A0 50 48        	defw 18512
 342+ B7A2 51 48        	defw 18513
 343+ B7A4 52 48        	defw 18514
 344+ B7A6 53 48        	defw 18515
 345+ B7A8 54 48        	defw 18516
 346+ B7AA 55 48        	defw 18517
 347+ B7AC 56 48        	defw 18518
 348+ B7AE 57 48        	defw 18519
 349+ B7B0 58 48        	defw 18520
 350+ B7B2 59 48        	defw 18521
 351+ B7B4 5A 48        	defw 18522
 352+ B7B6 5B 48        	defw 18523
 353+ B7B8 5C 48        	defw 18524
 354+ B7BA 5D 48        	defw 18525
 355+ B7BC 5E 48        	defw 18526
 356+ B7BE 5F 48        	defw 18527
 357+ B7C0 60 48        	defw 18528
 358+ B7C2 61 48        	defw 18529
 359+ B7C4 62 48        	defw 18530
 360+ B7C6 63 48        	defw 18531
 361+ B7C8 64 48        	defw 18532
 362+ B7CA 65 48        	defw 18533
 363+ B7CC 66 48        	defw 18534
 364+ B7CE 67 48        	defw 18535
 365+ B7D0 68 48        	defw 18536
 366+ B7D2 69 48        	defw 18537
 367+ B7D4 6A 48        	defw 18538
 368+ B7D6 6B 48        	defw 18539
 369+ B7D8 6C 48        	defw 18540
 370+ B7DA 6D 48        	defw 18541
 371+ B7DC 6E 48        	defw 18542
 372+ B7DE 6F 48        	defw 18543
 373+ B7E0 70 48        	defw 18544
 374+ B7E2 71 48        	defw 18545
 375+ B7E4 72 48        	defw 18546
 376+ B7E6 73 48        	defw 18547
 377+ B7E8 74 48        	defw 18548
 378+ B7EA 75 48        	defw 18549
 379+ B7EC 76 48        	defw 18550
 380+ B7EE 77 48        	defw 18551
 381+ B7F0 78 48        	defw 18552
 382+ B7F2 79 48        	defw 18553
 383+ B7F4 7A 48        	defw 18554
 384+ B7F6 7B 48        	defw 18555
 385+ B7F8 7C 48        	defw 18556
 386+ B7FA 7D 48        	defw 18557
 387+ B7FC 7E 48        	defw 18558
 388+ B7FE 7F 48        	defw 18559
 389+ B800 80 48        	defw 18560
 390+ B802 81 48        	defw 18561
 391+ B804 82 48        	defw 18562
 392+ B806 83 48        	defw 18563
 393+ B808 84 48        	defw 18564
 394+ B80A 85 48        	defw 18565
 395+ B80C 86 48        	defw 18566
 396+ B80E 87 48        	defw 18567
 397+ B810 88 48        	defw 18568
 398+ B812 89 48        	defw 18569
 399+ B814 8A 48        	defw 18570
 400+ B816 8B 48        	defw 18571
 401+ B818 8C 48        	defw 18572
 402+ B81A 8D 48        	defw 18573
 403+ B81C 8E 48        	defw 18574
 404+ B81E 8F 48        	defw 18575
 405+ B820 90 48        	defw 18576
 406+ B822 91 48        	defw 18577
 407+ B824 92 48        	defw 18578
 408+ B826 93 48        	defw 18579
 409+ B828 94 48        	defw 18580
 410+ B82A 95 48        	defw 18581
 411+ B82C 96 48        	defw 18582
 412+ B82E 97 48        	defw 18583
 413+ B830 98 48        	defw 18584
 414+ B832 99 48        	defw 18585
 415+ B834 9A 48        	defw 18586
 416+ B836 9B 48        	defw 18587
 417+ B838 9C 48        	defw 18588
 418+ B83A 9D 48        	defw 18589
 419+ B83C 9E 48        	defw 18590
 420+ B83E 9F 48        	defw 18591
 421+ B840 A0 48        	defw 18592
 422+ B842 A1 48        	defw 18593
 423+ B844 A2 48        	defw 18594
 424+ B846 A3 48        	defw 18595
 425+ B848 A4 48        	defw 18596
 426+ B84A A5 48        	defw 18597
 427+ B84C A6 48        	defw 18598
 428+ B84E A7 48        	defw 18599
 429+ B850 A8 48        	defw 18600
 430+ B852 A9 48        	defw 18601
 431+ B854 AA 48        	defw 18602
 432+ B856 AB 48        	defw 18603
 433+ B858 AC 48        	defw 18604
 434+ B85A AD 48        	defw 18605
 435+ B85C AE 48        	defw 18606
 436+ B85E AF 48        	defw 18607
 437+ B860 B0 48        	defw 18608
 438+ B862 B1 48        	defw 18609
 439+ B864 B2 48        	defw 18610
 440+ B866 B3 48        	defw 18611
 441+ B868 B4 48        	defw 18612
 442+ B86A B5 48        	defw 18613
 443+ B86C B6 48        	defw 18614
 444+ B86E B7 48        	defw 18615
 445+ B870 B8 48        	defw 18616
 446+ B872 B9 48        	defw 18617
 447+ B874 BA 48        	defw 18618
 448+ B876 BB 48        	defw 18619
 449+ B878 BC 48        	defw 18620
 450+ B87A BD 48        	defw 18621
 451+ B87C BE 48        	defw 18622
 452+ B87E BF 48        	defw 18623
 453+ B880 C0 48        	defw 18624
 454+ B882 C1 48        	defw 18625
 455+ B884 C2 48        	defw 18626
 456+ B886 C3 48        	defw 18627
 457+ B888 C4 48        	defw 18628
 458+ B88A C5 48        	defw 18629
 459+ B88C C6 48        	defw 18630
 460+ B88E C7 48        	defw 18631
 461+ B890 C8 48        	defw 18632
 462+ B892 C9 48        	defw 18633
 463+ B894 CA 48        	defw 18634
 464+ B896 CB 48        	defw 18635
 465+ B898 CC 48        	defw 18636
 466+ B89A CD 48        	defw 18637
 467+ B89C CE 48        	defw 18638
 468+ B89E CF 48        	defw 18639
 469+ B8A0 D0 48        	defw 18640
 470+ B8A2 D1 48        	defw 18641
 471+ B8A4 D2 48        	defw 18642
 472+ B8A6 D3 48        	defw 18643
 473+ B8A8 D4 48        	defw 18644
 474+ B8AA D5 48        	defw 18645
 475+ B8AC D6 48        	defw 18646
 476+ B8AE D7 48        	defw 18647
 477+ B8B0 D8 48        	defw 18648
 478+ B8B2 D9 48        	defw 18649
 479+ B8B4 DA 48        	defw 18650
 480+ B8B6 DB 48        	defw 18651
 481+ B8B8 DC 48        	defw 18652
 482+ B8BA DD 48        	defw 18653
 483+ B8BC DE 48        	defw 18654
 484+ B8BE DF 48        	defw 18655
 485+ B8C0 E0 48        	defw 18656
 486+ B8C2 E1 48        	defw 18657
 487+ B8C4 E2 48        	defw 18658
 488+ B8C6 E3 48        	defw 18659
 489+ B8C8 E4 48        	defw 18660
 490+ B8CA E5 48        	defw 18661
 491+ B8CC E6 48        	defw 18662
 492+ B8CE E7 48        	defw 18663
 493+ B8D0 E8 48        	defw 18664
 494+ B8D2 E9 48        	defw 18665
 495+ B8D4 EA 48        	defw 18666
 496+ B8D6 EB 48        	defw 18667
 497+ B8D8 EC 48        	defw 18668
 498+ B8DA ED 48        	defw 18669
 499+ B8DC EE 48        	defw 18670
 500+ B8DE EF 48        	defw 18671
 501+ B8E0 F0 48        	defw 18672
 502+ B8E2 F1 48        	defw 18673
 503+ B8E4 F2 48        	defw 18674
 504+ B8E6 F3 48        	defw 18675
 505+ B8E8 F4 48        	defw 18676
 506+ B8EA F5 48        	defw 18677
 507+ B8EC F6 48        	defw 18678
 508+ B8EE F7 48        	defw 18679
 509+ B8F0 F8 48        	defw 18680
 510+ B8F2 F9 48        	defw 18681
 511+ B8F4 FA 48        	defw 18682
 512+ B8F6 FB 48        	defw 18683
 513+ B8F8 FC 48        	defw 18684
 514+ B8FA FD 48        	defw 18685
 515+ B8FC FE 48        	defw 18686
 516+ B8FE FF 48        	defw 18687
 517+ B900 00 50        	defw 20480
 518+ B902 01 50        	defw 20481
 519+ B904 02 50        	defw 20482
 520+ B906 03 50        	defw 20483
 521+ B908 04 50        	defw 20484
 522+ B90A 05 50        	defw 20485
 523+ B90C 06 50        	defw 20486
 524+ B90E 07 50        	defw 20487
 525+ B910 08 50        	defw 20488
 526+ B912 09 50        	defw 20489
 527+ B914 0A 50        	defw 20490
 528+ B916 0B 50        	defw 20491
 529+ B918 0C 50        	defw 20492
 530+ B91A 0D 50        	defw 20493
 531+ B91C 0E 50        	defw 20494
 532+ B91E 0F 50        	defw 20495
 533+ B920 10 50        	defw 20496
 534+ B922 11 50        	defw 20497
 535+ B924 12 50        	defw 20498
 536+ B926 13 50        	defw 20499
 537+ B928 14 50        	defw 20500
 538+ B92A 15 50        	defw 20501
 539+ B92C 16 50        	defw 20502
 540+ B92E 17 50        	defw 20503
 541+ B930 18 50        	defw 20504
 542+ B932 19 50        	defw 20505
 543+ B934 1A 50        	defw 20506
 544+ B936 1B 50        	defw 20507
 545+ B938 1C 50        	defw 20508
 546+ B93A 1D 50        	defw 20509
 547+ B93C 1E 50        	defw 20510
 548+ B93E 1F 50        	defw 20511
 549+ B940 20 50        	defw 20512
 550+ B942 21 50        	defw 20513
 551+ B944 22 50        	defw 20514
 552+ B946 23 50        	defw 20515
 553+ B948 24 50        	defw 20516
 554+ B94A 25 50        	defw 20517
 555+ B94C 26 50        	defw 20518
 556+ B94E 27 50        	defw 20519
 557+ B950 28 50        	defw 20520
 558+ B952 29 50        	defw 20521
 559+ B954 2A 50        	defw 20522
 560+ B956 2B 50        	defw 20523
 561+ B958 2C 50        	defw 20524
 562+ B95A 2D 50        	defw 20525
 563+ B95C 2E 50        	defw 20526
 564+ B95E 2F 50        	defw 20527
 565+ B960 30 50        	defw 20528
 566+ B962 31 50        	defw 20529
 567+ B964 32 50        	defw 20530
 568+ B966 33 50        	defw 20531
 569+ B968 34 50        	defw 20532
 570+ B96A 35 50        	defw 20533
 571+ B96C 36 50        	defw 20534
 572+ B96E 37 50        	defw 20535
 573+ B970 38 50        	defw 20536
 574+ B972 39 50        	defw 20537
 575+ B974 3A 50        	defw 20538
 576+ B976 3B 50        	defw 20539
 577+ B978 3C 50        	defw 20540
 578+ B97A 3D 50        	defw 20541
 579+ B97C 3E 50        	defw 20542
 580+ B97E 3F 50        	defw 20543
 581+ B980 40 50        	defw 20544
 582+ B982 41 50        	defw 20545
 583+ B984 42 50        	defw 20546
 584+ B986 43 50        	defw 20547
 585+ B988 44 50        	defw 20548
 586+ B98A 45 50        	defw 20549
 587+ B98C 46 50        	defw 20550
 588+ B98E 47 50        	defw 20551
 589+ B990 48 50        	defw 20552
 590+ B992 49 50        	defw 20553
 591+ B994 4A 50        	defw 20554
 592+ B996 4B 50        	defw 20555
 593+ B998 4C 50        	defw 20556
 594+ B99A 4D 50        	defw 20557
 595+ B99C 4E 50        	defw 20558
 596+ B99E 4F 50        	defw 20559
 597+ B9A0 50 50        	defw 20560
 598+ B9A2 51 50        	defw 20561
 599+ B9A4 52 50        	defw 20562
 600+ B9A6 53 50        	defw 20563
 601+ B9A8 54 50        	defw 20564
 602+ B9AA 55 50        	defw 20565
 603+ B9AC 56 50        	defw 20566
 604+ B9AE 57 50        	defw 20567
 605+ B9B0 58 50        	defw 20568
 606+ B9B2 59 50        	defw 20569
 607+ B9B4 5A 50        	defw 20570
 608+ B9B6 5B 50        	defw 20571
 609+ B9B8 5C 50        	defw 20572
 610+ B9BA 5D 50        	defw 20573
 611+ B9BC 5E 50        	defw 20574
 612+ B9BE 5F 50        	defw 20575
 613+ B9C0 60 50        	defw 20576
 614+ B9C2 61 50        	defw 20577
 615+ B9C4 62 50        	defw 20578
 616+ B9C6 63 50        	defw 20579
 617+ B9C8 64 50        	defw 20580
 618+ B9CA 65 50        	defw 20581
 619+ B9CC 66 50        	defw 20582
 620+ B9CE 67 50        	defw 20583
 621+ B9D0 68 50        	defw 20584
 622+ B9D2 69 50        	defw 20585
 623+ B9D4 6A 50        	defw 20586
 624+ B9D6 6B 50        	defw 20587
 625+ B9D8 6C 50        	defw 20588
 626+ B9DA 6D 50        	defw 20589
 627+ B9DC 6E 50        	defw 20590
 628+ B9DE 6F 50        	defw 20591
 629+ B9E0 70 50        	defw 20592
 630+ B9E2 71 50        	defw 20593
 631+ B9E4 72 50        	defw 20594
 632+ B9E6 73 50        	defw 20595
 633+ B9E8 74 50        	defw 20596
 634+ B9EA 75 50        	defw 20597
 635+ B9EC 76 50        	defw 20598
 636+ B9EE 77 50        	defw 20599
 637+ B9F0 78 50        	defw 20600
 638+ B9F2 79 50        	defw 20601
 639+ B9F4 7A 50        	defw 20602
 640+ B9F6 7B 50        	defw 20603
 641+ B9F8 7C 50        	defw 20604
 642+ B9FA 7D 50        	defw 20605
 643+ B9FC 7E 50        	defw 20606
 644+ B9FE 7F 50        	defw 20607
 645+ BA00 80 50        	defw 20608
 646+ BA02 81 50        	defw 20609
 647+ BA04 82 50        	defw 20610
 648+ BA06 83 50        	defw 20611
 649+ BA08 84 50        	defw 20612
 650+ BA0A 85 50        	defw 20613
 651+ BA0C 86 50        	defw 20614
 652+ BA0E 87 50        	defw 20615
 653+ BA10 88 50        	defw 20616
 654+ BA12 89 50        	defw 20617
 655+ BA14 8A 50        	defw 20618
 656+ BA16 8B 50        	defw 20619
 657+ BA18 8C 50        	defw 20620
 658+ BA1A 8D 50        	defw 20621
 659+ BA1C 8E 50        	defw 20622
 660+ BA1E 8F 50        	defw 20623
 661+ BA20 90 50        	defw 20624
 662+ BA22 91 50        	defw 20625
 663+ BA24 92 50        	defw 20626
 664+ BA26 93 50        	defw 20627
 665+ BA28 94 50        	defw 20628
 666+ BA2A 95 50        	defw 20629
 667+ BA2C 96 50        	defw 20630
 668+ BA2E 97 50        	defw 20631
 669+ BA30 98 50        	defw 20632
 670+ BA32 99 50        	defw 20633
 671+ BA34 9A 50        	defw 20634
 672+ BA36 9B 50        	defw 20635
 673+ BA38 9C 50        	defw 20636
 674+ BA3A 9D 50        	defw 20637
 675+ BA3C 9E 50        	defw 20638
 676+ BA3E 9F 50        	defw 20639
 677+ BA40 A0 50        	defw 20640
 678+ BA42 A1 50        	defw 20641
 679+ BA44 A2 50        	defw 20642
 680+ BA46 A3 50        	defw 20643
 681+ BA48 A4 50        	defw 20644
 682+ BA4A A5 50        	defw 20645
 683+ BA4C A6 50        	defw 20646
 684+ BA4E A7 50        	defw 20647
 685+ BA50 A8 50        	defw 20648
 686+ BA52 A9 50        	defw 20649
 687+ BA54 AA 50        	defw 20650
 688+ BA56 AB 50        	defw 20651
 689+ BA58 AC 50        	defw 20652
 690+ BA5A AD 50        	defw 20653
 691+ BA5C AE 50        	defw 20654
 692+ BA5E AF 50        	defw 20655
 693+ BA60 B0 50        	defw 20656
 694+ BA62 B1 50        	defw 20657
 695+ BA64 B2 50        	defw 20658
 696+ BA66 B3 50        	defw 20659
 697+ BA68 B4 50        	defw 20660
 698+ BA6A B5 50        	defw 20661
 699+ BA6C B6 50        	defw 20662
 700+ BA6E B7 50        	defw 20663
 701+ BA70 B8 50        	defw 20664
 702+ BA72 B9 50        	defw 20665
 703+ BA74 BA 50        	defw 20666
 704+ BA76 BB 50        	defw 20667
 705+ BA78 BC 50        	defw 20668
 706+ BA7A BD 50        	defw 20669
 707+ BA7C BE 50        	defw 20670
 708+ BA7E BF 50        	defw 20671
 709+ BA80 C0 50        	defw 20672
 710+ BA82 C1 50        	defw 20673
 711+ BA84 C2 50        	defw 20674
 712+ BA86 C3 50        	defw 20675
 713+ BA88 C4 50        	defw 20676
 714+ BA8A C5 50        	defw 20677
 715+ BA8C C6 50        	defw 20678
 716+ BA8E C7 50        	defw 20679
 717+ BA90 C8 50        	defw 20680
 718+ BA92 C9 50        	defw 20681
 719+ BA94 CA 50        	defw 20682
 720+ BA96 CB 50        	defw 20683
 721+ BA98 CC 50        	defw 20684
 722+ BA9A CD 50        	defw 20685
 723+ BA9C CE 50        	defw 20686
 724+ BA9E CF 50        	defw 20687
 725+ BAA0 D0 50        	defw 20688
 726+ BAA2 D1 50        	defw 20689
 727+ BAA4 D2 50        	defw 20690
 728+ BAA6 D3 50        	defw 20691
 729+ BAA8 D4 50        	defw 20692
 730+ BAAA D5 50        	defw 20693
 731+ BAAC D6 50        	defw 20694
 732+ BAAE D7 50        	defw 20695
 733+ BAB0 D8 50        	defw 20696
 734+ BAB2 D9 50        	defw 20697
 735+ BAB4 DA 50        	defw 20698
 736+ BAB6 DB 50        	defw 20699
 737+ BAB8 DC 50        	defw 20700
 738+ BABA DD 50        	defw 20701
 739+ BABC DE 50        	defw 20702
 740+ BABE DF 50        	defw 20703
 741+ BAC0 E0 50        	defw 20704
 742+ BAC2 E1 50        	defw 20705
 743+ BAC4 E2 50        	defw 20706
 744+ BAC6 E3 50        	defw 20707
 745+ BAC8 E4 50        	defw 20708
 746+ BACA E5 50        	defw 20709
 747+ BACC E6 50        	defw 20710
 748+ BACE E7 50        	defw 20711
 749+ BAD0 E8 50        	defw 20712
 750+ BAD2 E9 50        	defw 20713
 751+ BAD4 EA 50        	defw 20714
 752+ BAD6 EB 50        	defw 20715
 753+ BAD8 EC 50        	defw 20716
 754+ BADA ED 50        	defw 20717
 755+ BADC EE 50        	defw 20718
 756+ BADE EF 50        	defw 20719
 757+ BAE0 F0 50        	defw 20720
 758+ BAE2 F1 50        	defw 20721
 759+ BAE4 F2 50        	defw 20722
 760+ BAE6 F3 50        	defw 20723
 761+ BAE8 F4 50        	defw 20724
 762+ BAEA F5 50        	defw 20725
 763+ BAEC F6 50        	defw 20726
 764+ BAEE F7 50        	defw 20727
 765+ BAF0 F8 50        	defw 20728
 766+ BAF2 F9 50        	defw 20729
 767+ BAF4 FA 50        	defw 20730
 768+ BAF6 FB 50        	defw 20731
 769+ BAF8 FC 50        	defw 20732
 770+ BAFA FD 50        	defw 20733
 771+ BAFC FE 50        	defw 20734
 772+ BAFE FF 50        	defw 20735
 773+ BB00
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/address.asm
2956  BB00
2957  BB00              	org 0bb00h
2958  BB00              ; when calculating the offset, use this row number (used to convert row to offset)
2959  BB00              row_number_lookup
2960  BB00
2961  BB00 00 00                  defw 0000h
2962  BB02 20 00                  defw 0020h
2963  BB04 40 00                  defw 0040h
2964  BB06 60 00                  defw 0060h
2965  BB08
2966  BB08 80 00                  defw 0080h
2967  BB0A A0 00                  defw 00a0h
2968  BB0C C0 00                  defw 00c0h
2969  BB0E E0 00                  defw 00e0h
2970  BB10
2971  BB10 00 01                  defw 0100h
2972  BB12 20 01                  defw 0120h
2973  BB14 40 01                  defw 0140h
2974  BB16 60 01                  defw 0160h
2975  BB18
2976  BB18 80 01                  defw 0180h
2977  BB1A A0 01                  defw 01a0h
2978  BB1C C0 01                  defw 01c0h
2979  BB1E E0 01                  defw 01e0h
2980  BB20
2981  BB20 00 02                  defw 0200h
2982  BB22 20 02                  defw 0220h
2983  BB24 40 02                  defw 0240h
2984  BB26 60 02                  defw 0260h
2985  BB28
2986  BB28 80 02                  defw 0280h
2987  BB2A A0 02                  defw 02a0h
2988  BB2C C0 02                  defw 02c0h
2989  BB2E E0 02                  defw 02e0h
2990  BB30
2991  BB30              	org $bc00
2992  BC00              jumppattern:
2993  BC00              ;                this works, any alteration breaks it, i don't know why yet
2994  BC00 FF FF FF FF  	defb            -1,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,0,0,0
2994  BC04 FF FF 00 00
2994  BC08 00 00 00 01
2994  BC0C 01 01 00 00
2994  BC10 00
2995  BC11
2996  BC11              ; this routine now needs to be at a specific address (remember we only have from $fcfc to $fe00 else we will overwrite our table)
2997  BC11                            org           $bcbc
2998  BCBC              ; basically nothing
2999  BCBC              im2routine:
3000  BCBC F5                         push          af
3001  BCBD E5                         push          hl
3002  BCBE C5                         push          bc
3003  BCBF D5                         push          de
3004  BCC0 DD E5                      push          ix
3005  BCC2 FD E5                      push          iy
3006  BCC4 D9                         exx
3007  BCC5 08                         ex af,af'
3008  BCC6 F5                         push          af
3009  BCC7 E5                         push          hl
3010  BCC8 C5                         push          bc
3011  BCC9 D5                         push          de
3012  BCCA
3013  BCCA CD E5 81                   call PLY_AKM_PLAY
3014  BCCD
3015  BCCD D1                         pop           de
3016  BCCE C1                         pop           bc
3017  BCCF E1                         pop           hl
3018  BCD0 F1                         pop           af
3019  BCD1 08                         ex af,af'
3020  BCD2 D9                         exx
3021  BCD3 FD E1                      pop           iy
3022  BCD5 DD E1                      pop           ix
3023  BCD7 D1                         pop           de
3024  BCD8 C1                         pop           bc
3025  BCD9 E1                         pop           hl
3026  BCDA F1                         pop           af
3027  BCDB
3028  BCDB FB                         ei
3029  BCDC ED 4D                      reti
3030  BCDE
3031  BCDE              ; make sure this is on a 256 byte boundary
3032  BCDE                            org           $be00
3033  BE00              im2table:
3034  BE00 00 00 00...                defs          257
3035  BF01
3036  BF01
3037  BF01              ;sprite_unex_0 equ $c000
3038  BF01              ;sprite_unex_1 equ $c000+(144*4)
3039  BF01              sprites equ $c000
3040  BF01              enemy_sprites equ sprites+sprite_size
3041  BF01              keystocollect equ $c100
3042  BF01              bg_chars equ $c200
3043  BF01              bg_chars_attrs equ $c600
3044  BF01              blox equ $c700
3045  BF01              ; the main buffer, cleared every loop to tell what needs updating
3046  BF01              ; if it is 0 then the char is ignored
3047  BF01              update_buffer:                equ $c800
3048  BF01
3049  BF01              ; the background buffer, read only, contains characters in that appear on the background.
3050  BF01              ; if bit 7 is set then it is drawn in the foreground
3051  BF01              bg_buffer:                   equ $c800+768
3052  BF01
3053  BF01              ;  note: it is best to fill with colour of sprites, less flicker
3054  BF01              back_colour_buffer:           equ $c800+768+768
3055  BF01
3056  BF01              ; char buffer for each sprite, up to 6
3057  BF01
3058  BF01              ; sprite buffer 1 is used by the player
3059  BF01              sprite_buffer_1:             equ $c800+768+768+768
3060  BF01
3061  BF01              ; others are used by sprites (1-2)
3062  BF01              sprite_buffer_2:             equ $c800+768+768+768+768
3063  BF01              sprite_buffer_3:             equ $c800+768+768+768+768+768
3064  BF01
3065  BF01              scratch equ $da00
3066  BF01              keygfx equ $da00+8
3067  BF01              screens equ $f300
3068  BF01              sprite_expand_1 equ $db00
3069  BF01              sprite_expand_2 equ $e700
3070  BF01
3071  BF01
3072  BF01
3073  BF01              	page 0
3074  BF01              	ORG $c000
3075  C000              showmenu:
3076  C000
3077  C000 CD 52 95          call cls
3078  C003 CD 26 8D          call menu
3079  C006
3080  C006 FE 0D             cp key_r
3081  C008 CC 4C 8D          call z,redefine
3082  C00B
3083  C00B FE 24             cp key_1
3084  C00D 20 05             jr nz,sm2
3085  C00F 3E 01             ld a,world1                   ; Bank 1 contains level 1 (Although in game, 0 will have big demo)
3086  C011
3087  C011 C3 EF 8B          jp start
3088  C014
3089  C014              sm2:
3090  C014 FE 1C             cp key_2
3091  C016 20 05             jr nz,sm3
3092  C018 3E 03             ld a,world2                   ; Bank 1 contains level 1 (Although in game, 0 will have big demo)
3093  C01A
3094  C01A C3 EF 8B          jp start
3095  C01D              sm3:
3096  C01D FE 10             cp key_m
3097  C01F C2 E5 8B          jp nz,begin
3098  C022
3099  C022 3A 07 89          ld a,(musicon)
3100  C025 EE 01             xor 1
3101  C027 32 07 89          ld (musicon),a
3102  C02A
3103  C02A                   ; if we want silent music then create a looped silence as a song
3104  C02A
3105  C02A C3 E5 8B          jp begin
3106  C02D
3107  C02D
3108  C02D
3109  C02D              	page 1
3110  C02D              	ORG $c000
3111  C000              	include "world01.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/world01.asm
   1+ C000
   2+ C000
   3+ C000              	org sprites
   4+ C000
   5+ C000              	; ****************************************************************************
   6+ C000
   7+ C000              	; sprites
   8+ C000
   9+ C000              	; only move vertically 1 char, but give illusion of horizonal smoothness
  10+ C000              	; in gfx
  11+ C000              	;sprites:
  12+ C000
  13+ C000              	;       player
  14+ C000              	;       ======
  15+ C000
  16+ C000 01           	defb 1                 ; 0  active/pause before move to reset to
  17+ C001 06           	defb 6                 ; 1  xpos
  18+ C002 00           	defb 0                 ; 2  ypos
  19+ C003 0C           	defb 12                ; 3  anim frame offset
  20+ C004 00           	defb 0                 ; 4  move counter (reset when=4)
  21+ C005 00           	defb 0                 ; 5  ymove
  22+ C006 03           	defb 3                 ; 6  height
  23+ C007 FF           	defb -1                ; 7  direction (1=right,-1 left)
  24+ C008 01           	defb 1                 ; 8  move offset (ro)
  25+ C009 00           	defb 0                 ; 9 anim offset (ro)
  26+ C00A 1E           	defb 30                ; 10 xmax
  27+ C00B 00           	defb 0                 ; 11 xmin
  28+ C00C 00 D1        	defw sprite_buffer_1   ; 12 sprite buffer
  29+ C00E A7           	defb player_gfx/256   ; 14 bank
  30+ C00F 06           	defb 06h                ; 15 bank difference to add/subtract (e.g difference between bank2 (bc00) and bank1 (b100) = 3k (768 bytes, 96 chars)
  31+ C010              							; 96 = 12*8 (4 for each frame left and right)
  32+ C010 05           	defb 5                 ; 16 counter to change bank, i.e. frame of animation
  33+ C011 04           	defb 4                 ; 17 reset value for bank change
  34+ C012 30           	defb 48                ; 18 image frame difference to add on max/min (12 chars * 4 frames) when
  35+ C013              						;    changing direction
  36+ C013 45           	defb %01000101         ; 19 colour
  37+ C014
  38+ C014              	;enemy_sprites:
  39+ C014
  40+ C014 00 00 00...  	defs sprite_size*7,0
  41+ C0A0
  42+ C0A0
  43+ C0A0
  44+ C0A0              	org keystocollect
  45+ C100
  46+ C100 08           				defb 8      ; number of keys
  47+ C101              	; screen, x, y, enabled
  48+ C101              	;keystocollect:
  49+ C101              	; Need to change to Screen,X,Y,Enabled,Lock Screen,X,Y,Locked/Unlocked
  50+ C101              	; So we could have 32 Key/Door combinations per world
  51+ C101              	; Then we copy to area 8000-c000 so we can update during game
  52+ C101
  53+ C101 00 0F 0A 01  				defb 0,15,10,1,1,10,10,1
  53+ C105 01 0A 0A 01
  54+ C109 00 11 0A 01  				defb 0,17,10,1,0,0,0,0
  54+ C10D 00 00 00 00
  55+ C111 00 13 0A 01  				defb 0,19,10,1,0,0,0,0
  55+ C115 00 00 00 00
  56+ C119 00 15 0A 01  				defb 0,21,10,1,0,0,0,0
  56+ C11D 00 00 00 00
  57+ C121
  58+ C121 01 06 10 01  				defb 1,6,16,1,0,0,0,0
  58+ C125 00 00 00 00
  59+ C129 01 08 12 01  				defb 1,8,18,1,0,0,0,0
  59+ C12D 00 00 00 00
  60+ C131 01 0A 10 01  				defb 1,10,16,1,0,0,0,0
  60+ C135 00 00 00 00
  61+ C139 01 0C 12 01  				defb 1,12,18,1,0,0,0,0
  61+ C13D 00 00 00 00
  62+ C141              	; ****************************************************************************
  63+ C141              	; graphics (background)
  64+ C141
  65+ C141              	; 1k (128 chars)
  66+ C141              	org bg_chars
  67+ C200
  68+ C200              			include "includes/bgchars.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgchars.asm
   1++C200
   2++C200              	; ASM source file created by SevenuP v1.20
   3++C200              	; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   4++C200
   5++C200              	;GRAPHIC DATA:
   6++C200              	;Pixel Size:      ( 16,  16)
   7++C200              	;Char Size:       (  2,   2)
   8++C200              	;Sort Priorities: Char line, X char, Y char
   9++C200              	;Data Outputted:  Gfx+Attr
  10++C200              	;Interleave:      Frames
  11++C200              	;Mask:            No
  12++C200
  13++C200              	; block
  14++C200 00 FA FC FA  	defb   0, 250, 252, 250, 252, 250, 252, 250  ; char block [0, 0]
  14++C204 FC FA FC FA
  15++C208 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 0]
  15++C20C FF FF FF FF
  16++C210 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  16++C214 FF FF FF FF
  17++C218 00 FD FE FD  	defb   0, 253, 254, 253, 254, 253, 254, 253  ; char block [1, 1]
  17++C21C FE FD FE FD
  18++C220
  19++C220              	; Step
  20++C220 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 0]
  20++C224 FF FF FF FF
  21++C228 00 F8 FC FE  	defb   0, 248, 252, 254, 254, 254, 254, 254  ; char block [1, 0]
  21++C22C FE FE FE FE
  22++C230 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  22++C234 FF FF FF FF
  23++C238 FE FE FE FE  	defb 254, 254, 254, 254, 254, 254, 254, 254  ; char block [1, 1]
  23++C23C FE FE FE FE
  24++C240              	; StepBody:
  25++C240
  26++C240 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 0]
  26++C244 FF FF FF FF
  27++C248 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 0]
  27++C24C FF FF FF FF
  28++C250 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  28++C254 FF FF FF FF
  29++C258 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 1]
  29++C25C FF FF FF FF
  30++C260              	;Grass:
  31++C260
  32++C260 00 6D 45 E5  	defb   0, 109,  69, 229, 255, 255, 239, 239  ; char block [0, 0]
  32++C264 FF FF EF EF
  33++C268 36 A4 3E FE  	defb  54, 164,  62, 254, 255, 239, 239, 239  ; char block [1, 0]
  33++C26C FF EF EF EF
  34++C270 EF FD 29 AF  	defb 239, 253,  41, 175, 174, 174, 239, 255  ; char block [0, 1]
  34++C274 AE AE EF FF
  35++C278 EF FE BE B6  	defb 239, 254, 190, 182, 180, 183, 247, 255  ; char block [1, 1]
  35++C27C B4 B7 F7 FF
  36++C280
  37++C280              	;Earth:
  38++C280
  39++C280 00 7C 7E 7E  	defb   0, 124, 126, 126, 126, 126,  62,   0  ; char block [0, 0]
  39++C284 7E 7E 3E 00
  40++C288 FF 83 81 81  	defb 255, 131, 129, 129, 129, 129, 193, 255  ; char block [1, 0]
  40++C28C 81 81 C1 FF
  41++C290 FF 83 81 81  	defb 255, 131, 129, 129, 129, 129, 193, 255  ; char block [0, 1]
  41++C294 81 81 C1 FF
  42++C298 00 7C 7E 7E  	defb   0, 124, 126, 126, 126, 126,  62,   0  ; char block [1, 1]
  42++C29C 7E 7E 3E 00
  43++C2A0
  44++C2A0              	;Fence1:
  45++C2A0
  46++C2A0 57 37 57 37  	defb  87,  55,  87,  55,  87,  55,  87,  55  ; char block [0, 0]
  46++C2A4 57 37 57 37
  47++C2A8 EF 6F 7D 7D  	defb 239, 111, 125, 125, 255, 247, 247, 247  ; char block [1, 0]
  47++C2AC FF F7 F7 F7
  48++C2B0 5F 3F 5F 3F  	defb  95,  63,  95,  63,  87,  55,  87,  55  ; char block [0, 1]
  48++C2B4 57 37 57 37
  49++C2B8 7F 7F 7F 7D  	defb 127, 127, 127, 125, 109, 109, 109, 239  ; char block [1, 1]
  49++C2BC 6D 6D 6D EF
  50++C2C0
  51++C2C0              	; Sky:
  52++C2C0
  53++C2C0 FF FF FF...  	defs 32,255
  54++C2E0
  55++C2E0              	; Tunnel
  56++C2E0 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [0, 0]
  56++C2E4 01 00 00 00
  57++C2E8 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [1, 0]
  57++C2EC C0 E0 70 38
  58++C2F0 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [0, 1]
  58++C2F4 C0 E0 70 38
  59++C2F8 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [1, 1]
  59++C2FC 01 00 00 00
  60++C300
  61++C300              	; Fence Block
  62++C300 00 3F 57 37  	defb   0,  63,  87,  55,  87,  55,  93,   0  ; char block [0, 0]
  62++C304 57 37 5D 00
  63++C308 00 6E 7C 7C  	defb   0, 110, 124, 124, 254, 246, 246,   0  ; char block [1, 0]
  63++C30C FE F6 F6 00
  64++C310 55 2A 5F 3F  	defb  85,  42,  95,  63,  87,  55,  87,  55  ; char block [0, 1]
  64++C314 57 37 57 37
  65++C318 55 2A 7F 7D  	defb  85,  42, 127, 125, 109, 109, 109, 239  ; char block [1, 1]
  65++C31C 6D 6D 6D EF
  66++C320
  67++C320              	; Cave Wall
  68++C320
  69++C320 00 00 00 00  	defb   0,   0,   0,   0,   0,  32,   0,   0  ; char block [0, 0]
  69++C324 00 20 00 00
  70++C328 00 00 80 00  	defb   0,   0, 128,   0,   0,   2,   0,   0  ; char block [1, 0]
  70++C32C 00 02 00 00
  71++C330 00 00 10 00  	defb   0,   0,  16,   0,   0,   0,   0,   0  ; char block [0, 1]
  71++C334 00 00 00 00
  72++C338 00 00 00 00  	defb   0,   0,   0,   0,   0,   0,  32,   0  ; char block [1, 1]
  72++C33C 00 00 20 00
  73++C340
  74++C340              	; Cage
  75++C340 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [0, 0]
  75++C344 01 00 00 00
  76++C348 7A 7C 7A 7C  	defb 122, 124, 122, 124, 122, 124, 122, 124  ; char block [1, 0]
  76++C34C 7A 7C 7A 7C
  77++C350 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [0, 1]
  77++C354 C0 E0 70 38
  78++C358 7A 7C 7A 7C  	defb 122, 124, 122, 124, 122, 124, 122, 124  ; char block [1, 1]
  78++C35C 7A 7C 7A 7C
  79++C360
  80++C360
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgchars.asm
  69+ C360
  70+ C360              	org bg_chars_attrs
  71+ C600
  72+ C600
  73+ C600              			include "includes/bgattrs.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgattrs.asm
   1++C600              	; block
   2++C600 82 82        	defb   2+128,   2+128
   3++C602 82 82        	defb   2+128,   2+128
   4++C604              	; step
   5++C604 87 87        	defb   7+128,   7+128
   6++C606 07 07        	defb   7,   7
   7++C608              	; step body
   8++C608 87 87        	defb   7+128,   7+128
   9++C60A 07 07        	defb   7,   7
  10++C60C
  11++C60C              	; grass
  12++C60C 44 44        	defb  68,  68
  13++C60E 04 04        	defb   4,   4
  14++C610
  15++C610              	; earth
  16++C610 96 A9        	defb  22+128,  41+128
  17++C612 A9 96        	defb  41+128,  22+128
  18++C614
  19++C614              	; fence1
  20++C614 46 46        	defb  70,  70
  21++C616 46 46        	defb  70,  70
  22++C618
  23++C618              	; sky
  24++C618 45           	defb %01000101
  25++C619 45           	defb %01000101
  26++C61A 45           	defb %01000101
  27++C61B 45           	defb %01000101
  28++C61C
  29++C61C              	; Tunnel
  30++C61C 45 45 45 45  	defb 69,69,69,69
  31++C620
  32++C620              	; Fence Block
  33++C620 C6 C6 06 06  	defb 70+128,70+128,%00000110,%00000110
  34++C624
  35++C624              	; Cave Wall
  36++C624 07 07 07 07  	defb 7,7,7,7
  37++C628
  38++C628              	; Cage
  39++C628              	;defb   0,  79
  40++C628              	;defb   0,  79
  41++C628
  42++C628 45 13 45 13  	defb 69,19,69,19
  43++C62C
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgattrs.asm
  74+ C62C
  75+ C62C              	org blox
  76+ C700
  77+ C700 00           			defb $00
  78+ C701 01 02 03 04  			defb $01,$02,$03,$04
  79+ C705 05 06 07 08  			defb $05,$06,$07,$08
  80+ C709 09 0A 0B 8C  			defb $09,$0a,$0b,$0c+128
  81+ C70D 8D 8E 8F 10  			defb $0d+128,$0e+128,$0f+128,$10
  82+ C711 11 12 13 14  			defb $11,$12,$13,$14
  83+ C715 15 16 17 18  			defb $15,$16,$17,$18
  84+ C719 19 1A 1B 1C  			defb $19,$1a,$1b,$1c
  85+ C71D 1D 1E 1F 20  			defb $1d,$1e,$1f,$20
  86+ C721 21 22 23 24  			defb $21,$22,$23,$24
  87+ C725 25 26 27 28  			defb $25,$26,$27,$28
  88+ C729 A9 2A AB 2C  			defb $29+128,$2a,$2b+128,$2c
  89+ C72D
  90+ C72D
  91+ C72D              			;    player can jump up 2 blocks.
  92+ C72D              			;    always have blocks 2 spaces apart on height
  93+ C72D              			; can jump 3 blocks and up 1
  94+ C72D
  95+ C72D              			; you cannot jump  4 accross 2 up,
  96+ C72D              			; you can jump 3 accross 2 up, but not 3 up
  97+ C72D              			; you can jump 3 accross
  98+ C72D
  99+ C72D
 100+ C72D
 101+ C72D
 102+ C72D
 103+ C72D
 104+ C72D              	; 768 * 7 = 5376 = $1500
 105+ C72D              	org update_buffer
 106+ C800
 107+ C800 00 00 00...  			defs 768*6
 108+ DA00
 109+ DA00              	org scratch
 110+ DA00              	;scratch:
 111+ DA00 00 00 00...  		defs 8,0
 112+ DA08
 113+ DA08              	;keygfx:
 114+ DA08
 115+ DA08 FF           		defb %11111111
 116+ DA09 C3           		defb %11000011
 117+ DA0A 99           		defb %10011001
 118+ DA0B BD           		defb %10111101
 119+ DA0C BD           		defb %10111101
 120+ DA0D 99           		defb %10011001
 121+ DA0E C3           		defb %11000011
 122+ DA0F FF           		defb %11111111
 123+ DA10
 124+ DA10 FF           		defb %11111111
 125+ DA11 E7           		defb %11100111
 126+ DA12 DB           		defb %11011011
 127+ DA13 DB           		defb %11011011
 128+ DA14 DB           		defb %11011011
 129+ DA15 DB           		defb %11011011
 130+ DA16 E7           		defb %11100111
 131+ DA17 FF           		defb %11111111
 132+ DA18
 133+ DA18 FF           		defb %11111111
 134+ DA19 E7           		defb %11100111
 135+ DA1A E7           		defb %11100111
 136+ DA1B E7           		defb %11100111
 137+ DA1C E7           		defb %11100111
 138+ DA1D E7           		defb %11100111
 139+ DA1E E7           		defb %11100111
 140+ DA1F FF           		defb %11111111
 141+ DA20
 142+ DA20 FF           		defb %11111111
 143+ DA21 E7           		defb %11100111
 144+ DA22 DB           		defb %11011011
 145+ DA23 DB           		defb %11011011
 146+ DA24 DB           		defb %11011011
 147+ DA25 DB           		defb %11011011
 148+ DA26 E7           		defb %11100111
 149+ DA27 FF           		defb %11111111
 150+ DA28
 151+ DA28
 152+ DA28
 153+ DA28
 154+ DA28
 155+ DA28              		; storage area for expanded sprite
 156+ DA28              	; sprite is stored as a 3x3 image with mask, and is expanded to 4 shifted 4x3 images
 157+ DA28              	org sprite_expand_1
 158+ DB00
 159+ DB00 00 00 00...  				defs 300h
 160+ DE00 00 00 00...  				defs 300h
 161+ E100 00 00 00...  				defs 300h
 162+ E400 00 00 00...  				defs 300h
 163+ E700              	org sprite_expand_2
 164+ E700
 165+ E700 00 00 00...  				defs 300h
 166+ EA00 00 00 00...  				defs 300h
 167+ ED00 00 00 00...  				defs 300h
 168+ F000 00 00 00...  				defs 300h
 169+ F300
 170+ F300              	org screens
 171+ F300              	include "includes/screens01.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/screens01.asm
   1++F300              ; BANK 01 SCREENS
   2++F300              	org $f300
   3++F300
   4++F300 00 F4        	defw screen_world01_0
   5++F302 2E F4        	defw screen_world01_1
   6++F304 5F F4        	defw screen_world01_2
   7++F306 85 F4        	defw screen_world01_3
   8++F308 A4 F4        	defw screen_world01_4
   9++F30A B4 F4        	defw screen_world01_5
  10++F30C D7 F4        	defw screen_world01_6
  11++F30E E7 F4        	defw screen_world01_7
  12++F310 1E F5        	defw screen_world01_8
  13++F312 3D F5        	defw screen_world01_9
  14++F314 60 F5        	defw screen_world01_10
  15++F316 81 F5        	defw screen_world01_11
  16++F318 BB F5        	defw screen_world01_12
  17++F31A CB F5        	defw screen_world01_13
  18++F31C DB F5        	defw screen_world01_14
  19++F31E EB F5        	defw screen_world01_15
  20++F320 06 F6        	defw screen_world01_16
  21++F322
  22++F322 16 F6        	defw screen_world01_17
  23++F324 26 F6        	defw screen_world01_18
  24++F326 36 F6        	defw screen_world01_19
  25++F328 51 F6        	defw screen_world01_20
  26++F32A 61 F6        	defw screen_world01_21
  27++F32C 71 F6        	defw screen_world01_22
  28++F32E 81 F6        	defw screen_world01_23
  29++F330 9C F6        	defw screen_world01_24
  30++F332 AC F6        	defw screen_world01_25
  31++F334 BC F6        	defw screen_world01_26
  32++F336 CC F6        	defw screen_world01_27
  33++F338 E7 F6        	defw screen_world01_28
  34++F33A F7 F6        	defw screen_world01_29
  35++F33C 07 F7        	defw screen_world01_30
  36++F33E 17 F7        	defw screen_world01_31
  37++F340
  38++F340              	org $f400
  39++F400
  40++F400              screen_world01_0:
  41++F400              	include "../screens/world01/screen0.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen0.asm
   1++F400
   2++F400
   3++F400              		; sprite 1 graphics to expand
   4++F400 00 60        		defw sprite_unex_0
   5++F402
   6++F402              		; sprite 2 graphics to expand
   7++F402 40 62        		defw sprite_unex_1
   8++F404
   9++F404              		; read block number 1st (right most)
  10++F404              		; read quantity second
  11++F404
  12++F404              	; 2019: xxxx is zero based, so 0=1,15=16 blocks
  13++F404              	; yyyy is the zero based tile
  14++F404
  15++F404              	; xxxxyyyy
  16++F404
  17++F404 20           	defb %00100000
  18++F405 C6           	defb %11000110
  19++F406 10           	defb %00010000
  20++F407 D6           	defb %11010110
  21++F408 10           	defb %00010000
  22++F409 D6           	defb %11010110
  23++F40A 10           	defb %00010000
  24++F40B D6           	defb %11010110
  25++F40C 10           	defb %00010000
  26++F40D D5           	defb %11010101
  27++F40E 10           	defb %00010000
  28++F40F D5           	defb %11010101
  29++F410 10           	defb %00010000
  30++F411 D5           	defb %11010101
  31++F412 10           	defb %00010000
  32++F413 B5           	defb %10110101
  33++F414 08           	defb %00001000
  34++F415 05           	defb %00000101
  35++F416 10           	defb %00010000
  36++F417 01           	defb %00000001
  37++F418 02           	defb %00000010
  38++F419 01           	defb %00000001
  39++F41A A3           	defb %10100011
  40++F41B F4           	defb %11110100
  41++F41C FF           	defb %11111111
  42++F41D
  43++F41D
  44++F41D              	; sprites
  45++F41D
  46++F41D              	; no of sprites  (including player)
  47++F41D 03           	defb 3
  48++F41E
  49++F41E              	; colour (hb) and active pause (lb)
  50++F41E 51           	defb %01010001
  51++F41F              	; xpos /2 (hb) and ypos /2 (lb)
  52++F41F 1B           	defb %00011011
  53++F420              	; xmin /2 (hb) and xmax /2 (lb)
  54++F420 0E           	defb %00001110
  55++F421              	; sprite buffer
  56++F421 00 D4        	defw sprite_buffer_2
  57++F423              	; gfx
  58++F423 DB           	defb sprite_expand_1/256
  59++F424              	; bank count and reset (eg 5 and 5)
  60++F424              	; so the pause between animation fames
  61++F424 55           	defb %01010101
  62++F425              	; direction (1 or -1)
  63++F425 01           	defb %00000001
  64++F426
  65++F426              	; colour (hb) and active pause (lb)
  66++F426 55           	defb %01010101
  67++F427              	; xpos /2 (hb) and ypos /2 (lb)
  68++F427 7B           	defb %01111011
  69++F428              	; xmin /2 (hb) and xmax /2 (lb)
  70++F428 0E           	defb %00001110
  71++F429              	; sprite buffer
  72++F429 00 D7        	defw sprite_buffer_3
  73++F42B              	; gfx
  74++F42B E7           	defb sprite_expand_2/256
  75++F42C              	; bank count and reset (eg 5 and 5)
  76++F42C              	; so the pause between animation fames
  77++F42C 55           	defb %01010101
  78++F42D              	; direction (1 or -1)
  79++F42D 01           	defb %00000001
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen0.asm
  42++F42E              screen_world01_1:
  43++F42E              	include "../screens/world01/screen1.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen1.asm
   1++F42E
   2++F42E
   3++F42E              	; sprite 1 graphics to expand
   4++F42E 00 60        	defw sprite_unex_0
   5++F430
   6++F430              	; sprite 2 graphics to expand
   7++F430 40 62        	defw sprite_unex_1
   8++F432
   9++F432              	; read block number 1st (right most)
  10++F432              	; read quantity second
  11++F432
  12++F432 F6           	defb %11110110
  13++F433 F6           	defb %11110110
  14++F434 F6           	defb %11110110
  15++F435 F6           	defb %11110110
  16++F436 F5           	defb %11110101
  17++F437 15           	defb %00010101
  18++F438 50           	defb %01010000
  19++F439 85           	defb %10000101
  20++F43A 08           	defb %00001000
  21++F43B 00           	defb %00000000
  22++F43C 37           	defb %00110111
  23++F43D 00           	defb %00000000
  24++F43E 95           	defb %10010101
  25++F43F 00           	defb %00000000
  26++F440 37           	defb %00110111
  27++F441 00           	defb %00000000
  28++F442 55           	defb %01010101
  29++F443 08           	defb %00001000
  30++F444 05           	defb %00000101
  31++F445 13           	defb %00010011
  32++F446 00           	defb %00000000
  33++F447 37           	defb %00110111
  34++F448 00           	defb %00000000
  35++F449 73           	defb %01110011
  36++F44A
  37++F44A 24           	defb %00100100
  38++F44B 37           	defb %00110111
  39++F44C 84           	defb %10000100
  40++F44D
  41++F44D FF           	defb %11111111
  42++F44E
  43++F44E
  44++F44E
  45++F44E
  46++F44E
  47++F44E              	; sprites
  48++F44E
  49++F44E              	; no of sprites
  50++F44E 03           	defb 3
  51++F44F
  52++F44F              	; colour (hb) and active pause (lb)
  53++F44F 61           	defb %01100001
  54++F450              	; xpos /2 (hb) and ypos /2 (lb)
  55++F450              	; xxxx ypos xxxx xpos
  56++F450 1C           	defb %00011100
  57++F451              	; xmin /2 (hb) and xmax /2 (lb)
  58++F451 0E           	defb %00001110
  59++F452              	; sprite buffer
  60++F452 00 D4        	defw sprite_buffer_2
  61++F454              	; gfx
  62++F454 DB           	defb sprite_expand_1/256
  63++F455              	; bank count and reset (eg 5 and 5)
  64++F455 55           	defb %01010101
  65++F456              	; direction
  66++F456 01           	defb %00000001
  67++F457
  68++F457              	; colour (hb) and active pause (lb)
  69++F457 63           	defb %01100011
  70++F458              	; xpos /2 (hb) and ypos /2 (lb)
  71++F458              	; xxxx ypos xxxx xpos
  72++F458 33           	defb %00110011
  73++F459              	; xmin /2 (hb) and xmax /2 (lb)
  74++F459 26           	defb %00100110
  75++F45A              	; sprite buffer
  76++F45A 00 D7        	defw sprite_buffer_3
  77++F45C              	; gfx
  78++F45C E7           	defb sprite_expand_2/256
  79++F45D              	; bank count and reset (eg 5 and 5)
  80++F45D 55           	defb %01010101
  81++F45E              	; direction
  82++F45E 01           	defb %00000001
  83++F45F
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen1.asm
  44++F45F              screen_world01_2:
  45++F45F              	include "../screens/world01/screen2.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen2.asm
   1++F45F
   2++F45F
   3++F45F              		; sprite 1 graphics to expand
   4++F45F 00 60        		defw sprite_unex_0
   5++F461
   6++F461              		; sprite 2 graphics to expand
   7++F461 40 62        		defw sprite_unex_1
   8++F463
   9++F463              		; read block number 1st (right most)
  10++F463              		; read quantity second
  11++F463 D6           	defb %11010110
  12++F464 10           	defb %00010000
  13++F465 D6           	defb %11010110
  14++F466 10           	defb %00010000
  15++F467 D6           	defb %11010110
  16++F468 17           	defb %00010111
  17++F469 D6           	defb %11010110
  18++F46A 17           	defb %00010111
  19++F46B 85           	defb %10000101
  20++F46C 48           	defb %01001000
  21++F46D 10           	defb %00010000
  22++F46E 45           	defb %01000101
  23++F46F 08           	defb %00001000
  24++F470 75           	defb %01110101
  25++F471 10           	defb %00010000
  26++F472 15           	defb %00010101
  27++F473 08           	defb %00001000
  28++F474 A5           	defb %10100101
  29++F475 10           	defb %00010000
  30++F476 D5           	defb %11010101
  31++F477 10           	defb %00010000
  32++F478 D3           	defb %11010011
  33++F479 10           	defb %00010000
  34++F47A F4           	defb %11110100
  35++F47B FF           	defb %11111111
  36++F47C
  37++F47C
  38++F47C              	; sprites
  39++F47C
  40++F47C              	; sprites
  41++F47C
  42++F47C              	; no of sprites
  43++F47C 02           	defb 2
  44++F47D
  45++F47D              	; colour (hb) and active pause (lb)
  46++F47D 61           	defb %01100001
  47++F47E              	; xpos /2 (hb) and ypos /2 (lb)
  48++F47E              	; xxxx ypos xxxx xpos
  49++F47E 1A           	defb %00011010
  50++F47F              	; xmin /2 (hb) and xmax /2 (lb)
  51++F47F 9E           	defb %10011110
  52++F480              	; sprite buffer
  53++F480 00 D4        	defw sprite_buffer_2
  54++F482              	; gfx
  55++F482 DB           	defb sprite_expand_1/256
  56++F483              	; bank count and reset (eg 5 and 5)
  57++F483 55           	defb %01010101
  58++F484              	; direction
  59++F484 01           	defb %00000001
  60++F485
  61++F485
  62++F485
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen2.asm
  46++F485              screen_world01_3:
  47++F485              	include "../screens/world01/screen3.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen3.asm
   1++F485
   2++F485
   3++F485
   4++F485              		; Sprite 1 graphics to expand
   5++F485 00 60        		DEFW sprite_unex_0
   6++F487
   7++F487              		; Sprite 2 graphics to expand
   8++F487 00 60        		DEFW sprite_unex_0
   9++F489
  10++F489              		; Read Block Number 1st (Right Most)
  11++F489              		; Read Quantity Second
  12++F489 F0           	defb %11110000
  13++F48A 00           	defb %00000000
  14++F48B D7           	defb %11010111
  15++F48C 00           	defb %00000000
  16++F48D E7           	defb %11100111
  17++F48E 00           	defb %00000000
  18++F48F E7           	defb %11100111
  19++F490 D0           	defb %11010000
  20++F491 17           	defb %00010111
  21++F492 00           	defb %00000000
  22++F493 C4           	defb %11000100
  23++F494 17           	defb %00010111
  24++F495 D4           	defb %11010100
  25++F496 17           	defb %00010111
  26++F497 D4           	defb %11010100
  27++F498 17           	defb %00010111
  28++F499 74           	defb %01110100
  29++F49A 17           	defb %00010111
  30++F49B 34           	defb %00110100
  31++F49C 17           	defb %00010111
  32++F49D 44           	defb %01000100
  33++F49E 47           	defb %01000111
  34++F49F 34           	defb %00110100
  35++F4A0 17           	defb %00010111
  36++F4A1 04           	defb %00000100
  37++F4A2 FF           	defb %11111111
  38++F4A3
  39++F4A3
  40++F4A3
  41++F4A3              	; Sprites
  42++F4A3
  43++F4A3              	; No of sprites
  44++F4A3 01           	DEFB 1
  45++F4A4
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen3.asm
  48++F4A4              screen_world01_4:
  49++F4A4              	include "../screens/world01/screen4.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen4.asm
   1++F4A4
   2++F4A4
   3++F4A4              		; Sprite 1 graphics to expand
   4++F4A4 00 60        		DEFW sprite_unex_0
   5++F4A6
   6++F4A6              		; Sprite 2 graphics to expand
   7++F4A6 00 60        		DEFW sprite_unex_0
   8++F4A8
   9++F4A8              		; Read Block Number 1st (Right Most)
  10++F4A8              		; Read Quantity Second
  11++F4A8
  12++F4A8 F4           	defb %11110100
  13++F4A9 F4           	defb %11110100
  14++F4AA F4           	defb %11110100
  15++F4AB F4           	defb %11110100
  16++F4AC F4           	defb %11110100
  17++F4AD F4           	defb %11110100
  18++F4AE F4           	defb %11110100
  19++F4AF F4           	defb %11110100
  20++F4B0 F4           	defb %11110100
  21++F4B1 F4           	defb %11110100
  22++F4B2 FF           	defb %11111111
  23++F4B3
  24++F4B3
  25++F4B3
  26++F4B3              	; Sprites
  27++F4B3
  28++F4B3              	; No of sprites
  29++F4B3 01           	DEFB 1
  30++F4B4
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen4.asm
  50++F4B4              screen_world01_5:
  51++F4B4              	include "../screens/world01/screen5.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen5.asm
   1++F4B4
   2++F4B4
   3++F4B4
   4++F4B4              		; Sprite 1 graphics to expand
   5++F4B4 00 60        		DEFW sprite_unex_0
   6++F4B6
   7++F4B6              		; Sprite 2 graphics to expand
   8++F4B6 00 60        		DEFW sprite_unex_0
   9++F4B8
  10++F4B8              		; Read Block Number 1st (Right Most)
  11++F4B8              		; Read Quantity Second
  12++F4B8
  13++F4B8 24           	defb %00100100
  14++F4B9 37           	defb %00110111
  15++F4BA B4           	defb %10110100
  16++F4BB 37           	defb %00110111
  17++F4BC B4           	defb %10110100
  18++F4BD 27           	defb %00100111
  19++F4BE 03           	defb %00000011
  20++F4BF B4           	defb %10110100
  21++F4C0 27           	defb %00100111
  22++F4C1 00           	defb %00000000
  23++F4C2 B4           	defb %10110100
  24++F4C3 03           	defb %00000011
  25++F4C4 27           	defb %00100111
  26++F4C5 B4           	defb %10110100
  27++F4C6 00           	defb %00000000
  28++F4C7 27           	defb %00100111
  29++F4C8 B4           	defb %10110100
  30++F4C9 27           	defb %00100111
  31++F4CA 03           	defb %00000011
  32++F4CB B4           	defb %10110100
  33++F4CC 27           	defb %00100111
  34++F4CD 00           	defb %00000000
  35++F4CE B4           	defb %10110100
  36++F4CF 03           	defb %00000011
  37++F4D0 27           	defb %00100111
  38++F4D1 B4           	defb %10110100
  39++F4D2 00           	defb %00000000
  40++F4D3 27           	defb %00100111
  41++F4D4 84           	defb %10000100
  42++F4D5 FF           	defb %11111111
  43++F4D6
  44++F4D6
  45++F4D6
  46++F4D6
  47++F4D6
  48++F4D6              	; Sprites
  49++F4D6
  50++F4D6              	; No of sprites
  51++F4D6 01           	DEFB 1
  52++F4D7
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen5.asm
  52++F4D7              screen_world01_6:
  53++F4D7              	include "../screens/world01/screen6.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen6.asm
   1++F4D7
   2++F4D7
   3++F4D7
   4++F4D7              		; Sprite 1 graphics to expand
   5++F4D7 00 60        		DEFW sprite_unex_0
   6++F4D9
   7++F4D9              		; Sprite 2 graphics to expand
   8++F4D9 00 60        		DEFW sprite_unex_0
   9++F4DB
  10++F4DB              		; Read Block Number 1st (Right Most)
  11++F4DB              		; Read Quantity Second
  12++F4DB
  13++F4DB F4           	defb %11110100
  14++F4DC F4           	defb %11110100
  15++F4DD F4           	defb %11110100
  16++F4DE F4           	defb %11110100
  17++F4DF F4           	defb %11110100
  18++F4E0 F4           	defb %11110100
  19++F4E1 F4           	defb %11110100
  20++F4E2 F4           	defb %11110100
  21++F4E3 F4           	defb %11110100
  22++F4E4 F4           	defb %11110100
  23++F4E5 FF           	defb %11111111
  24++F4E6
  25++F4E6
  26++F4E6
  27++F4E6              	; Sprites
  28++F4E6
  29++F4E6              	; No of sprites
  30++F4E6 01           	DEFB 1
  31++F4E7
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen6.asm
  54++F4E7              screen_world01_7:
  55++F4E7              	include "../screens/world01/screen7.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen7.asm
   1++F4E7
   2++F4E7
   3++F4E7
   4++F4E7              		; Sprite 1 graphics to expand
   5++F4E7 00 60        		DEFW sprite_unex_0
   6++F4E9
   7++F4E9              		; Sprite 2 graphics to expand
   8++F4E9 00 60        		DEFW sprite_unex_0
   9++F4EB
  10++F4EB              		; Read Block Number 1st (Right Most)
  11++F4EB              		; Read Quantity Second
  12++F4EB
  13++F4EB 24           	defb %00100100
  14++F4EC 47           	defb %01000111
  15++F4ED 44           	defb %01000100
  16++F4EE 17           	defb %00010111
  17++F4EF 44           	defb %01000100
  18++F4F0 17           	defb %00010111
  19++F4F1 04           	defb %00000100
  20++F4F2 07           	defb %00000111
  21++F4F3 44           	defb %01000100
  22++F4F4 17           	defb %00010111
  23++F4F5 44           	defb %01000100
  24++F4F6 47           	defb %01000111
  25++F4F7 34           	defb %00110100
  26++F4F8 17           	defb %00010111
  27++F4F9 44           	defb %01000100
  28++F4FA 37           	defb %00110111
  29++F4FB 44           	defb %01000100
  30++F4FC 17           	defb %00010111
  31++F4FD 54           	defb %01010100
  32++F4FE 17           	defb %00010111
  33++F4FF 54           	defb %01010100
  34++F500 17           	defb %00010111
  35++F501 44           	defb %01000100
  36++F502 37           	defb %00110111
  37++F503 44           	defb %01000100
  38++F504 17           	defb %00010111
  39++F505 34           	defb %00110100
  40++F506 57           	defb %01010111
  41++F507 34           	defb %00110100
  42++F508 17           	defb %00010111
  43++F509 24           	defb %00100100
  44++F50A 77           	defb %01110111
  45++F50B 24           	defb %00100100
  46++F50C 17           	defb %00010111
  47++F50D 14           	defb %00010100
  48++F50E 97           	defb %10010111
  49++F50F 14           	defb %00010100
  50++F510 17           	defb %00010111
  51++F511 14           	defb %00010100
  52++F512 17           	defb %00010111
  53++F513 04           	defb %00000100
  54++F514 37           	defb %00110111
  55++F515 04           	defb %00000100
  56++F516 17           	defb %00010111
  57++F517 14           	defb %00010100
  58++F518 17           	defb %00010111
  59++F519 04           	defb %00000100
  60++F51A 57           	defb %01010111
  61++F51B 14           	defb %00010100
  62++F51C FF           	defb %11111111
  63++F51D
  64++F51D
  65++F51D
  66++F51D
  67++F51D
  68++F51D              	; Sprites
  69++F51D
  70++F51D              	; No of sprites
  71++F51D 01           	DEFB 1
  72++F51E
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen7.asm
  56++F51E              screen_world01_8:
  57++F51E              	include "../screens/world01/screen8.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen8.asm
   1++F51E
   2++F51E
   3++F51E
   4++F51E              		; Sprite 1 graphics to expand
   5++F51E 00 60        		DEFW sprite_unex_0
   6++F520
   7++F520              		; Sprite 2 graphics to expand
   8++F520 00 60        		DEFW sprite_unex_0
   9++F522
  10++F522              		; Read Block Number 1st (Right Most)
  11++F522              		; Read Quantity Second
  12++F522 04           	defb %00000100
  13++F523 D7           	defb %11010111
  14++F524 14           	defb %00010100
  15++F525 D7           	defb %11010111
  16++F526 14           	defb %00010100
  17++F527 D7           	defb %11010111
  18++F528 14           	defb %00010100
  19++F529 D7           	defb %11010111
  20++F52A 14           	defb %00010100
  21++F52B 27           	defb %00100111
  22++F52C 83           	defb %10000011
  23++F52D 27           	defb %00100111
  24++F52E 04           	defb %00000100
  25++F52F 27           	defb %00100111
  26++F530 84           	defb %10000100
  27++F531 23           	defb %00100011
  28++F532 04           	defb %00000100
  29++F533 17           	defb %00010111
  30++F534 00           	defb %00000000
  31++F535 C4           	defb %11000100
  32++F536 E7           	defb %11100111
  33++F537 04           	defb %00000100
  34++F538 00           	defb %00000000
  35++F539 D7           	defb %11010111
  36++F53A F4           	defb %11110100
  37++F53B FF           	defb %11111111
  38++F53C
  39++F53C
  40++F53C
  41++F53C
  42++F53C
  43++F53C              	; Sprites
  44++F53C
  45++F53C              	; No of sprites
  46++F53C 01           	DEFB 1
  47++F53D
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen8.asm
  58++F53D              screen_world01_9:
  59++F53D              	include "../screens/world01/screen9.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen9.asm
   1++F53D
   2++F53D
   3++F53D
   4++F53D              		; Sprite 1 graphics to expand
   5++F53D 00 60        		DEFW sprite_unex_0
   6++F53F
   7++F53F              		; Sprite 2 graphics to expand
   8++F53F 00 60        		DEFW sprite_unex_0
   9++F541
  10++F541              		; Read Block Number 1st (Right Most)
  11++F541              		; Read Quantity Second
  12++F541
  13++F541 24           	defb %00100100
  14++F542 37           	defb %00110111
  15++F543 B4           	defb %10110100
  16++F544 27           	defb %00100111
  17++F545 03           	defb %00000011
  18++F546 B4           	defb %10110100
  19++F547 03           	defb %00000011
  20++F548 17           	defb %00010111
  21++F549 00           	defb %00000000
  22++F54A B4           	defb %10110100
  23++F54B 00           	defb %00000000
  24++F54C 27           	defb %00100111
  25++F54D 84           	defb %10000100
  26++F54E 57           	defb %01010111
  27++F54F 03           	defb %00000011
  28++F550 04           	defb %00000100
  29++F551 77           	defb %01110111
  30++F552 53           	defb %01010011
  31++F553 00           	defb %00000000
  32++F554 04           	defb %00000100
  33++F555 77           	defb %01110111
  34++F556 74           	defb %01110100
  35++F557 17           	defb %00010111
  36++F558 54           	defb %01010100
  37++F559 97           	defb %10010111
  38++F55A 54           	defb %01010100
  39++F55B 97           	defb %10010111
  40++F55C F4           	defb %11110100
  41++F55D 54           	defb %01010100
  42++F55E FF           	defb %11111111
  43++F55F
  44++F55F
  45++F55F
  46++F55F
  47++F55F              	; Sprites
  48++F55F
  49++F55F              	; No of sprites
  50++F55F 01           	DEFB 1
  51++F560
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen9.asm
  60++F560              screen_world01_10:
  61++F560              	include "../screens/world01/screen10.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen10.asm
   1++F560
   2++F560
   3++F560              		; Sprite 1 graphics to expand
   4++F560 00 60        		DEFW sprite_unex_0
   5++F562
   6++F562              		; Sprite 2 graphics to expand
   7++F562 00 60        		DEFW sprite_unex_0
   8++F564
   9++F564              		; Read Block Number 1st (Right Most)
  10++F564              		; Read Quantity Second
  11++F564
  12++F564 F4           	defb %11110100
  13++F565 F4           	defb %11110100
  14++F566 14           	defb %00010100
  15++F567 37           	defb %00110111
  16++F568 A4           	defb %10100100
  17++F569 77           	defb %01110111
  18++F56A 64           	defb %01100100
  19++F56B A7           	defb %10100111
  20++F56C 44           	defb %01000100
  21++F56D B7           	defb %10110111
  22++F56E 24           	defb %00100100
  23++F56F 07           	defb %00000111
  24++F570 24           	defb %00100100
  25++F571 17           	defb %00010111
  26++F572 14           	defb %00010100
  27++F573 87           	defb %10000111
  28++F574 24           	defb %00100100
  29++F575 17           	defb %00010111
  30++F576 34           	defb %00110100
  31++F577 67           	defb %01100111
  32++F578 24           	defb %00100100
  33++F579 17           	defb %00010111
  34++F57A 54           	defb %01010100
  35++F57B 37           	defb %00110111
  36++F57C 34           	defb %00110100
  37++F57D 17           	defb %00010111
  38++F57E A4           	defb %10100100
  39++F57F FF           	defb %11111111
  40++F580
  41++F580
  42++F580
  43++F580
  44++F580              	; Sprites
  45++F580
  46++F580              	; No of sprites
  47++F580 01           	DEFB 1
  48++F581
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen10.asm
  62++F581              screen_world01_11:
  63++F581              	include "../screens/world01/screen11.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen11.asm
   1++F581
   2++F581
   3++F581              		; Sprite 1 graphics to expand
   4++F581 00 60        		DEFW sprite_unex_0
   5++F583
   6++F583              		; Sprite 2 graphics to expand
   7++F583 00 60        		DEFW sprite_unex_0
   8++F585
   9++F585              		; Read Block Number 1st (Right Most)
  10++F585              		; Read Quantity Second
  11++F585
  12++F585 34           	defb %00110100
  13++F586 47           	defb %01000111
  14++F587 34           	defb %00110100
  15++F588 17           	defb %00010111
  16++F589 34           	defb %00110100
  17++F58A 27           	defb %00100111
  18++F58B 04           	defb %00000100
  19++F58C 17           	defb %00010111
  20++F58D 04           	defb %00000100
  21++F58E 07           	defb %00000111
  22++F58F 14           	defb %00010100
  23++F590 17           	defb %00010111
  24++F591 24           	defb %00100100
  25++F592 17           	defb %00010111
  26++F593 34           	defb %00110100
  27++F594 27           	defb %00100111
  28++F595 14           	defb %00010100
  29++F596 17           	defb %00010111
  30++F597 24           	defb %00100100
  31++F598 27           	defb %00100111
  32++F599 34           	defb %00110100
  33++F59A 07           	defb %00000111
  34++F59B 24           	defb %00100100
  35++F59C 17           	defb %00010111
  36++F59D D4           	defb %11010100
  37++F59E 17           	defb %00010111
  38++F59F 04           	defb %00000100
  39++F5A0 2A           	defb %00101010
  40++F5A1 17           	defb %00010111
  41++F5A2 54           	defb %01010100
  42++F5A3 1A           	defb %00011010
  43++F5A4 17           	defb %00010111
  44++F5A5 04           	defb %00000100
  45++F5A6 2A           	defb %00101010
  46++F5A7 27           	defb %00100111
  47++F5A8 24           	defb %00100100
  48++F5A9 17           	defb %00010111
  49++F5AA 1A           	defb %00011010
  50++F5AB 17           	defb %00010111
  51++F5AC 04           	defb %00000100
  52++F5AD 2A           	defb %00101010
  53++F5AE 27           	defb %00100111
  54++F5AF 2A           	defb %00101010
  55++F5B0 17           	defb %00010111
  56++F5B1 1A           	defb %00011010
  57++F5B2 17           	defb %00010111
  58++F5B3 34           	defb %00110100
  59++F5B4 27           	defb %00100111
  60++F5B5 2A           	defb %00101010
  61++F5B6 17           	defb %00010111
  62++F5B7 F4           	defb %11110100
  63++F5B8 44           	defb %01000100
  64++F5B9 FF           	defb %11111111
  65++F5BA
  66++F5BA
  67++F5BA
  68++F5BA
  69++F5BA
  70++F5BA
  71++F5BA              	; Sprites
  72++F5BA
  73++F5BA              	; No of sprites
  74++F5BA 01           	DEFB 1
  75++F5BB
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen11.asm
  64++F5BB              screen_world01_12:
  65++F5BB              	include "../screens/world01/screen12.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen12.asm
   1++F5BB
   2++F5BB
   3++F5BB
   4++F5BB              		; Sprite 1 graphics to expand
   5++F5BB 00 60        		DEFW sprite_unex_0
   6++F5BD
   7++F5BD              		; Sprite 2 graphics to expand
   8++F5BD 00 60        		DEFW sprite_unex_0
   9++F5BF
  10++F5BF              		; Read Block Number 1st (Right Most)
  11++F5BF              		; Read Quantity Second
  12++F5BF
  13++F5BF F4           	defb %11110100
  14++F5C0 F4           	defb %11110100
  15++F5C1 F4           	defb %11110100
  16++F5C2 F4           	defb %11110100
  17++F5C3 F4           	defb %11110100
  18++F5C4 F4           	defb %11110100
  19++F5C5 F4           	defb %11110100
  20++F5C6 F4           	defb %11110100
  21++F5C7 F4           	defb %11110100
  22++F5C8 F4           	defb %11110100
  23++F5C9 FF           	defb %11111111
  24++F5CA
  25++F5CA
  26++F5CA
  27++F5CA              	; Sprites
  28++F5CA
  29++F5CA              	; No of sprites
  30++F5CA 01           	DEFB 1
  31++F5CB
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen12.asm
  66++F5CB              screen_world01_13:
  67++F5CB              	include "../screens/world01/screen13.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen13.asm
   1++F5CB
   2++F5CB
   3++F5CB              		; Sprite 1 graphics to expand
   4++F5CB 00 60        		DEFW sprite_unex_0
   5++F5CD
   6++F5CD              		; Sprite 2 graphics to expand
   7++F5CD 00 60        		DEFW sprite_unex_0
   8++F5CF
   9++F5CF              		; Read Block Number 1st (Right Most)
  10++F5CF              		; Read Quantity Second
  11++F5CF
  12++F5CF F4           	defb %11110100
  13++F5D0 F4           	defb %11110100
  14++F5D1 F4           	defb %11110100
  15++F5D2 F4           	defb %11110100
  16++F5D3 F4           	defb %11110100
  17++F5D4 F4           	defb %11110100
  18++F5D5 F4           	defb %11110100
  19++F5D6 F4           	defb %11110100
  20++F5D7 F4           	defb %11110100
  21++F5D8 F4           	defb %11110100
  22++F5D9 FF           	defb %11111111
  23++F5DA
  24++F5DA
  25++F5DA
  26++F5DA              	; Sprites
  27++F5DA
  28++F5DA              	; No of sprites
  29++F5DA 01           	DEFB 1
  30++F5DB
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen13.asm
  68++F5DB              screen_world01_14:
  69++F5DB              	include "../screens/world01/screen14.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen14.asm
   1++F5DB
   2++F5DB
   3++F5DB
   4++F5DB              		; Sprite 1 graphics to expand
   5++F5DB 00 60        		DEFW sprite_unex_0
   6++F5DD
   7++F5DD              		; Sprite 2 graphics to expand
   8++F5DD 00 60        		DEFW sprite_unex_0
   9++F5DF
  10++F5DF              		; Read Block Number 1st (Right Most)
  11++F5DF              		; Read Quantity Second
  12++F5DF
  13++F5DF F6           	defb %11110110
  14++F5E0 F6           	defb %11110110
  15++F5E1 F6           	defb %11110110
  16++F5E2 F4           	defb %11110100
  17++F5E3 F4           	defb %11110100
  18++F5E4 F4           	defb %11110100
  19++F5E5 F4           	defb %11110100
  20++F5E6 F4           	defb %11110100
  21++F5E7 F4           	defb %11110100
  22++F5E8 F4           	defb %11110100
  23++F5E9 FF           	defb %11111111
  24++F5EA
  25++F5EA
  26++F5EA
  27++F5EA              	; Sprites
  28++F5EA
  29++F5EA              	; No of sprites
  30++F5EA 01           	DEFB 1
  31++F5EB
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen14.asm
  70++F5EB              screen_world01_15:
  71++F5EB              	include "../screens/world01/screen15.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen15.asm
   1++F5EB
   2++F5EB
   3++F5EB              		; Sprite 1 graphics to expand
   4++F5EB 00 60        		DEFW sprite_unex_0
   5++F5ED
   6++F5ED              		; Sprite 2 graphics to expand
   7++F5ED 00 60        		DEFW sprite_unex_0
   8++F5EF
   9++F5EF              		; Read Block Number 1st (Right Most)
  10++F5EF              		; Read Quantity Second
  11++F5EF
  12++F5EF C4           	defb %11000100
  13++F5F0 17           	defb %00010111
  14++F5F1 D4           	defb %11010100
  15++F5F2 17           	defb %00010111
  16++F5F3 D4           	defb %11010100
  17++F5F4 17           	defb %00010111
  18++F5F5 D4           	defb %11010100
  19++F5F6 17           	defb %00010111
  20++F5F7 D4           	defb %11010100
  21++F5F8 17           	defb %00010111
  22++F5F9 D4           	defb %11010100
  23++F5FA 17           	defb %00010111
  24++F5FB D4           	defb %11010100
  25++F5FC 17           	defb %00010111
  26++F5FD D4           	defb %11010100
  27++F5FE 17           	defb %00010111
  28++F5FF D4           	defb %11010100
  29++F600 17           	defb %00010111
  30++F601 D4           	defb %11010100
  31++F602 17           	defb %00010111
  32++F603 14           	defb %00010100
  33++F604 FF           	defb %11111111
  34++F605
  35++F605
  36++F605
  37++F605
  38++F605
  39++F605              	; Sprites
  40++F605
  41++F605              	; No of sprites
  42++F605 01           	DEFB 1
  43++F606
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen15.asm
  72++F606              screen_world01_16:
  73++F606              	include "../screens/world01/screen16.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen16.asm
   1++F606
   2++F606
   3++F606
   4++F606
   5++F606              		; Sprite 1 graphics to expand
   6++F606 00 60        		DEFW sprite_unex_0
   7++F608
   8++F608              		; Sprite 2 graphics to expand
   9++F608 00 60        		DEFW sprite_unex_0
  10++F60A
  11++F60A              		; Read Block Number 1st (Right Most)
  12++F60A              		; Read Quantity Second
  13++F60A
  14++F60A F4           	defb %11110100
  15++F60B F4           	defb %11110100
  16++F60C F4           	defb %11110100
  17++F60D F4           	defb %11110100
  18++F60E F4           	defb %11110100
  19++F60F F4           	defb %11110100
  20++F610 F4           	defb %11110100
  21++F611 F4           	defb %11110100
  22++F612 F4           	defb %11110100
  23++F613 F4           	defb %11110100
  24++F614 FF           	defb %11111111
  25++F615
  26++F615
  27++F615
  28++F615              	; Sprites
  29++F615
  30++F615              	; No of sprites
  31++F615 01           	DEFB 1
  32++F616
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen16.asm
  74++F616              screen_world01_17:
  75++F616              	include "../screens/world01/screen17.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen17.asm
   1++F616
   2++F616
   3++F616
   4++F616              		; Sprite 1 graphics to expand
   5++F616 00 60        		DEFW sprite_unex_0
   6++F618
   7++F618              		; Sprite 2 graphics to expand
   8++F618 00 60        		DEFW sprite_unex_0
   9++F61A
  10++F61A              		; Read Block Number 1st (Right Most)
  11++F61A              		; Read Quantity Second
  12++F61A
  13++F61A F4           	defb %11110100
  14++F61B F4           	defb %11110100
  15++F61C F4           	defb %11110100
  16++F61D F4           	defb %11110100
  17++F61E F4           	defb %11110100
  18++F61F F4           	defb %11110100
  19++F620 F4           	defb %11110100
  20++F621 F4           	defb %11110100
  21++F622 F4           	defb %11110100
  22++F623 F4           	defb %11110100
  23++F624 FF           	defb %11111111
  24++F625
  25++F625
  26++F625
  27++F625              	; Sprites
  28++F625
  29++F625              	; No of sprites
  30++F625 01           	DEFB 1
  31++F626
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen17.asm
  76++F626              screen_world01_18:
  77++F626              	include "../screens/world01/screen18.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen18.asm
   1++F626
   2++F626
   3++F626
   4++F626              		; Sprite 1 graphics to expand
   5++F626 00 60        		DEFW sprite_unex_0
   6++F628
   7++F628              		; Sprite 2 graphics to expand
   8++F628 00 60        		DEFW sprite_unex_0
   9++F62A
  10++F62A              		; Read Block Number 1st (Right Most)
  11++F62A              		; Read Quantity Second
  12++F62A
  13++F62A F4           	defb %11110100
  14++F62B F4           	defb %11110100
  15++F62C F4           	defb %11110100
  16++F62D F4           	defb %11110100
  17++F62E F4           	defb %11110100
  18++F62F F4           	defb %11110100
  19++F630 F4           	defb %11110100
  20++F631 F4           	defb %11110100
  21++F632 F4           	defb %11110100
  22++F633 F4           	defb %11110100
  23++F634 FF           	defb %11111111
  24++F635
  25++F635
  26++F635
  27++F635              	; Sprites
  28++F635
  29++F635              	; No of sprites
  30++F635 01           	DEFB 1
  31++F636
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen18.asm
  78++F636              screen_world01_19:
  79++F636              	include "../screens/world01/screen19.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen19.asm
   1++F636
   2++F636
   3++F636
   4++F636              		; Sprite 1 graphics to expand
   5++F636 00 60        		DEFW sprite_unex_0
   6++F638
   7++F638              		; Sprite 2 graphics to expand
   8++F638 00 60        		DEFW sprite_unex_0
   9++F63A
  10++F63A              		; Read Block Number 1st (Right Most)
  11++F63A              		; Read Quantity Second
  12++F63A
  13++F63A C4           	defb %11000100
  14++F63B 17           	defb %00010111
  15++F63C D4           	defb %11010100
  16++F63D 17           	defb %00010111
  17++F63E D4           	defb %11010100
  18++F63F 17           	defb %00010111
  19++F640 D4           	defb %11010100
  20++F641 17           	defb %00010111
  21++F642 D4           	defb %11010100
  22++F643 17           	defb %00010111
  23++F644 D4           	defb %11010100
  24++F645 17           	defb %00010111
  25++F646 D4           	defb %11010100
  26++F647 17           	defb %00010111
  27++F648 D4           	defb %11010100
  28++F649 17           	defb %00010111
  29++F64A D4           	defb %11010100
  30++F64B 17           	defb %00010111
  31++F64C D4           	defb %11010100
  32++F64D 17           	defb %00010111
  33++F64E 14           	defb %00010100
  34++F64F FF           	defb %11111111
  35++F650
  36++F650
  37++F650
  38++F650
  39++F650
  40++F650              	; Sprites
  41++F650
  42++F650              	; No of sprites
  43++F650 01           	DEFB 1
  44++F651
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen19.asm
  80++F651              screen_world01_20:
  81++F651              	include "../screens/world01/screen20.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen20.asm
   1++F651
   2++F651
   3++F651
   4++F651
   5++F651              		; Sprite 1 graphics to expand
   6++F651 00 60        		DEFW sprite_unex_0
   7++F653
   8++F653              		; Sprite 2 graphics to expand
   9++F653 00 60        		DEFW sprite_unex_0
  10++F655
  11++F655              		; Read Block Number 1st (Right Most)
  12++F655              		; Read Quantity Second
  13++F655
  14++F655 F4           	defb %11110100
  15++F656 F4           	defb %11110100
  16++F657 F4           	defb %11110100
  17++F658 F4           	defb %11110100
  18++F659 F4           	defb %11110100
  19++F65A F4           	defb %11110100
  20++F65B F4           	defb %11110100
  21++F65C F4           	defb %11110100
  22++F65D F4           	defb %11110100
  23++F65E F4           	defb %11110100
  24++F65F FF           	defb %11111111
  25++F660
  26++F660
  27++F660
  28++F660              	; Sprites
  29++F660
  30++F660              	; No of sprites
  31++F660 01           	DEFB 1
  32++F661
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen20.asm
  82++F661              screen_world01_21:
  83++F661              	include "../screens/world01/screen21.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen21.asm
   1++F661
   2++F661
   3++F661
   4++F661              		; Sprite 1 graphics to expand
   5++F661 00 60        		DEFW sprite_unex_0
   6++F663
   7++F663              		; Sprite 2 graphics to expand
   8++F663 00 60        		DEFW sprite_unex_0
   9++F665
  10++F665              		; Read Block Number 1st (Right Most)
  11++F665              		; Read Quantity Second
  12++F665
  13++F665 F4           	defb %11110100
  14++F666 F4           	defb %11110100
  15++F667 F4           	defb %11110100
  16++F668 F4           	defb %11110100
  17++F669 F4           	defb %11110100
  18++F66A F4           	defb %11110100
  19++F66B F4           	defb %11110100
  20++F66C F4           	defb %11110100
  21++F66D F4           	defb %11110100
  22++F66E F4           	defb %11110100
  23++F66F FF           	defb %11111111
  24++F670
  25++F670
  26++F670
  27++F670              	; Sprites
  28++F670
  29++F670              	; No of sprites
  30++F670 01           	DEFB 1
  31++F671
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen21.asm
  84++F671              screen_world01_22:
  85++F671              	include "../screens/world01/screen22.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen22.asm
   1++F671
   2++F671
   3++F671
   4++F671
   5++F671              		; Sprite 1 graphics to expand
   6++F671 00 60        		DEFW sprite_unex_0
   7++F673
   8++F673              		; Sprite 2 graphics to expand
   9++F673 00 60        		DEFW sprite_unex_0
  10++F675
  11++F675              		; Read Block Number 1st (Right Most)
  12++F675              		; Read Quantity Second
  13++F675
  14++F675 F4           	defb %11110100
  15++F676 F4           	defb %11110100
  16++F677 F4           	defb %11110100
  17++F678 F4           	defb %11110100
  18++F679 F4           	defb %11110100
  19++F67A F4           	defb %11110100
  20++F67B F4           	defb %11110100
  21++F67C F4           	defb %11110100
  22++F67D F4           	defb %11110100
  23++F67E F4           	defb %11110100
  24++F67F FF           	defb %11111111
  25++F680
  26++F680
  27++F680
  28++F680              	; Sprites
  29++F680
  30++F680              	; No of sprites
  31++F680 01           	DEFB 1
  32++F681
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen22.asm
  86++F681              screen_world01_23:
  87++F681              	include "../screens/world01/screen23.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen23.asm
   1++F681
   2++F681
   3++F681
   4++F681              		; Sprite 1 graphics to expand
   5++F681 00 60        		DEFW sprite_unex_0
   6++F683
   7++F683              		; Sprite 2 graphics to expand
   8++F683 00 60        		DEFW sprite_unex_0
   9++F685
  10++F685              		; Read Block Number 1st (Right Most)
  11++F685              		; Read Quantity Second
  12++F685
  13++F685 C4           	defb %11000100
  14++F686 17           	defb %00010111
  15++F687 D4           	defb %11010100
  16++F688 17           	defb %00010111
  17++F689 D4           	defb %11010100
  18++F68A 17           	defb %00010111
  19++F68B D4           	defb %11010100
  20++F68C 17           	defb %00010111
  21++F68D D4           	defb %11010100
  22++F68E 17           	defb %00010111
  23++F68F D4           	defb %11010100
  24++F690 17           	defb %00010111
  25++F691 D4           	defb %11010100
  26++F692 17           	defb %00010111
  27++F693 D4           	defb %11010100
  28++F694 17           	defb %00010111
  29++F695 D4           	defb %11010100
  30++F696 17           	defb %00010111
  31++F697 D4           	defb %11010100
  32++F698 17           	defb %00010111
  33++F699 14           	defb %00010100
  34++F69A FF           	defb %11111111
  35++F69B
  36++F69B
  37++F69B
  38++F69B
  39++F69B
  40++F69B              	; Sprites
  41++F69B
  42++F69B              	; No of sprites
  43++F69B 01           	DEFB 1
  44++F69C
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen23.asm
  88++F69C              screen_world01_24:
  89++F69C              	include "../screens/world01/screen24.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen24.asm
   1++F69C
   2++F69C
   3++F69C              		; Sprite 1 graphics to expand
   4++F69C 00 60        		DEFW sprite_unex_0
   5++F69E
   6++F69E              		; Sprite 2 graphics to expand
   7++F69E 00 60        		DEFW sprite_unex_0
   8++F6A0
   9++F6A0              		; Read Block Number 1st (Right Most)
  10++F6A0              		; Read Quantity Second
  11++F6A0
  12++F6A0 F4           	defb %11110100
  13++F6A1 F4           	defb %11110100
  14++F6A2 F4           	defb %11110100
  15++F6A3 F4           	defb %11110100
  16++F6A4 F4           	defb %11110100
  17++F6A5 F4           	defb %11110100
  18++F6A6 F4           	defb %11110100
  19++F6A7 F4           	defb %11110100
  20++F6A8 F4           	defb %11110100
  21++F6A9 F4           	defb %11110100
  22++F6AA FF           	defb %11111111
  23++F6AB
  24++F6AB
  25++F6AB
  26++F6AB              	; Sprites
  27++F6AB
  28++F6AB              	; No of sprites
  29++F6AB 01           	DEFB 1
  30++F6AC
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen24.asm
  90++F6AC              screen_world01_25:
  91++F6AC              	include "../screens/world01/screen25.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen25.asm
   1++F6AC
   2++F6AC
   3++F6AC
   4++F6AC              		; Sprite 1 graphics to expand
   5++F6AC 00 60        		DEFW sprite_unex_0
   6++F6AE
   7++F6AE              		; Sprite 2 graphics to expand
   8++F6AE 00 60        		DEFW sprite_unex_0
   9++F6B0
  10++F6B0              		; Read Block Number 1st (Right Most)
  11++F6B0              		; Read Quantity Second
  12++F6B0
  13++F6B0 F4           	defb %11110100
  14++F6B1 F4           	defb %11110100
  15++F6B2 F4           	defb %11110100
  16++F6B3 F4           	defb %11110100
  17++F6B4 F4           	defb %11110100
  18++F6B5 F4           	defb %11110100
  19++F6B6 F4           	defb %11110100
  20++F6B7 F4           	defb %11110100
  21++F6B8 F4           	defb %11110100
  22++F6B9 F4           	defb %11110100
  23++F6BA FF           	defb %11111111
  24++F6BB
  25++F6BB
  26++F6BB
  27++F6BB              	; Sprites
  28++F6BB
  29++F6BB              	; No of sprites
  30++F6BB 01           	DEFB 1
  31++F6BC
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen25.asm
  92++F6BC              screen_world01_26:
  93++F6BC              	include "../screens/world01/screen26.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen26.asm
   1++F6BC
   2++F6BC
   3++F6BC
   4++F6BC              		; Sprite 1 graphics to expand
   5++F6BC 00 60        		DEFW sprite_unex_0
   6++F6BE
   7++F6BE              		; Sprite 2 graphics to expand
   8++F6BE 00 60        		DEFW sprite_unex_0
   9++F6C0
  10++F6C0              		; Read Block Number 1st (Right Most)
  11++F6C0              		; Read Quantity Second
  12++F6C0
  13++F6C0 F4           	defb %11110100
  14++F6C1 F4           	defb %11110100
  15++F6C2 F4           	defb %11110100
  16++F6C3 F4           	defb %11110100
  17++F6C4 F4           	defb %11110100
  18++F6C5 F4           	defb %11110100
  19++F6C6 F4           	defb %11110100
  20++F6C7 F4           	defb %11110100
  21++F6C8 F4           	defb %11110100
  22++F6C9 F4           	defb %11110100
  23++F6CA FF           	defb %11111111
  24++F6CB
  25++F6CB
  26++F6CB
  27++F6CB              	; Sprites
  28++F6CB
  29++F6CB              	; No of sprites
  30++F6CB 01           	DEFB 1
  31++F6CC
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen26.asm
  94++F6CC              screen_world01_27:
  95++F6CC              	include "../screens/world01/screen27.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen27.asm
   1++F6CC
   2++F6CC
   3++F6CC
   4++F6CC              		; Sprite 1 graphics to expand
   5++F6CC 00 60        		DEFW sprite_unex_0
   6++F6CE
   7++F6CE              		; Sprite 2 graphics to expand
   8++F6CE 00 60        		DEFW sprite_unex_0
   9++F6D0
  10++F6D0              		; Read Block Number 1st (Right Most)
  11++F6D0              		; Read Quantity Second
  12++F6D0
  13++F6D0 C4           	defb %11000100
  14++F6D1 17           	defb %00010111
  15++F6D2 D4           	defb %11010100
  16++F6D3 17           	defb %00010111
  17++F6D4 D4           	defb %11010100
  18++F6D5 17           	defb %00010111
  19++F6D6 D4           	defb %11010100
  20++F6D7 17           	defb %00010111
  21++F6D8 D4           	defb %11010100
  22++F6D9 17           	defb %00010111
  23++F6DA D4           	defb %11010100
  24++F6DB 17           	defb %00010111
  25++F6DC D4           	defb %11010100
  26++F6DD 17           	defb %00010111
  27++F6DE D4           	defb %11010100
  28++F6DF 17           	defb %00010111
  29++F6E0 D4           	defb %11010100
  30++F6E1 17           	defb %00010111
  31++F6E2 D4           	defb %11010100
  32++F6E3 17           	defb %00010111
  33++F6E4 14           	defb %00010100
  34++F6E5 FF           	defb %11111111
  35++F6E6
  36++F6E6
  37++F6E6
  38++F6E6
  39++F6E6
  40++F6E6              	; Sprites
  41++F6E6
  42++F6E6              	; No of sprites
  43++F6E6 01           	DEFB 1
  44++F6E7
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen27.asm
  96++F6E7              screen_world01_28:
  97++F6E7              	include "../screens/world01/screen28.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen28.asm
   1++F6E7
   2++F6E7
   3++F6E7              		; Sprite 1 graphics to expand
   4++F6E7 00 60        		DEFW sprite_unex_0
   5++F6E9
   6++F6E9              		; Sprite 2 graphics to expand
   7++F6E9 00 60        		DEFW sprite_unex_0
   8++F6EB
   9++F6EB              		; Read Block Number 1st (Right Most)
  10++F6EB              		; Read Quantity Second
  11++F6EB
  12++F6EB F4           	defb %11110100
  13++F6EC F4           	defb %11110100
  14++F6ED F4           	defb %11110100
  15++F6EE F4           	defb %11110100
  16++F6EF F4           	defb %11110100
  17++F6F0 F4           	defb %11110100
  18++F6F1 F4           	defb %11110100
  19++F6F2 F4           	defb %11110100
  20++F6F3 F4           	defb %11110100
  21++F6F4 F4           	defb %11110100
  22++F6F5 FF           	defb %11111111
  23++F6F6
  24++F6F6
  25++F6F6
  26++F6F6              	; Sprites
  27++F6F6
  28++F6F6              	; No of sprites
  29++F6F6 01           	DEFB 1
  30++F6F7
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen28.asm
  98++F6F7              screen_world01_29:
  99++F6F7              	include "../screens/world01/screen29.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen29.asm
   1++F6F7
   2++F6F7
   3++F6F7              		; Sprite 1 graphics to expand
   4++F6F7 00 60        		DEFW sprite_unex_0
   5++F6F9
   6++F6F9              		; Sprite 2 graphics to expand
   7++F6F9 00 60        		DEFW sprite_unex_0
   8++F6FB
   9++F6FB              		; Read Block Number 1st (Right Most)
  10++F6FB              		; Read Quantity Second
  11++F6FB
  12++F6FB F4           	defb %11110100
  13++F6FC F4           	defb %11110100
  14++F6FD F4           	defb %11110100
  15++F6FE F4           	defb %11110100
  16++F6FF F4           	defb %11110100
  17++F700 F4           	defb %11110100
  18++F701 F4           	defb %11110100
  19++F702 F4           	defb %11110100
  20++F703 F4           	defb %11110100
  21++F704 F4           	defb %11110100
  22++F705 FF           	defb %11111111
  23++F706
  24++F706
  25++F706
  26++F706              	; Sprites
  27++F706
  28++F706              	; No of sprites
  29++F706 01           	DEFB 1
  30++F707
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen29.asm
 100++F707              screen_world01_30:
 101++F707              	include "../screens/world01/screen30.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen30.asm
   1++F707
   2++F707
   3++F707
   4++F707              		; Sprite 1 graphics to expand
   5++F707 00 60        		DEFW sprite_unex_0
   6++F709
   7++F709              		; Sprite 2 graphics to expand
   8++F709 00 60        		DEFW sprite_unex_0
   9++F70B
  10++F70B              		; Read Block Number 1st (Right Most)
  11++F70B              		; Read Quantity Second
  12++F70B
  13++F70B F4           	defb %11110100
  14++F70C F4           	defb %11110100
  15++F70D F4           	defb %11110100
  16++F70E F4           	defb %11110100
  17++F70F F4           	defb %11110100
  18++F710 F4           	defb %11110100
  19++F711 F4           	defb %11110100
  20++F712 F4           	defb %11110100
  21++F713 F4           	defb %11110100
  22++F714 F4           	defb %11110100
  23++F715 FF           	defb %11111111
  24++F716
  25++F716
  26++F716
  27++F716              	; Sprites
  28++F716
  29++F716              	; No of sprites
  30++F716 01           	DEFB 1
  31++F717
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen30.asm
 102++F717              screen_world01_31:
 103++F717              	include "../screens/world01/screen31.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen31.asm
   1++F717
   2++F717
   3++F717
   4++F717
   5++F717              		; Sprite 1 graphics to expand
   6++F717 00 60        		DEFW sprite_unex_0
   7++F719
   8++F719              		; Sprite 2 graphics to expand
   9++F719 00 60        		DEFW sprite_unex_0
  10++F71B
  11++F71B              		; Read Block Number 1st (Right Most)
  12++F71B              		; Read Quantity Second
  13++F71B
  14++F71B C4           	defb %11000100
  15++F71C 17           	defb %00010111
  16++F71D D4           	defb %11010100
  17++F71E 17           	defb %00010111
  18++F71F D4           	defb %11010100
  19++F720 17           	defb %00010111
  20++F721 D4           	defb %11010100
  21++F722 17           	defb %00010111
  22++F723 D4           	defb %11010100
  23++F724 17           	defb %00010111
  24++F725 D4           	defb %11010100
  25++F726 17           	defb %00010111
  26++F727 D4           	defb %11010100
  27++F728 17           	defb %00010111
  28++F729 04           	defb %00000100
  29++F72A E7           	defb %11100111
  30++F72B 04           	defb %00000100
  31++F72C E7           	defb %11100111
  32++F72D F4           	defb %11110100
  33++F72E 04           	defb %00000100
  34++F72F FF           	defb %11111111
  35++F730
  36++F730
  37++F730
  38++F730
  39++F730
  40++F730
  41++F730              	; Sprites
  42++F730
  43++F730              	; No of sprites
  44++F730 01           	DEFB 1
  45++F731
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world01/screen31.asm
 104++F731
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/screens01.asm
 172+ F731
 173+ F731 45 4E 44 20  	defb 'END OF SCREENS'
 173+ F735 4F 46 20 53
 173+ F739 43 52 45 45
 173+ F73D 4E 53
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/world01.asm
3112  F73F
3113  F73F              	page 3
3114  F73F              	ORG $c000
3115  C000              	include "world02.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/world02.asm
   1+ C000
   2+ C000
   3+ C000              	org $c000
   4+ C000
   5+ C000              	; ****************************************************************************
   6+ C000
   7+ C000              	; sprites
   8+ C000
   9+ C000              	; only move vertically 1 char, but give illusion of horizonal smoothness
  10+ C000              	; in gfx
  11+ C000              	;sprites:
  12+ C000
  13+ C000              	;       player
  14+ C000              	;       ======
  15+ C000
  16+ C000 01           	defb 1                 ; 0  active/pause before move to reset to
  17+ C001 06           	defb 6                 ; 1  xpos
  18+ C002 00           	defb 0                 ; 2  ypos
  19+ C003 0C           	defb 12                ; 3  anim frame offset
  20+ C004 00           	defb 0                 ; 4  move counter (reset when=4)
  21+ C005 00           	defb 0                 ; 5  ymove
  22+ C006 03           	defb 3                 ; 6  height
  23+ C007 FF           	defb -1                ; 7  direction (1=right,-1 left)
  24+ C008 01           	defb 1                 ; 8  move offset (ro)
  25+ C009 00           	defb 0                 ; 9 anim offset (ro)
  26+ C00A 1E           	defb 30                ; 10 xmax
  27+ C00B 00           	defb 0                 ; 11 xmin
  28+ C00C 00 D1        	defw sprite_buffer_1   ; 12 sprite buffer
  29+ C00E A7           	defb player_gfx/256   ; 14 bank
  30+ C00F 06           	defb 06h                ; 15 bank difference to add/subtract (e.g difference between bank2 (bc00) and bank1 (b100) = 3k (768 bytes, 96 chars)
  31+ C010              							; 96 = 12*8 (4 for each frame left and right)
  32+ C010 05           	defb 5                 ; 16 counter to change bank, i.e. frame of animation
  33+ C011 04           	defb 4                 ; 17 reset value for bank change
  34+ C012 30           	defb 48                ; 18 image frame difference to add on max/min (12 chars * 4 frames) when
  35+ C013              						;    changing direction
  36+ C013 45           	defb %01000101         ; 19 colour
  37+ C014
  38+ C014              	;enemy_sprites:
  39+ C014
  40+ C014 00 00 00...  	defs sprite_size*7,0
  41+ C0A0
  42+ C0A0
  43+ C0A0
  44+ C0A0              	org $c100
  45+ C100
  46+ C100 08           				defb 8      ; number of keys
  47+ C101              	; screen, x, y, enabled
  48+ C101              	;keystocollect:
  49+ C101              	; Need to change to Screen,X,Y,Enabled,Lock Screen,X,Y,Locked/Unlocked
  50+ C101              	; So we could have 32 Key/Door combinations per world
  51+ C101              	; Then we copy to area 8000-c000 so we can update during game
  52+ C101
  53+ C101 00 0F 0A 01  				defb 0,15,10,1,1,10,10,1
  53+ C105 01 0A 0A 01
  54+ C109 00 11 0A 01  				defb 0,17,10,1,0,0,0,0
  54+ C10D 00 00 00 00
  55+ C111 00 13 0A 01  				defb 0,19,10,1,0,0,0,0
  55+ C115 00 00 00 00
  56+ C119 00 15 0A 01  				defb 0,21,10,1,0,0,0,0
  56+ C11D 00 00 00 00
  57+ C121
  58+ C121 01 06 10 01  				defb 1,6,16,1,0,0,0,0
  58+ C125 00 00 00 00
  59+ C129 01 08 12 01  				defb 1,8,18,1,0,0,0,0
  59+ C12D 00 00 00 00
  60+ C131 01 0A 10 01  				defb 1,10,16,1,0,0,0,0
  60+ C135 00 00 00 00
  61+ C139 01 0C 12 01  				defb 1,12,18,1,0,0,0,0
  61+ C13D 00 00 00 00
  62+ C141              	; ****************************************************************************
  63+ C141              	; graphics (background)
  64+ C141
  65+ C141              	; 1k (128 chars)
  66+ C141              	org $c200
  67+ C200              	;bg_chars:
  68+ C200
  69+ C200              			include "includes/bgchars.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgchars.asm
   1++C200
   2++C200              	; ASM source file created by SevenuP v1.20
   3++C200              	; SevenuP (C) Copyright 2002-2006 by Jaime Tejedor Gomez, aka Metalbrain
   4++C200
   5++C200              	;GRAPHIC DATA:
   6++C200              	;Pixel Size:      ( 16,  16)
   7++C200              	;Char Size:       (  2,   2)
   8++C200              	;Sort Priorities: Char line, X char, Y char
   9++C200              	;Data Outputted:  Gfx+Attr
  10++C200              	;Interleave:      Frames
  11++C200              	;Mask:            No
  12++C200
  13++C200              	; block
  14++C200 00 FA FC FA  	defb   0, 250, 252, 250, 252, 250, 252, 250  ; char block [0, 0]
  14++C204 FC FA FC FA
  15++C208 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 0]
  15++C20C FF FF FF FF
  16++C210 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  16++C214 FF FF FF FF
  17++C218 00 FD FE FD  	defb   0, 253, 254, 253, 254, 253, 254, 253  ; char block [1, 1]
  17++C21C FE FD FE FD
  18++C220
  19++C220              	; Step
  20++C220 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 0]
  20++C224 FF FF FF FF
  21++C228 00 F8 FC FE  	defb   0, 248, 252, 254, 254, 254, 254, 254  ; char block [1, 0]
  21++C22C FE FE FE FE
  22++C230 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  22++C234 FF FF FF FF
  23++C238 FE FE FE FE  	defb 254, 254, 254, 254, 254, 254, 254, 254  ; char block [1, 1]
  23++C23C FE FE FE FE
  24++C240              	; StepBody:
  25++C240
  26++C240 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 0]
  26++C244 FF FF FF FF
  27++C248 00 FF FF FF  	defb   0, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 0]
  27++C24C FF FF FF FF
  28++C250 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [0, 1]
  28++C254 FF FF FF FF
  29++C258 FF FF FF FF  	defb 255, 255, 255, 255, 255, 255, 255, 255  ; char block [1, 1]
  29++C25C FF FF FF FF
  30++C260              	;Grass:
  31++C260
  32++C260 00 6D 45 E5  	defb   0, 109,  69, 229, 255, 255, 239, 239  ; char block [0, 0]
  32++C264 FF FF EF EF
  33++C268 36 A4 3E FE  	defb  54, 164,  62, 254, 255, 239, 239, 239  ; char block [1, 0]
  33++C26C FF EF EF EF
  34++C270 EF FD 29 AF  	defb 239, 253,  41, 175, 174, 174, 239, 255  ; char block [0, 1]
  34++C274 AE AE EF FF
  35++C278 EF FE BE B6  	defb 239, 254, 190, 182, 180, 183, 247, 255  ; char block [1, 1]
  35++C27C B4 B7 F7 FF
  36++C280
  37++C280              	;Earth:
  38++C280
  39++C280 00 7C 7E 7E  	defb   0, 124, 126, 126, 126, 126,  62,   0  ; char block [0, 0]
  39++C284 7E 7E 3E 00
  40++C288 FF 83 81 81  	defb 255, 131, 129, 129, 129, 129, 193, 255  ; char block [1, 0]
  40++C28C 81 81 C1 FF
  41++C290 FF 83 81 81  	defb 255, 131, 129, 129, 129, 129, 193, 255  ; char block [0, 1]
  41++C294 81 81 C1 FF
  42++C298 00 7C 7E 7E  	defb   0, 124, 126, 126, 126, 126,  62,   0  ; char block [1, 1]
  42++C29C 7E 7E 3E 00
  43++C2A0
  44++C2A0              	;Fence1:
  45++C2A0
  46++C2A0 57 37 57 37  	defb  87,  55,  87,  55,  87,  55,  87,  55  ; char block [0, 0]
  46++C2A4 57 37 57 37
  47++C2A8 EF 6F 7D 7D  	defb 239, 111, 125, 125, 255, 247, 247, 247  ; char block [1, 0]
  47++C2AC FF F7 F7 F7
  48++C2B0 5F 3F 5F 3F  	defb  95,  63,  95,  63,  87,  55,  87,  55  ; char block [0, 1]
  48++C2B4 57 37 57 37
  49++C2B8 7F 7F 7F 7D  	defb 127, 127, 127, 125, 109, 109, 109, 239  ; char block [1, 1]
  49++C2BC 6D 6D 6D EF
  50++C2C0
  51++C2C0              	; Sky:
  52++C2C0
  53++C2C0 FF FF FF...  	defs 32,255
  54++C2E0
  55++C2E0              	; Tunnel
  56++C2E0 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [0, 0]
  56++C2E4 01 00 00 00
  57++C2E8 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [1, 0]
  57++C2EC C0 E0 70 38
  58++C2F0 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [0, 1]
  58++C2F4 C0 E0 70 38
  59++C2F8 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [1, 1]
  59++C2FC 01 00 00 00
  60++C300
  61++C300              	; Fence Block
  62++C300 00 3F 57 37  	defb   0,  63,  87,  55,  87,  55,  93,   0  ; char block [0, 0]
  62++C304 57 37 5D 00
  63++C308 00 6E 7C 7C  	defb   0, 110, 124, 124, 254, 246, 246,   0  ; char block [1, 0]
  63++C30C FE F6 F6 00
  64++C310 55 2A 5F 3F  	defb  85,  42,  95,  63,  87,  55,  87,  55  ; char block [0, 1]
  64++C314 57 37 57 37
  65++C318 55 2A 7F 7D  	defb  85,  42, 127, 125, 109, 109, 109, 239  ; char block [1, 1]
  65++C31C 6D 6D 6D EF
  66++C320
  67++C320              	; Cave Wall
  68++C320
  69++C320 00 00 00 00  	defb   0,   0,   0,   0,   0,  32,   0,   0  ; char block [0, 0]
  69++C324 00 20 00 00
  70++C328 00 00 80 00  	defb   0,   0, 128,   0,   0,   2,   0,   0  ; char block [1, 0]
  70++C32C 00 02 00 00
  71++C330 00 00 10 00  	defb   0,   0,  16,   0,   0,   0,   0,   0  ; char block [0, 1]
  71++C334 00 00 00 00
  72++C338 00 00 00 00  	defb   0,   0,   0,   0,   0,   0,  32,   0  ; char block [1, 1]
  72++C33C 00 00 20 00
  73++C340
  74++C340              	; Cage
  75++C340 1C 0E 07 03  	defb  28,  14,   7,   3,   1,   0,   0,   0  ; char block [0, 0]
  75++C344 01 00 00 00
  76++C348 7A 7C 7A 7C  	defb 122, 124, 122, 124, 122, 124, 122, 124  ; char block [1, 0]
  76++C34C 7A 7C 7A 7C
  77++C350 00 00 00 80  	defb   0,   0,   0, 128, 192, 224, 112,  56  ; char block [0, 1]
  77++C354 C0 E0 70 38
  78++C358 7A 7C 7A 7C  	defb 122, 124, 122, 124, 122, 124, 122, 124  ; char block [1, 1]
  78++C35C 7A 7C 7A 7C
  79++C360
  80++C360
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgchars.asm
  70+ C360
  71+ C360              	org $c600
  72+ C600              	;bg_chars_attrs:
  73+ C600
  74+ C600
  75+ C600              			include "includes/bgattrs.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgattrs.asm
   1++C600              	; block
   2++C600 82 82        	defb   2+128,   2+128
   3++C602 82 82        	defb   2+128,   2+128
   4++C604              	; step
   5++C604 87 87        	defb   7+128,   7+128
   6++C606 07 07        	defb   7,   7
   7++C608              	; step body
   8++C608 87 87        	defb   7+128,   7+128
   9++C60A 07 07        	defb   7,   7
  10++C60C
  11++C60C              	; grass
  12++C60C 44 44        	defb  68,  68
  13++C60E 04 04        	defb   4,   4
  14++C610
  15++C610              	; earth
  16++C610 96 A9        	defb  22+128,  41+128
  17++C612 A9 96        	defb  41+128,  22+128
  18++C614
  19++C614              	; fence1
  20++C614 46 46        	defb  70,  70
  21++C616 46 46        	defb  70,  70
  22++C618
  23++C618              	; sky
  24++C618 45           	defb %01000101
  25++C619 45           	defb %01000101
  26++C61A 45           	defb %01000101
  27++C61B 45           	defb %01000101
  28++C61C
  29++C61C              	; Tunnel
  30++C61C 45 45 45 45  	defb 69,69,69,69
  31++C620
  32++C620              	; Fence Block
  33++C620 C6 C6 06 06  	defb 70+128,70+128,%00000110,%00000110
  34++C624
  35++C624              	; Cave Wall
  36++C624 07 07 07 07  	defb 7,7,7,7
  37++C628
  38++C628              	; Cage
  39++C628              	;defb   0,  79
  40++C628              	;defb   0,  79
  41++C628
  42++C628 45 13 45 13  	defb 69,19,69,19
  43++C62C
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/bgattrs.asm
  76+ C62C
  77+ C62C              	org $c700
  78+ C700              	;blox:
  79+ C700 00           			defb $00
  80+ C701 01 02 03 04  			defb $01,$02,$03,$04
  81+ C705 05 06 07 08  			defb $05,$06,$07,$08
  82+ C709 09 0A 0B 8C  			defb $09,$0a,$0b,$0c+128
  83+ C70D 8D 8E 8F 10  			defb $0d+128,$0e+128,$0f+128,$10
  84+ C711 11 12 13 14  			defb $11,$12,$13,$14
  85+ C715 15 16 17 18  			defb $15,$16,$17,$18
  86+ C719 19 1A 1B 1C  			defb $19,$1a,$1b,$1c
  87+ C71D 1D 1E 1F 20  			defb $1d,$1e,$1f,$20
  88+ C721 21 22 23 24  			defb $21,$22,$23,$24
  89+ C725 25 26 27 28  			defb $25,$26,$27,$28
  90+ C729 A9 2A AB 2C  			defb $29+128,$2a,$2b+128,$2c
  91+ C72D
  92+ C72D
  93+ C72D              			;    player can jump up 2 blocks.
  94+ C72D              			;    always have blocks 2 spaces apart on height
  95+ C72D              			; can jump 3 blocks and up 1
  96+ C72D
  97+ C72D              			; you cannot jump  4 accross 2 up,
  98+ C72D              			; you can jump 3 accross 2 up, but not 3 up
  99+ C72D              			; you can jump 3 accross
 100+ C72D
 101+ C72D
 102+ C72D
 103+ C72D
 104+ C72D
 105+ C72D
 106+ C72D              	; 768 * 7 = 5376 = $1500
 107+ C72D              	org $c800
 108+ C800
 109+ C800 00 00 00...  			defs 768*6
 110+ DA00
 111+ DA00              	org $da00
 112+ DA00              	;scratch:
 113+ DA00 00 00 00...  		defs 8,0
 114+ DA08
 115+ DA08              	;keygfx:
 116+ DA08
 117+ DA08 FF           		defb %11111111
 118+ DA09 C3           		defb %11000011
 119+ DA0A 99           		defb %10011001
 120+ DA0B BD           		defb %10111101
 121+ DA0C BD           		defb %10111101
 122+ DA0D 99           		defb %10011001
 123+ DA0E C3           		defb %11000011
 124+ DA0F FF           		defb %11111111
 125+ DA10
 126+ DA10 FF           		defb %11111111
 127+ DA11 E7           		defb %11100111
 128+ DA12 DB           		defb %11011011
 129+ DA13 DB           		defb %11011011
 130+ DA14 DB           		defb %11011011
 131+ DA15 DB           		defb %11011011
 132+ DA16 E7           		defb %11100111
 133+ DA17 FF           		defb %11111111
 134+ DA18
 135+ DA18 FF           		defb %11111111
 136+ DA19 E7           		defb %11100111
 137+ DA1A E7           		defb %11100111
 138+ DA1B E7           		defb %11100111
 139+ DA1C E7           		defb %11100111
 140+ DA1D E7           		defb %11100111
 141+ DA1E E7           		defb %11100111
 142+ DA1F FF           		defb %11111111
 143+ DA20
 144+ DA20 FF           		defb %11111111
 145+ DA21 E7           		defb %11100111
 146+ DA22 DB           		defb %11011011
 147+ DA23 DB           		defb %11011011
 148+ DA24 DB           		defb %11011011
 149+ DA25 DB           		defb %11011011
 150+ DA26 E7           		defb %11100111
 151+ DA27 FF           		defb %11111111
 152+ DA28
 153+ DA28
 154+ DA28
 155+ DA28
 156+ DA28
 157+ DA28              		; storage area for expanded sprite
 158+ DA28              	; sprite is stored as a 3x3 image with mask, and is expanded to 4 shifted 4x3 images
 159+ DA28              	org $db00
 160+ DB00              	;sprite_expand_1
 161+ DB00 00 00 00...  				defs 300h
 162+ DE00 00 00 00...  				defs 300h
 163+ E100 00 00 00...  				defs 300h
 164+ E400 00 00 00...  				defs 300h
 165+ E700              	;sprite_expand_2
 166+ E700 00 00 00...  				defs 300h
 167+ EA00 00 00 00...  				defs 300h
 168+ ED00 00 00 00...  				defs 300h
 169+ F000 00 00 00...  				defs 300h
 170+ F300
 171+ F300              	org $f300
 172+ F300              	include "includes/screens02.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/screens02.asm
   1++F300              ; BANK 01 SCREENS
   2++F300              	org $f300
   3++F300
   4++F300 00 F4               defw screen_world02_0
   5++F302 2E F4               defw screen_world02_1
   6++F304 5F F4               defw screen_world02_2
   7++F306 7D F4               defw screen_world02_3
   8++F308 9C F4               defw screen_world02_4
   9++F30A AC F4               defw screen_world02_5
  10++F30C CF F4               defw screen_world02_6
  11++F30E DF F4               defw screen_world02_7
  12++F310 16 F5               defw screen_world02_8
  13++F312 35 F5               defw screen_world02_9
  14++F314 58 F5               defw screen_world02_10
  15++F316 79 F5               defw screen_world02_11
  16++F318 B3 F5               defw screen_world02_12
  17++F31A C3 F5               defw screen_world02_13
  18++F31C D3 F5               defw screen_world02_14
  19++F31E E3 F5               defw screen_world02_15
  20++F320 FE F5               defw screen_world02_16
  21++F322
  22++F322 0E F6               defw screen_world02_17
  23++F324 1E F6               defw screen_world02_18
  24++F326 2E F6               defw screen_world02_19
  25++F328 49 F6               defw screen_world02_20
  26++F32A 59 F6               defw screen_world02_21
  27++F32C 69 F6               defw screen_world02_22
  28++F32E 79 F6               defw screen_world02_23
  29++F330 94 F6               defw screen_world02_24
  30++F332 A4 F6               defw screen_world02_25
  31++F334 B4 F6               defw screen_world02_26
  32++F336 C4 F6               defw screen_world02_27
  33++F338 DF F6               defw screen_world02_28
  34++F33A EF F6               defw screen_world02_29
  35++F33C FF F6               defw screen_world02_30
  36++F33E 0F F7               defw screen_world02_31
  37++F340
  38++F340              	org $f400
  39++F400
  40++F400              screen_world02_0:
  41++F400                   include "../screens/world02/screen0.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen0.asm
   1++F400
   2++F400
   3++F400              		; sprite 1 graphics to expand
   4++F400 00 60        		defw sprite_unex_0
   5++F402
   6++F402              		; sprite 2 graphics to expand
   7++F402 40 62        		defw sprite_unex_1
   8++F404
   9++F404              		; read block number 1st (right most)
  10++F404              		; read quantity second
  11++F404
  12++F404              	; 2019: xxxx is zero based, so 0=1,15=16 blocks
  13++F404              	; yyyy is the zero based tile
  14++F404
  15++F404              	; xxxxyyyy
  16++F404
  17++F404 20           	defb %00100000
  18++F405 C6           	defb %11000110
  19++F406 10           	defb %00010000
  20++F407 D6           	defb %11010110
  21++F408 10           	defb %00010000
  22++F409 D6           	defb %11010110
  23++F40A 10           	defb %00010000
  24++F40B D6           	defb %11010110
  25++F40C 10           	defb %00010000
  26++F40D D5           	defb %11010101
  27++F40E 10           	defb %00010000
  28++F40F D5           	defb %11010101
  29++F410 10           	defb %00010000
  30++F411 D5           	defb %11010101
  31++F412 10           	defb %00010000
  32++F413 B5           	defb %10110101
  33++F414 08           	defb %00001000
  34++F415 05           	defb %00000101
  35++F416 10           	defb %00010000
  36++F417 01           	defb %00000001
  37++F418 02           	defb %00000010
  38++F419 01           	defb %00000001
  39++F41A A3           	defb %10100011
  40++F41B F4           	defb %11110100
  41++F41C FF           	defb %11111111
  42++F41D
  43++F41D
  44++F41D              	; sprites
  45++F41D
  46++F41D              	; no of sprites  (including player)
  47++F41D 03           	defb 3
  48++F41E
  49++F41E              	; colour (hb) and active pause (lb)
  50++F41E 51           	defb %01010001
  51++F41F              	; xpos /2 (hb) and ypos /2 (lb)
  52++F41F 1B           	defb %00011011
  53++F420              	; xmin /2 (hb) and xmax /2 (lb)
  54++F420 0E           	defb %00001110
  55++F421              	; sprite buffer
  56++F421 00 D4        	defw sprite_buffer_2
  57++F423              	; gfx
  58++F423 DB           	defb sprite_expand_1/256
  59++F424              	; bank count and reset (eg 5 and 5)
  60++F424              	; so the pause between animation fames
  61++F424 55           	defb %01010101
  62++F425              	; direction (1 or -1)
  63++F425 01           	defb %00000001
  64++F426
  65++F426              	; colour (hb) and active pause (lb)
  66++F426 55           	defb %01010101
  67++F427              	; xpos /2 (hb) and ypos /2 (lb)
  68++F427 7B           	defb %01111011
  69++F428              	; xmin /2 (hb) and xmax /2 (lb)
  70++F428 0E           	defb %00001110
  71++F429              	; sprite buffer
  72++F429 00 D7        	defw sprite_buffer_3
  73++F42B              	; gfx
  74++F42B E7           	defb sprite_expand_2/256
  75++F42C              	; bank count and reset (eg 5 and 5)
  76++F42C              	; so the pause between animation fames
  77++F42C 55           	defb %01010101
  78++F42D              	; direction (1 or -1)
  79++F42D 01           	defb %00000001
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen0.asm
  42++F42E              screen_world02_1:
  43++F42E                   include "../screens/world02/screen1.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen1.asm
   1++F42E
   2++F42E
   3++F42E              		; sprite 1 graphics to expand
   4++F42E 00 60        		defw sprite_unex_0
   5++F430
   6++F430              		; sprite 2 graphics to expand
   7++F430 40 62        		defw sprite_unex_1
   8++F432
   9++F432              		; read block number 1st (right most)
  10++F432              		; read quantity second
  11++F432
  12++F432 F6           	defb %11110110
  13++F433 F6           	defb %11110110
  14++F434 F6           	defb %11110110
  15++F435 F6           	defb %11110110
  16++F436 F5           	defb %11110101
  17++F437 15           	defb %00010101
  18++F438 50           	defb %01010000
  19++F439 85           	defb %10000101
  20++F43A 08           	defb %00001000
  21++F43B 00           	defb %00000000
  22++F43C 37           	defb %00110111
  23++F43D 00           	defb %00000000
  24++F43E 95           	defb %10010101
  25++F43F 00           	defb %00000000
  26++F440 37           	defb %00110111
  27++F441 00           	defb %00000000
  28++F442 55           	defb %01010101
  29++F443 08           	defb %00001000
  30++F444 05           	defb %00000101
  31++F445 13           	defb %00010011
  32++F446 00           	defb %00000000
  33++F447 37           	defb %00110111
  34++F448 00           	defb %00000000
  35++F449 73           	defb %01110011
  36++F44A
  37++F44A 24           	defb %00100100
  38++F44B 37           	defb %00110111
  39++F44C 84           	defb %10000100
  40++F44D
  41++F44D FF           	defb %11111111
  42++F44E
  43++F44E
  44++F44E
  45++F44E
  46++F44E
  47++F44E              	; sprites
  48++F44E
  49++F44E              	; no of sprites
  50++F44E 03           	defb 3
  51++F44F
  52++F44F              	; colour (hb) and active pause (lb)
  53++F44F 61           	defb %01100001
  54++F450              	; xpos /2 (hb) and ypos /2 (lb)
  55++F450              	; xxxx ypos xxxx xpos
  56++F450 1C           	defb %00011100
  57++F451              	; xmin /2 (hb) and xmax /2 (lb)
  58++F451 0E           	defb %00001110
  59++F452              	; sprite buffer
  60++F452 00 D4        	defw sprite_buffer_2
  61++F454              	; gfx
  62++F454 DB           	defb sprite_expand_1/256
  63++F455              	; bank count and reset (eg 5 and 5)
  64++F455 55           	defb %01010101
  65++F456              	; direction
  66++F456 01           	defb %00000001
  67++F457
  68++F457              	; colour (hb) and active pause (lb)
  69++F457 63           	defb %01100011
  70++F458              	; xpos /2 (hb) and ypos /2 (lb)
  71++F458              	; xxxx ypos xxxx xpos
  72++F458 33           	defb %00110011
  73++F459              	; xmin /2 (hb) and xmax /2 (lb)
  74++F459 26           	defb %00100110
  75++F45A              	; sprite buffer
  76++F45A 00 D7        	defw sprite_buffer_3
  77++F45C              	; gfx
  78++F45C E7           	defb sprite_expand_2/256
  79++F45D              	; bank count and reset (eg 5 and 5)
  80++F45D 55           	defb %01010101
  81++F45E              	; direction
  82++F45E 01           	defb %00000001
  83++F45F
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen1.asm
  44++F45F              screen_world02_2:
  45++F45F                   include "../screens/world02/screen2.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen2.asm
   1++F45F
   2++F45F
   3++F45F              		; sprite 1 graphics to expand
   4++F45F 00 60        		defw sprite_unex_0
   5++F461
   6++F461              		; sprite 2 graphics to expand
   7++F461 40 62        		defw sprite_unex_1
   8++F463
   9++F463              		; read block number 1st (right most)
  10++F463              		; read quantity second
  11++F463 D6           	defb %11010110
  12++F464 10           	defb %00010000
  13++F465 D6           	defb %11010110
  14++F466 10           	defb %00010000
  15++F467 D6           	defb %11010110
  16++F468 17           	defb %00010111
  17++F469 D6           	defb %11010110
  18++F46A 17           	defb %00010111
  19++F46B 85           	defb %10000101
  20++F46C 48           	defb %01001000
  21++F46D 10           	defb %00010000
  22++F46E 45           	defb %01000101
  23++F46F 08           	defb %00001000
  24++F470 75           	defb %01110101
  25++F471 10           	defb %00010000
  26++F472 15           	defb %00010101
  27++F473 08           	defb %00001000
  28++F474 A5           	defb %10100101
  29++F475 10           	defb %00010000
  30++F476 D5           	defb %11010101
  31++F477 10           	defb %00010000
  32++F478 D3           	defb %11010011
  33++F479 10           	defb %00010000
  34++F47A F4           	defb %11110100
  35++F47B FF           	defb %11111111
  36++F47C
  37++F47C
  38++F47C              	; sprites
  39++F47C
  40++F47C              	; no of sprites
  41++F47C 01           	defb 1
  42++F47D
  43++F47D
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen2.asm
  46++F47D              screen_world02_3:
  47++F47D                   include "../screens/world02/screen3.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen3.asm
   1++F47D
   2++F47D
   3++F47D
   4++F47D              		; Sprite 1 graphics to expand
   5++F47D 00 60        		DEFW sprite_unex_0
   6++F47F
   7++F47F              		; Sprite 2 graphics to expand
   8++F47F 00 60        		DEFW sprite_unex_0
   9++F481
  10++F481              		; Read Block Number 1st (Right Most)
  11++F481              		; Read Quantity Second
  12++F481 F0           	defb %11110000
  13++F482 00           	defb %00000000
  14++F483 D7           	defb %11010111
  15++F484 00           	defb %00000000
  16++F485 E7           	defb %11100111
  17++F486 00           	defb %00000000
  18++F487 E7           	defb %11100111
  19++F488 D0           	defb %11010000
  20++F489 17           	defb %00010111
  21++F48A 00           	defb %00000000
  22++F48B C4           	defb %11000100
  23++F48C 17           	defb %00010111
  24++F48D D4           	defb %11010100
  25++F48E 17           	defb %00010111
  26++F48F D4           	defb %11010100
  27++F490 17           	defb %00010111
  28++F491 74           	defb %01110100
  29++F492 17           	defb %00010111
  30++F493 34           	defb %00110100
  31++F494 17           	defb %00010111
  32++F495 44           	defb %01000100
  33++F496 47           	defb %01000111
  34++F497 34           	defb %00110100
  35++F498 17           	defb %00010111
  36++F499 04           	defb %00000100
  37++F49A FF           	defb %11111111
  38++F49B
  39++F49B
  40++F49B
  41++F49B              	; Sprites
  42++F49B
  43++F49B              	; No of sprites
  44++F49B 01           	DEFB 1
  45++F49C
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen3.asm
  48++F49C              screen_world02_4:
  49++F49C                   include "../screens/world02/screen4.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen4.asm
   1++F49C
   2++F49C
   3++F49C              		; Sprite 1 graphics to expand
   4++F49C 00 60        		DEFW sprite_unex_0
   5++F49E
   6++F49E              		; Sprite 2 graphics to expand
   7++F49E 00 60        		DEFW sprite_unex_0
   8++F4A0
   9++F4A0              		; Read Block Number 1st (Right Most)
  10++F4A0              		; Read Quantity Second
  11++F4A0
  12++F4A0 F4           	defb %11110100
  13++F4A1 F4           	defb %11110100
  14++F4A2 F4           	defb %11110100
  15++F4A3 F4           	defb %11110100
  16++F4A4 F4           	defb %11110100
  17++F4A5 F4           	defb %11110100
  18++F4A6 F4           	defb %11110100
  19++F4A7 F4           	defb %11110100
  20++F4A8 F4           	defb %11110100
  21++F4A9 F4           	defb %11110100
  22++F4AA FF           	defb %11111111
  23++F4AB
  24++F4AB
  25++F4AB
  26++F4AB              	; Sprites
  27++F4AB
  28++F4AB              	; No of sprites
  29++F4AB 01           	DEFB 1
  30++F4AC
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen4.asm
  50++F4AC              screen_world02_5:
  51++F4AC                   include "../screens/world02/screen5.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen5.asm
   1++F4AC
   2++F4AC
   3++F4AC
   4++F4AC              		; Sprite 1 graphics to expand
   5++F4AC 00 60        		DEFW sprite_unex_0
   6++F4AE
   7++F4AE              		; Sprite 2 graphics to expand
   8++F4AE 00 60        		DEFW sprite_unex_0
   9++F4B0
  10++F4B0              		; Read Block Number 1st (Right Most)
  11++F4B0              		; Read Quantity Second
  12++F4B0
  13++F4B0 24           	defb %00100100
  14++F4B1 37           	defb %00110111
  15++F4B2 B4           	defb %10110100
  16++F4B3 37           	defb %00110111
  17++F4B4 B4           	defb %10110100
  18++F4B5 27           	defb %00100111
  19++F4B6 03           	defb %00000011
  20++F4B7 B4           	defb %10110100
  21++F4B8 27           	defb %00100111
  22++F4B9 00           	defb %00000000
  23++F4BA B4           	defb %10110100
  24++F4BB 03           	defb %00000011
  25++F4BC 27           	defb %00100111
  26++F4BD B4           	defb %10110100
  27++F4BE 00           	defb %00000000
  28++F4BF 27           	defb %00100111
  29++F4C0 B4           	defb %10110100
  30++F4C1 27           	defb %00100111
  31++F4C2 03           	defb %00000011
  32++F4C3 B4           	defb %10110100
  33++F4C4 27           	defb %00100111
  34++F4C5 00           	defb %00000000
  35++F4C6 B4           	defb %10110100
  36++F4C7 03           	defb %00000011
  37++F4C8 27           	defb %00100111
  38++F4C9 B4           	defb %10110100
  39++F4CA 00           	defb %00000000
  40++F4CB 27           	defb %00100111
  41++F4CC 84           	defb %10000100
  42++F4CD FF           	defb %11111111
  43++F4CE
  44++F4CE
  45++F4CE
  46++F4CE
  47++F4CE
  48++F4CE              	; Sprites
  49++F4CE
  50++F4CE              	; No of sprites
  51++F4CE 01           	DEFB 1
  52++F4CF
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen5.asm
  52++F4CF              screen_world02_6:
  53++F4CF                   include "../screens/world02/screen6.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen6.asm
   1++F4CF
   2++F4CF
   3++F4CF
   4++F4CF              		; Sprite 1 graphics to expand
   5++F4CF 00 60        		DEFW sprite_unex_0
   6++F4D1
   7++F4D1              		; Sprite 2 graphics to expand
   8++F4D1 00 60        		DEFW sprite_unex_0
   9++F4D3
  10++F4D3              		; Read Block Number 1st (Right Most)
  11++F4D3              		; Read Quantity Second
  12++F4D3
  13++F4D3 F4           	defb %11110100
  14++F4D4 F4           	defb %11110100
  15++F4D5 F4           	defb %11110100
  16++F4D6 F4           	defb %11110100
  17++F4D7 F4           	defb %11110100
  18++F4D8 F4           	defb %11110100
  19++F4D9 F4           	defb %11110100
  20++F4DA F4           	defb %11110100
  21++F4DB F4           	defb %11110100
  22++F4DC F4           	defb %11110100
  23++F4DD FF           	defb %11111111
  24++F4DE
  25++F4DE
  26++F4DE
  27++F4DE              	; Sprites
  28++F4DE
  29++F4DE              	; No of sprites
  30++F4DE 01           	DEFB 1
  31++F4DF
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen6.asm
  54++F4DF              screen_world02_7:
  55++F4DF                   include "../screens/world02/screen7.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen7.asm
   1++F4DF
   2++F4DF
   3++F4DF
   4++F4DF              		; Sprite 1 graphics to expand
   5++F4DF 00 60        		DEFW sprite_unex_0
   6++F4E1
   7++F4E1              		; Sprite 2 graphics to expand
   8++F4E1 00 60        		DEFW sprite_unex_0
   9++F4E3
  10++F4E3              		; Read Block Number 1st (Right Most)
  11++F4E3              		; Read Quantity Second
  12++F4E3
  13++F4E3 24           	defb %00100100
  14++F4E4 47           	defb %01000111
  15++F4E5 44           	defb %01000100
  16++F4E6 17           	defb %00010111
  17++F4E7 44           	defb %01000100
  18++F4E8 17           	defb %00010111
  19++F4E9 04           	defb %00000100
  20++F4EA 07           	defb %00000111
  21++F4EB 44           	defb %01000100
  22++F4EC 17           	defb %00010111
  23++F4ED 44           	defb %01000100
  24++F4EE 47           	defb %01000111
  25++F4EF 34           	defb %00110100
  26++F4F0 17           	defb %00010111
  27++F4F1 44           	defb %01000100
  28++F4F2 37           	defb %00110111
  29++F4F3 44           	defb %01000100
  30++F4F4 17           	defb %00010111
  31++F4F5 54           	defb %01010100
  32++F4F6 17           	defb %00010111
  33++F4F7 54           	defb %01010100
  34++F4F8 17           	defb %00010111
  35++F4F9 44           	defb %01000100
  36++F4FA 37           	defb %00110111
  37++F4FB 44           	defb %01000100
  38++F4FC 17           	defb %00010111
  39++F4FD 34           	defb %00110100
  40++F4FE 57           	defb %01010111
  41++F4FF 34           	defb %00110100
  42++F500 17           	defb %00010111
  43++F501 24           	defb %00100100
  44++F502 77           	defb %01110111
  45++F503 24           	defb %00100100
  46++F504 17           	defb %00010111
  47++F505 14           	defb %00010100
  48++F506 97           	defb %10010111
  49++F507 14           	defb %00010100
  50++F508 17           	defb %00010111
  51++F509 14           	defb %00010100
  52++F50A 17           	defb %00010111
  53++F50B 04           	defb %00000100
  54++F50C 37           	defb %00110111
  55++F50D 04           	defb %00000100
  56++F50E 17           	defb %00010111
  57++F50F 14           	defb %00010100
  58++F510 17           	defb %00010111
  59++F511 04           	defb %00000100
  60++F512 57           	defb %01010111
  61++F513 14           	defb %00010100
  62++F514 FF           	defb %11111111
  63++F515
  64++F515
  65++F515
  66++F515
  67++F515
  68++F515              	; Sprites
  69++F515
  70++F515              	; No of sprites
  71++F515 01           	DEFB 1
  72++F516
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen7.asm
  56++F516              screen_world02_8:
  57++F516                   include "../screens/world02/screen8.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen8.asm
   1++F516
   2++F516
   3++F516
   4++F516              		; Sprite 1 graphics to expand
   5++F516 00 60        		DEFW sprite_unex_0
   6++F518
   7++F518              		; Sprite 2 graphics to expand
   8++F518 00 60        		DEFW sprite_unex_0
   9++F51A
  10++F51A              		; Read Block Number 1st (Right Most)
  11++F51A              		; Read Quantity Second
  12++F51A 04           	defb %00000100
  13++F51B D7           	defb %11010111
  14++F51C 14           	defb %00010100
  15++F51D D7           	defb %11010111
  16++F51E 14           	defb %00010100
  17++F51F D7           	defb %11010111
  18++F520 14           	defb %00010100
  19++F521 D7           	defb %11010111
  20++F522 14           	defb %00010100
  21++F523 27           	defb %00100111
  22++F524 83           	defb %10000011
  23++F525 27           	defb %00100111
  24++F526 04           	defb %00000100
  25++F527 27           	defb %00100111
  26++F528 84           	defb %10000100
  27++F529 23           	defb %00100011
  28++F52A 04           	defb %00000100
  29++F52B 17           	defb %00010111
  30++F52C 00           	defb %00000000
  31++F52D C4           	defb %11000100
  32++F52E E7           	defb %11100111
  33++F52F 04           	defb %00000100
  34++F530 00           	defb %00000000
  35++F531 D7           	defb %11010111
  36++F532 F4           	defb %11110100
  37++F533 FF           	defb %11111111
  38++F534
  39++F534
  40++F534
  41++F534
  42++F534
  43++F534              	; Sprites
  44++F534
  45++F534              	; No of sprites
  46++F534 01           	DEFB 1
  47++F535
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen8.asm
  58++F535              screen_world02_9:
  59++F535                   include "../screens/world02/screen9.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen9.asm
   1++F535
   2++F535
   3++F535
   4++F535              		; Sprite 1 graphics to expand
   5++F535 00 60        		DEFW sprite_unex_0
   6++F537
   7++F537              		; Sprite 2 graphics to expand
   8++F537 00 60        		DEFW sprite_unex_0
   9++F539
  10++F539              		; Read Block Number 1st (Right Most)
  11++F539              		; Read Quantity Second
  12++F539
  13++F539 24           	defb %00100100
  14++F53A 37           	defb %00110111
  15++F53B B4           	defb %10110100
  16++F53C 27           	defb %00100111
  17++F53D 03           	defb %00000011
  18++F53E B4           	defb %10110100
  19++F53F 03           	defb %00000011
  20++F540 17           	defb %00010111
  21++F541 00           	defb %00000000
  22++F542 B4           	defb %10110100
  23++F543 00           	defb %00000000
  24++F544 27           	defb %00100111
  25++F545 84           	defb %10000100
  26++F546 57           	defb %01010111
  27++F547 03           	defb %00000011
  28++F548 04           	defb %00000100
  29++F549 77           	defb %01110111
  30++F54A 53           	defb %01010011
  31++F54B 00           	defb %00000000
  32++F54C 04           	defb %00000100
  33++F54D 77           	defb %01110111
  34++F54E 74           	defb %01110100
  35++F54F 17           	defb %00010111
  36++F550 54           	defb %01010100
  37++F551 97           	defb %10010111
  38++F552 54           	defb %01010100
  39++F553 97           	defb %10010111
  40++F554 F4           	defb %11110100
  41++F555 54           	defb %01010100
  42++F556 FF           	defb %11111111
  43++F557
  44++F557
  45++F557
  46++F557
  47++F557              	; Sprites
  48++F557
  49++F557              	; No of sprites
  50++F557 01           	DEFB 1
  51++F558
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen9.asm
  60++F558              screen_world02_10:
  61++F558                   include "../screens/world02/screen10.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen10.asm
   1++F558
   2++F558
   3++F558              		; Sprite 1 graphics to expand
   4++F558 00 60        		DEFW sprite_unex_0
   5++F55A
   6++F55A              		; Sprite 2 graphics to expand
   7++F55A 00 60        		DEFW sprite_unex_0
   8++F55C
   9++F55C              		; Read Block Number 1st (Right Most)
  10++F55C              		; Read Quantity Second
  11++F55C
  12++F55C F4           	defb %11110100
  13++F55D F4           	defb %11110100
  14++F55E 14           	defb %00010100
  15++F55F 37           	defb %00110111
  16++F560 A4           	defb %10100100
  17++F561 77           	defb %01110111
  18++F562 64           	defb %01100100
  19++F563 A7           	defb %10100111
  20++F564 44           	defb %01000100
  21++F565 B7           	defb %10110111
  22++F566 24           	defb %00100100
  23++F567 07           	defb %00000111
  24++F568 24           	defb %00100100
  25++F569 17           	defb %00010111
  26++F56A 14           	defb %00010100
  27++F56B 87           	defb %10000111
  28++F56C 24           	defb %00100100
  29++F56D 17           	defb %00010111
  30++F56E 34           	defb %00110100
  31++F56F 67           	defb %01100111
  32++F570 24           	defb %00100100
  33++F571 17           	defb %00010111
  34++F572 54           	defb %01010100
  35++F573 37           	defb %00110111
  36++F574 34           	defb %00110100
  37++F575 17           	defb %00010111
  38++F576 A4           	defb %10100100
  39++F577 FF           	defb %11111111
  40++F578
  41++F578
  42++F578
  43++F578
  44++F578              	; Sprites
  45++F578
  46++F578              	; No of sprites
  47++F578 01           	DEFB 1
  48++F579
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen10.asm
  62++F579              screen_world02_11:
  63++F579                   include "../screens/world02/screen11.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen11.asm
   1++F579
   2++F579
   3++F579              		; Sprite 1 graphics to expand
   4++F579 00 60        		DEFW sprite_unex_0
   5++F57B
   6++F57B              		; Sprite 2 graphics to expand
   7++F57B 00 60        		DEFW sprite_unex_0
   8++F57D
   9++F57D              		; Read Block Number 1st (Right Most)
  10++F57D              		; Read Quantity Second
  11++F57D
  12++F57D 34           	defb %00110100
  13++F57E 47           	defb %01000111
  14++F57F 34           	defb %00110100
  15++F580 17           	defb %00010111
  16++F581 34           	defb %00110100
  17++F582 27           	defb %00100111
  18++F583 04           	defb %00000100
  19++F584 17           	defb %00010111
  20++F585 04           	defb %00000100
  21++F586 07           	defb %00000111
  22++F587 14           	defb %00010100
  23++F588 17           	defb %00010111
  24++F589 24           	defb %00100100
  25++F58A 17           	defb %00010111
  26++F58B 34           	defb %00110100
  27++F58C 27           	defb %00100111
  28++F58D 14           	defb %00010100
  29++F58E 17           	defb %00010111
  30++F58F 24           	defb %00100100
  31++F590 27           	defb %00100111
  32++F591 34           	defb %00110100
  33++F592 07           	defb %00000111
  34++F593 24           	defb %00100100
  35++F594 17           	defb %00010111
  36++F595 D4           	defb %11010100
  37++F596 17           	defb %00010111
  38++F597 04           	defb %00000100
  39++F598 2A           	defb %00101010
  40++F599 17           	defb %00010111
  41++F59A 54           	defb %01010100
  42++F59B 1A           	defb %00011010
  43++F59C 17           	defb %00010111
  44++F59D 04           	defb %00000100
  45++F59E 2A           	defb %00101010
  46++F59F 27           	defb %00100111
  47++F5A0 24           	defb %00100100
  48++F5A1 17           	defb %00010111
  49++F5A2 1A           	defb %00011010
  50++F5A3 17           	defb %00010111
  51++F5A4 04           	defb %00000100
  52++F5A5 2A           	defb %00101010
  53++F5A6 27           	defb %00100111
  54++F5A7 2A           	defb %00101010
  55++F5A8 17           	defb %00010111
  56++F5A9 1A           	defb %00011010
  57++F5AA 17           	defb %00010111
  58++F5AB 34           	defb %00110100
  59++F5AC 27           	defb %00100111
  60++F5AD 2A           	defb %00101010
  61++F5AE 17           	defb %00010111
  62++F5AF F4           	defb %11110100
  63++F5B0 44           	defb %01000100
  64++F5B1 FF           	defb %11111111
  65++F5B2
  66++F5B2
  67++F5B2
  68++F5B2
  69++F5B2
  70++F5B2
  71++F5B2              	; Sprites
  72++F5B2
  73++F5B2              	; No of sprites
  74++F5B2 01           	DEFB 1
  75++F5B3
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen11.asm
  64++F5B3              screen_world02_12:
  65++F5B3                   include "../screens/world02/screen12.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen12.asm
   1++F5B3
   2++F5B3
   3++F5B3
   4++F5B3              		; Sprite 1 graphics to expand
   5++F5B3 00 60        		DEFW sprite_unex_0
   6++F5B5
   7++F5B5              		; Sprite 2 graphics to expand
   8++F5B5 00 60        		DEFW sprite_unex_0
   9++F5B7
  10++F5B7              		; Read Block Number 1st (Right Most)
  11++F5B7              		; Read Quantity Second
  12++F5B7
  13++F5B7 F4           	defb %11110100
  14++F5B8 F4           	defb %11110100
  15++F5B9 F4           	defb %11110100
  16++F5BA F4           	defb %11110100
  17++F5BB F4           	defb %11110100
  18++F5BC F4           	defb %11110100
  19++F5BD F4           	defb %11110100
  20++F5BE F4           	defb %11110100
  21++F5BF F4           	defb %11110100
  22++F5C0 F4           	defb %11110100
  23++F5C1 FF           	defb %11111111
  24++F5C2
  25++F5C2
  26++F5C2
  27++F5C2              	; Sprites
  28++F5C2
  29++F5C2              	; No of sprites
  30++F5C2 01           	DEFB 1
  31++F5C3
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen12.asm
  66++F5C3              screen_world02_13:
  67++F5C3                   include "../screens/world02/screen13.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen13.asm
   1++F5C3
   2++F5C3
   3++F5C3              		; Sprite 1 graphics to expand
   4++F5C3 00 60        		DEFW sprite_unex_0
   5++F5C5
   6++F5C5              		; Sprite 2 graphics to expand
   7++F5C5 00 60        		DEFW sprite_unex_0
   8++F5C7
   9++F5C7              		; Read Block Number 1st (Right Most)
  10++F5C7              		; Read Quantity Second
  11++F5C7
  12++F5C7 F4           	defb %11110100
  13++F5C8 F4           	defb %11110100
  14++F5C9 F4           	defb %11110100
  15++F5CA F4           	defb %11110100
  16++F5CB F4           	defb %11110100
  17++F5CC F4           	defb %11110100
  18++F5CD F4           	defb %11110100
  19++F5CE F4           	defb %11110100
  20++F5CF F4           	defb %11110100
  21++F5D0 F4           	defb %11110100
  22++F5D1 FF           	defb %11111111
  23++F5D2
  24++F5D2
  25++F5D2
  26++F5D2              	; Sprites
  27++F5D2
  28++F5D2              	; No of sprites
  29++F5D2 01           	DEFB 1
  30++F5D3
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen13.asm
  68++F5D3              screen_world02_14:
  69++F5D3                   include "../screens/world02/screen14.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen14.asm
   1++F5D3
   2++F5D3
   3++F5D3
   4++F5D3              		; Sprite 1 graphics to expand
   5++F5D3 00 60        		DEFW sprite_unex_0
   6++F5D5
   7++F5D5              		; Sprite 2 graphics to expand
   8++F5D5 00 60        		DEFW sprite_unex_0
   9++F5D7
  10++F5D7              		; Read Block Number 1st (Right Most)
  11++F5D7              		; Read Quantity Second
  12++F5D7
  13++F5D7 F6           	defb %11110110
  14++F5D8 F6           	defb %11110110
  15++F5D9 F6           	defb %11110110
  16++F5DA F4           	defb %11110100
  17++F5DB F4           	defb %11110100
  18++F5DC F4           	defb %11110100
  19++F5DD F4           	defb %11110100
  20++F5DE F4           	defb %11110100
  21++F5DF F4           	defb %11110100
  22++F5E0 F4           	defb %11110100
  23++F5E1 FF           	defb %11111111
  24++F5E2
  25++F5E2
  26++F5E2
  27++F5E2              	; Sprites
  28++F5E2
  29++F5E2              	; No of sprites
  30++F5E2 01           	DEFB 1
  31++F5E3
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen14.asm
  70++F5E3              screen_world02_15:
  71++F5E3                   include "../screens/world02/screen15.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen15.asm
   1++F5E3
   2++F5E3
   3++F5E3              		; Sprite 1 graphics to expand
   4++F5E3 00 60        		DEFW sprite_unex_0
   5++F5E5
   6++F5E5              		; Sprite 2 graphics to expand
   7++F5E5 00 60        		DEFW sprite_unex_0
   8++F5E7
   9++F5E7              		; Read Block Number 1st (Right Most)
  10++F5E7              		; Read Quantity Second
  11++F5E7
  12++F5E7 C4           	defb %11000100
  13++F5E8 17           	defb %00010111
  14++F5E9 D4           	defb %11010100
  15++F5EA 17           	defb %00010111
  16++F5EB D4           	defb %11010100
  17++F5EC 17           	defb %00010111
  18++F5ED D4           	defb %11010100
  19++F5EE 17           	defb %00010111
  20++F5EF D4           	defb %11010100
  21++F5F0 17           	defb %00010111
  22++F5F1 D4           	defb %11010100
  23++F5F2 17           	defb %00010111
  24++F5F3 D4           	defb %11010100
  25++F5F4 17           	defb %00010111
  26++F5F5 D4           	defb %11010100
  27++F5F6 17           	defb %00010111
  28++F5F7 D4           	defb %11010100
  29++F5F8 17           	defb %00010111
  30++F5F9 D4           	defb %11010100
  31++F5FA 17           	defb %00010111
  32++F5FB 14           	defb %00010100
  33++F5FC FF           	defb %11111111
  34++F5FD
  35++F5FD
  36++F5FD
  37++F5FD
  38++F5FD
  39++F5FD              	; Sprites
  40++F5FD
  41++F5FD              	; No of sprites
  42++F5FD 01           	DEFB 1
  43++F5FE
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen15.asm
  72++F5FE              screen_world02_16:
  73++F5FE                   include "../screens/world02/screen16.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen16.asm
   1++F5FE
   2++F5FE
   3++F5FE
   4++F5FE
   5++F5FE              		; Sprite 1 graphics to expand
   6++F5FE 00 60        		DEFW sprite_unex_0
   7++F600
   8++F600              		; Sprite 2 graphics to expand
   9++F600 00 60        		DEFW sprite_unex_0
  10++F602
  11++F602              		; Read Block Number 1st (Right Most)
  12++F602              		; Read Quantity Second
  13++F602
  14++F602 F4           	defb %11110100
  15++F603 F4           	defb %11110100
  16++F604 F4           	defb %11110100
  17++F605 F4           	defb %11110100
  18++F606 F4           	defb %11110100
  19++F607 F4           	defb %11110100
  20++F608 F4           	defb %11110100
  21++F609 F4           	defb %11110100
  22++F60A F4           	defb %11110100
  23++F60B F4           	defb %11110100
  24++F60C FF           	defb %11111111
  25++F60D
  26++F60D
  27++F60D
  28++F60D              	; Sprites
  29++F60D
  30++F60D              	; No of sprites
  31++F60D 01           	DEFB 1
  32++F60E
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen16.asm
  74++F60E              screen_world02_17:
  75++F60E                   include "../screens/world02/screen17.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen17.asm
   1++F60E
   2++F60E
   3++F60E
   4++F60E              		; Sprite 1 graphics to expand
   5++F60E 00 60        		DEFW sprite_unex_0
   6++F610
   7++F610              		; Sprite 2 graphics to expand
   8++F610 00 60        		DEFW sprite_unex_0
   9++F612
  10++F612              		; Read Block Number 1st (Right Most)
  11++F612              		; Read Quantity Second
  12++F612
  13++F612 F4           	defb %11110100
  14++F613 F4           	defb %11110100
  15++F614 F4           	defb %11110100
  16++F615 F4           	defb %11110100
  17++F616 F4           	defb %11110100
  18++F617 F4           	defb %11110100
  19++F618 F4           	defb %11110100
  20++F619 F4           	defb %11110100
  21++F61A F4           	defb %11110100
  22++F61B F4           	defb %11110100
  23++F61C FF           	defb %11111111
  24++F61D
  25++F61D
  26++F61D
  27++F61D              	; Sprites
  28++F61D
  29++F61D              	; No of sprites
  30++F61D 01           	DEFB 1
  31++F61E
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen17.asm
  76++F61E              screen_world02_18:
  77++F61E                   include "../screens/world02/screen18.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen18.asm
   1++F61E
   2++F61E
   3++F61E
   4++F61E              		; Sprite 1 graphics to expand
   5++F61E 00 60        		DEFW sprite_unex_0
   6++F620
   7++F620              		; Sprite 2 graphics to expand
   8++F620 00 60        		DEFW sprite_unex_0
   9++F622
  10++F622              		; Read Block Number 1st (Right Most)
  11++F622              		; Read Quantity Second
  12++F622
  13++F622 F4           	defb %11110100
  14++F623 F4           	defb %11110100
  15++F624 F4           	defb %11110100
  16++F625 F4           	defb %11110100
  17++F626 F4           	defb %11110100
  18++F627 F4           	defb %11110100
  19++F628 F4           	defb %11110100
  20++F629 F4           	defb %11110100
  21++F62A F4           	defb %11110100
  22++F62B F4           	defb %11110100
  23++F62C FF           	defb %11111111
  24++F62D
  25++F62D
  26++F62D
  27++F62D              	; Sprites
  28++F62D
  29++F62D              	; No of sprites
  30++F62D 01           	DEFB 1
  31++F62E
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen18.asm
  78++F62E              screen_world02_19:
  79++F62E                   include "../screens/world02/screen19.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen19.asm
   1++F62E
   2++F62E
   3++F62E
   4++F62E              		; Sprite 1 graphics to expand
   5++F62E 00 60        		DEFW sprite_unex_0
   6++F630
   7++F630              		; Sprite 2 graphics to expand
   8++F630 00 60        		DEFW sprite_unex_0
   9++F632
  10++F632              		; Read Block Number 1st (Right Most)
  11++F632              		; Read Quantity Second
  12++F632
  13++F632 C4           	defb %11000100
  14++F633 17           	defb %00010111
  15++F634 D4           	defb %11010100
  16++F635 17           	defb %00010111
  17++F636 D4           	defb %11010100
  18++F637 17           	defb %00010111
  19++F638 D4           	defb %11010100
  20++F639 17           	defb %00010111
  21++F63A D4           	defb %11010100
  22++F63B 17           	defb %00010111
  23++F63C D4           	defb %11010100
  24++F63D 17           	defb %00010111
  25++F63E D4           	defb %11010100
  26++F63F 17           	defb %00010111
  27++F640 D4           	defb %11010100
  28++F641 17           	defb %00010111
  29++F642 D4           	defb %11010100
  30++F643 17           	defb %00010111
  31++F644 D4           	defb %11010100
  32++F645 17           	defb %00010111
  33++F646 14           	defb %00010100
  34++F647 FF           	defb %11111111
  35++F648
  36++F648
  37++F648
  38++F648
  39++F648
  40++F648              	; Sprites
  41++F648
  42++F648              	; No of sprites
  43++F648 01           	DEFB 1
  44++F649
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen19.asm
  80++F649              screen_world02_20:
  81++F649                   include "../screens/world02/screen20.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen20.asm
   1++F649
   2++F649
   3++F649
   4++F649
   5++F649              		; Sprite 1 graphics to expand
   6++F649 00 60        		DEFW sprite_unex_0
   7++F64B
   8++F64B              		; Sprite 2 graphics to expand
   9++F64B 00 60        		DEFW sprite_unex_0
  10++F64D
  11++F64D              		; Read Block Number 1st (Right Most)
  12++F64D              		; Read Quantity Second
  13++F64D
  14++F64D F4           	defb %11110100
  15++F64E F4           	defb %11110100
  16++F64F F4           	defb %11110100
  17++F650 F4           	defb %11110100
  18++F651 F4           	defb %11110100
  19++F652 F4           	defb %11110100
  20++F653 F4           	defb %11110100
  21++F654 F4           	defb %11110100
  22++F655 F4           	defb %11110100
  23++F656 F4           	defb %11110100
  24++F657 FF           	defb %11111111
  25++F658
  26++F658
  27++F658
  28++F658              	; Sprites
  29++F658
  30++F658              	; No of sprites
  31++F658 01           	DEFB 1
  32++F659
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen20.asm
  82++F659              screen_world02_21:
  83++F659                   include "../screens/world02/screen21.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen21.asm
   1++F659
   2++F659
   3++F659
   4++F659              		; Sprite 1 graphics to expand
   5++F659 00 60        		DEFW sprite_unex_0
   6++F65B
   7++F65B              		; Sprite 2 graphics to expand
   8++F65B 00 60        		DEFW sprite_unex_0
   9++F65D
  10++F65D              		; Read Block Number 1st (Right Most)
  11++F65D              		; Read Quantity Second
  12++F65D
  13++F65D F4           	defb %11110100
  14++F65E F4           	defb %11110100
  15++F65F F4           	defb %11110100
  16++F660 F4           	defb %11110100
  17++F661 F4           	defb %11110100
  18++F662 F4           	defb %11110100
  19++F663 F4           	defb %11110100
  20++F664 F4           	defb %11110100
  21++F665 F4           	defb %11110100
  22++F666 F4           	defb %11110100
  23++F667 FF           	defb %11111111
  24++F668
  25++F668
  26++F668
  27++F668              	; Sprites
  28++F668
  29++F668              	; No of sprites
  30++F668 01           	DEFB 1
  31++F669
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen21.asm
  84++F669              screen_world02_22:
  85++F669                   include "../screens/world02/screen22.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen22.asm
   1++F669
   2++F669
   3++F669
   4++F669
   5++F669              		; Sprite 1 graphics to expand
   6++F669 00 60        		DEFW sprite_unex_0
   7++F66B
   8++F66B              		; Sprite 2 graphics to expand
   9++F66B 00 60        		DEFW sprite_unex_0
  10++F66D
  11++F66D              		; Read Block Number 1st (Right Most)
  12++F66D              		; Read Quantity Second
  13++F66D
  14++F66D F4           	defb %11110100
  15++F66E F4           	defb %11110100
  16++F66F F4           	defb %11110100
  17++F670 F4           	defb %11110100
  18++F671 F4           	defb %11110100
  19++F672 F4           	defb %11110100
  20++F673 F4           	defb %11110100
  21++F674 F4           	defb %11110100
  22++F675 F4           	defb %11110100
  23++F676 F4           	defb %11110100
  24++F677 FF           	defb %11111111
  25++F678
  26++F678
  27++F678
  28++F678              	; Sprites
  29++F678
  30++F678              	; No of sprites
  31++F678 01           	DEFB 1
  32++F679
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen22.asm
  86++F679              screen_world02_23:
  87++F679                   include "../screens/world02/screen23.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen23.asm
   1++F679
   2++F679
   3++F679
   4++F679              		; Sprite 1 graphics to expand
   5++F679 00 60        		DEFW sprite_unex_0
   6++F67B
   7++F67B              		; Sprite 2 graphics to expand
   8++F67B 00 60        		DEFW sprite_unex_0
   9++F67D
  10++F67D              		; Read Block Number 1st (Right Most)
  11++F67D              		; Read Quantity Second
  12++F67D
  13++F67D C4           	defb %11000100
  14++F67E 17           	defb %00010111
  15++F67F D4           	defb %11010100
  16++F680 17           	defb %00010111
  17++F681 D4           	defb %11010100
  18++F682 17           	defb %00010111
  19++F683 D4           	defb %11010100
  20++F684 17           	defb %00010111
  21++F685 D4           	defb %11010100
  22++F686 17           	defb %00010111
  23++F687 D4           	defb %11010100
  24++F688 17           	defb %00010111
  25++F689 D4           	defb %11010100
  26++F68A 17           	defb %00010111
  27++F68B D4           	defb %11010100
  28++F68C 17           	defb %00010111
  29++F68D D4           	defb %11010100
  30++F68E 17           	defb %00010111
  31++F68F D4           	defb %11010100
  32++F690 17           	defb %00010111
  33++F691 14           	defb %00010100
  34++F692 FF           	defb %11111111
  35++F693
  36++F693
  37++F693
  38++F693
  39++F693
  40++F693              	; Sprites
  41++F693
  42++F693              	; No of sprites
  43++F693 01           	DEFB 1
  44++F694
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen23.asm
  88++F694              screen_world02_24:
  89++F694                   include "../screens/world02/screen24.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen24.asm
   1++F694
   2++F694
   3++F694              		; Sprite 1 graphics to expand
   4++F694 00 60        		DEFW sprite_unex_0
   5++F696
   6++F696              		; Sprite 2 graphics to expand
   7++F696 00 60        		DEFW sprite_unex_0
   8++F698
   9++F698              		; Read Block Number 1st (Right Most)
  10++F698              		; Read Quantity Second
  11++F698
  12++F698 F4           	defb %11110100
  13++F699 F4           	defb %11110100
  14++F69A F4           	defb %11110100
  15++F69B F4           	defb %11110100
  16++F69C F4           	defb %11110100
  17++F69D F4           	defb %11110100
  18++F69E F4           	defb %11110100
  19++F69F F4           	defb %11110100
  20++F6A0 F4           	defb %11110100
  21++F6A1 F4           	defb %11110100
  22++F6A2 FF           	defb %11111111
  23++F6A3
  24++F6A3
  25++F6A3
  26++F6A3              	; Sprites
  27++F6A3
  28++F6A3              	; No of sprites
  29++F6A3 01           	DEFB 1
  30++F6A4
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen24.asm
  90++F6A4              screen_world02_25:
  91++F6A4                   include "../screens/world02/screen25.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen25.asm
   1++F6A4
   2++F6A4
   3++F6A4
   4++F6A4              		; Sprite 1 graphics to expand
   5++F6A4 00 60        		DEFW sprite_unex_0
   6++F6A6
   7++F6A6              		; Sprite 2 graphics to expand
   8++F6A6 00 60        		DEFW sprite_unex_0
   9++F6A8
  10++F6A8              		; Read Block Number 1st (Right Most)
  11++F6A8              		; Read Quantity Second
  12++F6A8
  13++F6A8 F4           	defb %11110100
  14++F6A9 F4           	defb %11110100
  15++F6AA F4           	defb %11110100
  16++F6AB F4           	defb %11110100
  17++F6AC F4           	defb %11110100
  18++F6AD F4           	defb %11110100
  19++F6AE F4           	defb %11110100
  20++F6AF F4           	defb %11110100
  21++F6B0 F4           	defb %11110100
  22++F6B1 F4           	defb %11110100
  23++F6B2 FF           	defb %11111111
  24++F6B3
  25++F6B3
  26++F6B3
  27++F6B3              	; Sprites
  28++F6B3
  29++F6B3              	; No of sprites
  30++F6B3 01           	DEFB 1
  31++F6B4
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen25.asm
  92++F6B4              screen_world02_26:
  93++F6B4                   include "../screens/world02/screen26.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen26.asm
   1++F6B4
   2++F6B4
   3++F6B4
   4++F6B4              		; Sprite 1 graphics to expand
   5++F6B4 00 60        		DEFW sprite_unex_0
   6++F6B6
   7++F6B6              		; Sprite 2 graphics to expand
   8++F6B6 00 60        		DEFW sprite_unex_0
   9++F6B8
  10++F6B8              		; Read Block Number 1st (Right Most)
  11++F6B8              		; Read Quantity Second
  12++F6B8
  13++F6B8 F4           	defb %11110100
  14++F6B9 F4           	defb %11110100
  15++F6BA F4           	defb %11110100
  16++F6BB F4           	defb %11110100
  17++F6BC F4           	defb %11110100
  18++F6BD F4           	defb %11110100
  19++F6BE F4           	defb %11110100
  20++F6BF F4           	defb %11110100
  21++F6C0 F4           	defb %11110100
  22++F6C1 F4           	defb %11110100
  23++F6C2 FF           	defb %11111111
  24++F6C3
  25++F6C3
  26++F6C3
  27++F6C3              	; Sprites
  28++F6C3
  29++F6C3              	; No of sprites
  30++F6C3 01           	DEFB 1
  31++F6C4
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen26.asm
  94++F6C4              screen_world02_27:
  95++F6C4                   include "../screens/world02/screen27.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen27.asm
   1++F6C4
   2++F6C4
   3++F6C4
   4++F6C4              		; Sprite 1 graphics to expand
   5++F6C4 00 60        		DEFW sprite_unex_0
   6++F6C6
   7++F6C6              		; Sprite 2 graphics to expand
   8++F6C6 00 60        		DEFW sprite_unex_0
   9++F6C8
  10++F6C8              		; Read Block Number 1st (Right Most)
  11++F6C8              		; Read Quantity Second
  12++F6C8
  13++F6C8 C4           	defb %11000100
  14++F6C9 17           	defb %00010111
  15++F6CA D4           	defb %11010100
  16++F6CB 17           	defb %00010111
  17++F6CC D4           	defb %11010100
  18++F6CD 17           	defb %00010111
  19++F6CE D4           	defb %11010100
  20++F6CF 17           	defb %00010111
  21++F6D0 D4           	defb %11010100
  22++F6D1 17           	defb %00010111
  23++F6D2 D4           	defb %11010100
  24++F6D3 17           	defb %00010111
  25++F6D4 D4           	defb %11010100
  26++F6D5 17           	defb %00010111
  27++F6D6 D4           	defb %11010100
  28++F6D7 17           	defb %00010111
  29++F6D8 D4           	defb %11010100
  30++F6D9 17           	defb %00010111
  31++F6DA D4           	defb %11010100
  32++F6DB 17           	defb %00010111
  33++F6DC 14           	defb %00010100
  34++F6DD FF           	defb %11111111
  35++F6DE
  36++F6DE
  37++F6DE
  38++F6DE
  39++F6DE
  40++F6DE              	; Sprites
  41++F6DE
  42++F6DE              	; No of sprites
  43++F6DE 01           	DEFB 1
  44++F6DF
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen27.asm
  96++F6DF              screen_world02_28:
  97++F6DF                  include "../screens/world02/screen28.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen28.asm
   1++F6DF
   2++F6DF
   3++F6DF              		; Sprite 1 graphics to expand
   4++F6DF 00 60        		DEFW sprite_unex_0
   5++F6E1
   6++F6E1              		; Sprite 2 graphics to expand
   7++F6E1 00 60        		DEFW sprite_unex_0
   8++F6E3
   9++F6E3              		; Read Block Number 1st (Right Most)
  10++F6E3              		; Read Quantity Second
  11++F6E3
  12++F6E3 F4           	defb %11110100
  13++F6E4 F4           	defb %11110100
  14++F6E5 F4           	defb %11110100
  15++F6E6 F4           	defb %11110100
  16++F6E7 F4           	defb %11110100
  17++F6E8 F4           	defb %11110100
  18++F6E9 F4           	defb %11110100
  19++F6EA F4           	defb %11110100
  20++F6EB F4           	defb %11110100
  21++F6EC F4           	defb %11110100
  22++F6ED FF           	defb %11111111
  23++F6EE
  24++F6EE
  25++F6EE
  26++F6EE              	; Sprites
  27++F6EE
  28++F6EE              	; No of sprites
  29++F6EE 01           	DEFB 1
  30++F6EF
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen28.asm
  98++F6EF              screen_world02_29:
  99++F6EF                   include "../screens/world02/screen29.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen29.asm
   1++F6EF
   2++F6EF
   3++F6EF              		; Sprite 1 graphics to expand
   4++F6EF 00 60        		DEFW sprite_unex_0
   5++F6F1
   6++F6F1              		; Sprite 2 graphics to expand
   7++F6F1 00 60        		DEFW sprite_unex_0
   8++F6F3
   9++F6F3              		; Read Block Number 1st (Right Most)
  10++F6F3              		; Read Quantity Second
  11++F6F3
  12++F6F3 F4           	defb %11110100
  13++F6F4 F4           	defb %11110100
  14++F6F5 F4           	defb %11110100
  15++F6F6 F4           	defb %11110100
  16++F6F7 F4           	defb %11110100
  17++F6F8 F4           	defb %11110100
  18++F6F9 F4           	defb %11110100
  19++F6FA F4           	defb %11110100
  20++F6FB F4           	defb %11110100
  21++F6FC F4           	defb %11110100
  22++F6FD FF           	defb %11111111
  23++F6FE
  24++F6FE
  25++F6FE
  26++F6FE              	; Sprites
  27++F6FE
  28++F6FE              	; No of sprites
  29++F6FE 01           	DEFB 1
  30++F6FF
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen29.asm
 100++F6FF              screen_world02_30:
 101++F6FF                   include "../screens/world02/screen30.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen30.asm
   1++F6FF
   2++F6FF
   3++F6FF
   4++F6FF              		; Sprite 1 graphics to expand
   5++F6FF 00 60        		DEFW sprite_unex_0
   6++F701
   7++F701              		; Sprite 2 graphics to expand
   8++F701 00 60        		DEFW sprite_unex_0
   9++F703
  10++F703              		; Read Block Number 1st (Right Most)
  11++F703              		; Read Quantity Second
  12++F703
  13++F703 F4           	defb %11110100
  14++F704 F4           	defb %11110100
  15++F705 F4           	defb %11110100
  16++F706 F4           	defb %11110100
  17++F707 F4           	defb %11110100
  18++F708 F4           	defb %11110100
  19++F709 F4           	defb %11110100
  20++F70A F4           	defb %11110100
  21++F70B F4           	defb %11110100
  22++F70C F4           	defb %11110100
  23++F70D FF           	defb %11111111
  24++F70E
  25++F70E
  26++F70E
  27++F70E              	; Sprites
  28++F70E
  29++F70E              	; No of sprites
  30++F70E 01           	DEFB 1
  31++F70F
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen30.asm
 102++F70F              screen_world02_31:
 103++F70F                   include "../screens/world02/screen31.asm"
# file opened: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen31.asm
   1++F70F
   2++F70F
   3++F70F
   4++F70F
   5++F70F              		; Sprite 1 graphics to expand
   6++F70F 00 60        		DEFW sprite_unex_0
   7++F711
   8++F711              		; Sprite 2 graphics to expand
   9++F711 00 60        		DEFW sprite_unex_0
  10++F713
  11++F713              		; Read Block Number 1st (Right Most)
  12++F713              		; Read Quantity Second
  13++F713
  14++F713 C4           	defb %11000100
  15++F714 17           	defb %00010111
  16++F715 D4           	defb %11010100
  17++F716 17           	defb %00010111
  18++F717 D4           	defb %11010100
  19++F718 17           	defb %00010111
  20++F719 D4           	defb %11010100
  21++F71A 17           	defb %00010111
  22++F71B D4           	defb %11010100
  23++F71C 17           	defb %00010111
  24++F71D D4           	defb %11010100
  25++F71E 17           	defb %00010111
  26++F71F D4           	defb %11010100
  27++F720 17           	defb %00010111
  28++F721 04           	defb %00000100
  29++F722 E7           	defb %11100111
  30++F723 04           	defb %00000100
  31++F724 E7           	defb %11100111
  32++F725 F4           	defb %11110100
  33++F726 04           	defb %00000100
  34++F727 FF           	defb %11111111
  35++F728
  36++F728
  37++F728
  38++F728
  39++F728
  40++F728
  41++F728              	; Sprites
  42++F728
  43++F728              	; No of sprites
  44++F728 01           	DEFB 1
  45++F729
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/../screens/world02/screen31.asm
 104++F729
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/includes/screens02.asm
 173+ F729
 174+ F729 45 4E 44 20  	defb 'END OF SCREENS'
 174+ F72D 4F 46 20 53
 174+ F731 43 52 45 45
 174+ F735 4E 53
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/world02.asm
3116  F737
3117  F737              	page 4
3118  F737              	ORG $c000
3119  C000 00 00 00...  	defs 15415
3120  FC37
3121  FC37              	page 6
3122  FC37
3123  FC37              	org $c000
3124  C000 00 00 00...  	defs 15415
3125  FC37
3126  FC37
3127  FC37              	page 7
3128  FC37
3129  FC37              	org $c000
3130  C000 00 00 00...  	defs 15415
3131  FC37
3132  FC37
3133  FC37              ;include "bank01.asm"
3134  FC37
3135  FC37              ; tell assembler to start at 8000h
3136  FC37              	;end main
3137  FC37
3138  FC37              	SAVESNA "src/test40.sna",main
3139  FC37              	SAVETAP "src/test40.tap",main
3140  FC37
# file closed: /Users/robertpearmain/Source/pickles-and-pearl/2020/src/test40.asm

Value    Label
------ - -----------------------------------------------------------
0x0000   paper_black
0x0008 X paper_blue
0x0010 X paper_red
0x0018 X paper_magenta
0x0020   paper_green
0x0028 X paper_cyan
0x0030 X paper_yellow
0x0038 X paper_white
0x0000 X ink_black
0x0001 X ink_blue
0x0002 X ink_red
0x0003   ink_magenta
0x0004 X ink_green
0x0005   ink_cyan
0x0006   ink_yellow
0x0007   ink_white
0x0040   attr_bright
0x0080 X attr_flash
0x0002   yscreenoffset
0x5840   attributes
0x0014   sprite_size
0x000C   sprite_frame_size
0x0003 X sprite_width
0x0002 X sprite_height
0x0000   title
0x0001   world1
0x0003   world2
0x0004 X world3
0x0006 X world4
0x0007 X world5
0x6000   sprite_unex_0
0x6240   sprite_unex_1
0x6480 X sprite_unex_2
0x66C0 X sprite_unex_3
0x6900 X sprite_unex_4
0x6B40 X sprite_unex_5
0x6D80 X sprite_unex_6
0x6FC0 X sprite_unex_7
0x7200 X sprite_unex_8
0x7440 X sprite_unex_9
0x7680 X sprite_unex_A
0x78C0 X sprite_unex_B
0x7B00 X sprite_unex_C
0x7D40 X sprite_unex_D
0x8000 X main
0x8BD6   go
0x8003   switchbank
0x8018 X PLY_AKM_REGISTERS_OFFSETVOLUME
0x8018 X PLY_AKM_DATA_OFFSETTRANSPOSITION
0x8018 X PLY_AKM_OFFSET1B
0x8018 X PLY_AKM_STOP_SOUNDS
0x8018 X PLY_AKM_USE_HOOKS
0x8019 X PLY_AKM_SOUNDEFFECTDATA_OFFSETINVERTEDVOLUME
0x8019 X PLY_AKM_OFFSET2B
0x8019 X PLY_AKM_DATA_OFFSETPTSTARTTRACK
0x8017 X PLY_AKM_START
0x8017 X PLY_AKM_DATA_OFFSETWAITEMPTYCELL
0x8151   PLY_AKM_INIT
0x801B X PLY_AKM_SOUNDEFFECTDATA_OFFSETSPEED
0x801B X PLY_AKM_DATA_OFFSETPTTRACK
0x801C X PLY_AKM_REGISTERS_OFFSETSOFTWAREPERIODLSB
0x801A X PLY_AKM_SOUNDEFFECTDATA_OFFSETCURRENTSTEP
0x81E5   PLY_AKM_PLAY
0x801E X PLY_AKM_DATA_OFFSETESCAPENOTE
0x801F X PLY_AKM_CHANNEL_SOUNDEFFECTDATASIZE
0x801F X PLY_AKM_DATA_OFFSETESCAPEINSTRUMENT
0x801D X PLY_AKM_DATA_OFFSETBASENOTE
0x81CF   PLY_AKM_INITVARS_END
0x8021 X PLY_AKM_DATA_OFFSETPTINSTRUMENT
0x8020   PLY_AKM_INITSOUNDEFFECTS
0x8020 X PLY_AKM_DATA_OFFSETESCAPEWAIT
0x8020 X PLY_AKM_DATA_OFFSETSECONDARYINSTRUMENT
0x8020 X PLY_AKM_REGISTERS_OFFSETSOFTWAREPERIODMSB
0x8026   PLY_AKM_DATA_OFFSETISPITCHUPDOWNUSED
0x8023 X PLY_AKM_DATA_OFFSETINSTRUMENTCURRENTSTEP
0x8024   PLY_AKM_PLAYSOUNDEFFECT
0x8024 X PLY_AKM_DATA_OFFSETINSTRUMENTSPEED
0x8027 X PLY_AKM_DATA_OFFSETTRACKPITCHINTEGER
0x8025 X PLY_AKM_PTSOUNDEFFECTTABLE
0x8025 X PLY_AKM_DATA_OFFSETTRACKINVERTEDVOLUME
0x802A X PLY_AKM_DATA_OFFSETTRACKPITCHSPEED
0x8029 X PLY_AKM_DATA_OFFSETTRACKPITCHDECIMAL
0x802C X PLY_AKM_DATA_OFFSETISARPEGGIOTABLEUSED
0x802D X PLY_AKM_DATA_OFFSETPTARPEGGIOTABLE
0x802F X PLY_AKM_DATA_OFFSETPTARPEGGIOOFFSET
0x8030 X PLY_AKM_DATA_OFFSETARPEGGIOCURRENTSTEP
0x8031 X PLY_AKM_DATA_OFFSETARPEGGIOCURRENTSPEED
0x8032 X PLY_AKM_DATA_OFFSETARPEGGIOORIGINALSPEED
0x8033 X PLY_AKM_DATA_OFFSETCURRENTARPEGGIOVALUE
0x8035 X PLY_AKM_DATA_OFFSETPTPITCHTABLE
0x8034 X PLY_AKM_DATA_OFFSETISPITCHTABLEUSED
0x8139   PLY_AKM_CHANNEL1_SOUNDEFFECTDATA
0x8038 X PLY_AKM_DATA_OFFSETPITCHCURRENTSTEP
0x8037 X PLY_AKM_DATA_OFFSETPTPITCHOFFSET
0x803A X PLY_AKM_DATA_OFFSETPITCHORIGINALSPEED
0x8039 X PLY_AKM_DATA_OFFSETPITCHCURRENTSPEED
0x803B X PLY_AKM_DATA_OFFSETCURRENTPITCHTABLEVALUE
0x803D X PLY_AKM_TRACK1_DATA_SIZE
0x804C X PLY_AKM_STOPSOUNDEFFECTFROMCHANNEL
0x805A   PLY_AKM_PLAYSOUNDEFFECTSSTREAM
0x872D   PLY_AKM_TRACK3_DATA_END
0x8087   PLY_AKM_PSES_PLAY
0x8141   PLY_AKM_CHANNEL2_SOUNDEFFECTDATA
0x8739   PLY_AKM_TRACK2_REGISTERS
0x8149   PLY_AKM_CHANNEL3_SOUNDEFFECTDATA
0x8745   PLY_AKM_TRACK3_REGISTERS
0x8756   PLY_AKM_MIXERREGISTER
0x8090   PLY_AKM_PSES_READFIRSTBYTE
0x80D5   PLY_AKM_PSES_SOFTWAREORSOFTWAREANDHARDWARE
0x80CE   PLY_AKM_PSES_HARDWAREONLY
0x80A6   PLY_AKM_PSES_S_ENDORLOOP
0x812D   PLY_AKM_PSES_MANAGEVOLUMEFROMA_FILTER4BITS
0x810F   PLY_AKM_PSES_READNOISEANDOPENNOISECHANNEL
0x80B7   PLY_AKM_PSES_SAVEPOINTERANDEXIT
0x80B1   PLY_AKM_PSES_S_LOOP
0x80CA   PLY_AKM_PSES_NOTREACHED
0x80F1   PLY_AKM_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE
0x80E7   PLY_AKM_PSES_SOFTWAREANDHARDWARE
0x8122   PLY_AKM_PSES_READSOFTWAREPERIOD
0x80FB   PLY_AKM_PSES_H_AFTERRETRIG
0x82D4   PLY_AKM_SETREG13OLD
0x82D2   PLY_AKM_SENDPSGREGISTERR13
0x8117   PLY_AKM_PSES_READHARDWAREPERIOD
0x812F   PLY_AKM_PSES_MANAGEVOLUMEFROMA_HARD
0x8752   PLY_AKM_NOISEREGISTER
0x875A   PLY_AKM_REG11
0x875E   PLY_AKM_REG12
0x8135   PLY_AKM_PSES_MVFA_NOOVERFLOW
0x813B X PLY_AKM_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME
0x813C X PLY_AKM_CHANNEL1_SOUNDEFFECTCURRENTSTEP
0x813D X PLY_AKM_CHANNEL1_SOUNDEFFECTSPEED
0x826A   PLY_AKM_READLINE
0x865F   PLY_AKM_PTARPEGGIOS
0x8694   PLY_AKM_PTPITCHES
0x81B5   PLY_AKM_INITVARS_START
0x8175   PLY_AKM_INITVARS_LOOP
0x81F1   PLY_AKM_PATTERNREMAININGHEIGHT
0x8200   PLY_AKM_PTLINKER
0x86BB   PLY_AKM_TRACK1_DATA
0x86BC   PLY_AKM_TRACK1_TRANSPOSITION
0x81EC   PLY_AKM_SPEED
0x81E9   PLY_AKM_TICKCOUNTER
0x86C5   PLY_AKM_TRACK1_PTINSTRUMENT
0x86EB   PLY_AKM_TRACK2_PTINSTRUMENT
0x8711   PLY_AKM_TRACK3_PTINSTRUMENT
0x826D   PLY_AKM_NOTEINDEXTABLE
0x81FC   PLY_AKM_LINKER
0x8399   PLY_AKM_RT_PRIMARYINSTRUMENT
0x8395   PLY_AKM_RT_SECONDARYINSTRUMENT
0x83EF   PLY_AKM_RT_PRIMARYWAIT
0x83F3   PLY_AKM_RT_SECONDARYWAIT
0x820D   PLY_AKM_DEFAULTSTARTNOTEINTRACKS
0x8218   PLY_AKM_DEFAULTSTARTINSTRUMENTINTRACKS
0x8223   PLY_AKM_DEFAULTSTARTWAITINTRACKS
0x8345   PLY_AKM_FLAGNOTEANDEFFECTINCELL
0x81CF X PLY_AKM_STOP
0x82DF   PLY_AKM_SENDPSGREGISTEREND
0x872E   PLY_AKM_TRACK1_VOLUME
0x873A   PLY_AKM_TRACK2_VOLUME
0x8746   PLY_AKM_TRACK3_VOLUME
0x82C2   PLY_AKM_SENDPSG
0x8287   PLY_AKM_TICKCOUNTERMANAGED
0x81FC X PLY_AKM_TRACKINDEX
0x8203   PLY_AKM_LINKERPOSTPT
0x86E1   PLY_AKM_TRACK1_DATA_END
0x8707   PLY_AKM_TRACK2_DATA_END
0x86C2   PLY_AKM_TRACK1_ESCAPENOTE
0x86E8   PLY_AKM_TRACK2_ESCAPENOTE
0x870E   PLY_AKM_TRACK3_ESCAPENOTE
0x86C3   PLY_AKM_TRACK1_ESCAPEINSTRUMENT
0x86E9   PLY_AKM_TRACK2_ESCAPEINSTRUMENT
0x870F   PLY_AKM_TRACK3_ESCAPEINSTRUMENT
0x86C4   PLY_AKM_TRACK1_ESCAPEWAIT
0x86EA   PLY_AKM_TRACK2_ESCAPEWAIT
0x8710   PLY_AKM_TRACK3_ESCAPEWAIT
0x8242   PLY_AKM_LINKERAFTERSPEEDCHANGE
0x823F   PLY_AKM_LINKERSPEEDCHANGE
0x824D   PLY_AKM_LINKERUSEPREVIOUSHEIGHT
0x824F   PLY_AKM_LINKERSETREMAININGHEIGHT
0x824D X PLY_AKM_LINKERPREVIOUSREMAININGHEIGHT
0x82E3   PLY_AKM_CHECKTRANSPOSITIONANDTRACK
0x826A X PLY_AKM_PTINSTRUMENTS
0x832F   PLY_AKM_READTRACK
0x8765   PLY_AKM_PERIODTABLE
0x843B   PLY_AKM_MANAGEEFFECTS
0x84DA   PLY_AKM_PLAYSOUNDSTREAM
0x82CA   PLY_AKM_SENDPSGREGISTER
0x82CB   PLY_AKM_SENDPSGREGISTERAFTERPOP
0x82D2 X PLY_AKM_SETREG13
0x82DF X PLY_AKM_SAVESP
0x82EC   PLY_AKM_CHECKTRANSPOSITIONANDTRACK_AFTERTRANSPOSITION
0x8322   PLY_AKM_CHECKTRANSPOSITIONANDTRACK_NONEWTRACK
0x830C   PLY_AKM_CHECKTRANSPOSITIONANDTRACK_TRACKOFFSET
0x833A   PLY_AKM_RT_NOEMPTYCELL
0x8340   PLY_AKM_RT_GETDATABYTE
0x836F   PLY_AKM_RT_NOTEREFERENCE
0x835F   PLY_AKM_RT_NOTEANDEFFECTS
0x8365   PLY_AKM_RT_NONOTEMAYBEEFFECTS
0x8358   PLY_AKM_RT_NEWESCAPENOTE
0x8376   PLY_AKM_RT_AFTERNOTEREAD
0x83F8   PLY_AKM_RT_READEFFECTSFLAG
0x83D6   PLY_AKM_RT_READWAITFLAGS
0x8390   PLY_AKM_RT_SAMEESCAPEINSTRUMENT
0x839B   PLY_AKM_RT_STORECURRENTINSTRUMENT
0x8395 X PLY_AKM_SECONDARYINSTRUMENT
0x8399 X PLY_AKM_PRIMARYINSTRUMENT
0x83EA   PLY_AKM_RT_SAMEESCAPEWAIT
0x83F5   PLY_AKM_RT_STORECURRENTWAIT
0x83EF X PLY_AKM_PRIMARYWAIT
0x83F3 X PLY_AKM_SECONDARYWAIT
0x8404   PLY_AKM_RT_READEFFECTS
0x83FD   PLY_AKM_RT_AFTEREFFECTS
0x8408   PLY_AKM_RT_READEFFECT
0x8627   PLY_AKM_EFFECTTABLE
0x841F   PLY_AKM_RT_READEFFECT_RETURN
0x8425 X PLY_AKM_RT_WAITLONG
0x8434   PLY_AKM_RT_CELLREAD
0x842C X PLY_AKM_RT_WAITSHORT
0x8469   PLY_AKM_ME_PITCHUPDOWNFINISHED
0x8459   PLY_AKM_ME_PITCHUPDOWN_NEGATIVESPEED
0x8454 X PLY_AKM_ME_PITCHUPDOWN_POSITIVESPEED
0x8460   PLY_AKM_ME_PITCHUPDOWN_SAVE
0x849F   PLY_AKM_ME_ARPEGGIOTABLEFINISHED
0x849B   PLY_AKM_ME_ARPEGGIOTABLE_SPEEDNOTREACHED
0x84B7   PLY_AKM_ME_PITCHTABLEENDNOTREACHED_POSITIVE
0x84D5   PLY_AKM_ME_PITCHTABLE_SPEEDNOTREACHED
0x84E0   PLY_AKM_PSS_READFIRSTBYTE
0x8507   PLY_AKM_PSS_SOFTORSOFTANDHARD
0x8555   PLY_AKM_PSS_SOFTWARETOHARDWARE
0x84F8   PLY_AKM_PSS_NSNH_NOTENDOFSOUND
0x859A   PLY_AKM_PSS_SHARED_ADJUSTVOLUME
0x85A2   PLY_AKM_PSS_READNOISE
0x852F   PLY_AKM_PSS_SHARED_STOREINSTRUMENTPOINTER
0x8546   PLY_AKM_PSS_SOFTANDHARD
0x851E   PLY_AKM_PSS_S_AFTERARPANDORNOISE
0x85AA   PLY_AKM_CALCULATEPERIODFORBASENOTE
0x85E7   PLY_AKM_READPITCHANDADDTOPERIOD
0x853B   PLY_AKM_PSS_S_SPEEDREACHED
0x8577   PLY_AKM_PSS_SHARED_READENVBITPITCHARP_SOFTPERIOD_HARDVOL_HARDENV
0x856C   PLY_AKM_PSS_STH_RATIOEND
0x8562   PLY_AKM_PSS_STH_RATIOLOOP
0x8589   PLY_AKM_PSS_SHARED_RENVBAP_AFTERARPEGGIO
0x85B6   PLY_AKM_FINDOCTAVE_LOOP
0x85CE   PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP_FINISHED
0x85C8   PLY_AKM_FINDOCTAVE_OCTAVESHIFTLOOP
0x85D1   PLY_AKM_FINDOCTAVE_FINISHED
0x85DE   PLY_AKM_CALCULATEPERIODFORBASENOTE_NOPITCHTABLE
0x85F3   PLY_AKM_EFFECTRESETWITHVOLUME
0x8606   PLY_AKM_EFFECTVOLUME
0x860C   PLY_AKM_EFFECTFORCEINSTRUMENTSPEED
0x86B5   PLY_AKM_EFFECTREADIFESCAPE
0x8615   PLY_AKM_EFFECTFORCEPITCHSPEED
0x861E   PLY_AKM_EFFECTFORCEARPEGGIOSPEED
0x8637   PLY_AKM_EFFECTPITCHUPDOWN
0x8652   PLY_AKM_EFFECTARPEGGIOTABLE
0x8686   PLY_AKM_EFFECTPITCHTABLE
0x864B   PLY_AKM_EFFECTPITCHUPDOWN_DEACTIVATED
0x8680   PLY_AKM_EFFECTARPEGGIOTABLE_STOP
0x86BB X PLY_AKM_TRACK1_WAITEMPTYCELL
0x86BD X PLY_AKM_TRACK1_PTSTARTTRACK
0x86BF X PLY_AKM_TRACK1_PTTRACK
0x86C1 X PLY_AKM_TRACK1_BASENOTE
0x86C7 X PLY_AKM_TRACK1_INSTRUMENTCURRENTSTEP
0x86C8 X PLY_AKM_TRACK1_INSTRUMENTSPEED
0x86C9 X PLY_AKM_TRACK1_TRACKINVERTEDVOLUME
0x86CA X PLY_AKM_TRACK1_ISPITCHUPDOWNUSED
0x86CB X PLY_AKM_TRACK1_TRACKPITCHINTEGER
0x86CD X PLY_AKM_TRACK1_TRACKPITCHDECIMAL
0x86CE X PLY_AKM_TRACK1_TRACKPITCHSPEED
0x86D0 X PLY_AKM_TRACK1_ISARPEGGIOTABLEUSED
0x86D1 X PLY_AKM_TRACK1_PTARPEGGIOTABLE
0x86D3 X PLY_AKM_TRACK1_PTARPEGGIOOFFSET
0x86D4 X PLY_AKM_TRACK1_ARPEGGIOCURRENTSTEP
0x86D5 X PLY_AKM_TRACK1_ARPEGGIOCURRENTSPEED
0x86D6 X PLY_AKM_TRACK1_ARPEGGIOORIGINALSPEED
0x86D7 X PLY_AKM_TRACK1_CURRENTARPEGGIOVALUE
0x86D8 X PLY_AKM_TRACK1_ISPITCHTABLEUSED
0x86D9 X PLY_AKM_TRACK1_PTPITCHTABLE
0x86DB X PLY_AKM_TRACK1_PTPITCHOFFSET
0x86DC X PLY_AKM_TRACK1_PITCHCURRENTSTEP
0x86DD X PLY_AKM_TRACK1_PITCHCURRENTSPEED
0x86DE X PLY_AKM_TRACK1_PITCHORIGINALSPEED
0x86DF X PLY_AKM_TRACK1_CURRENTPITCHTABLEVALUE
0x86E1 X PLY_AKM_TRACK2_DATA
0x86E1 X PLY_AKM_TRACK2_WAITEMPTYCELL
0x86E5 X PLY_AKM_TRACK2_PTTRACK
0x8707 X PLY_AKM_TRACK3_DATA
0x8707 X PLY_AKM_TRACK3_WAITEMPTYCELL
0x870B X PLY_AKM_TRACK3_PTTRACK
0x872D X PLY_AKM_REGISTERS_RETTABLE
0x872D X PLY_AKM_TRACK1_REGISTERS
0x8732 X PLY_AKM_TRACK1_SOFTWAREPERIODLSB
0x8736 X PLY_AKM_TRACK1_SOFTWAREPERIODMSB
0x873E X PLY_AKM_TRACK2_SOFTWAREPERIODLSB
0x8742 X PLY_AKM_TRACK2_SOFTWAREPERIODMSB
0x874A X PLY_AKM_TRACK3_SOFTWAREPERIODLSB
0x874E X PLY_AKM_TRACK3_SOFTWAREPERIODMSB
0x877D X PLY_AKM_END
0x877D   PNP_START
0x8785   PNP_INSTRUMENTINDEXES
0x87A1   PNP_ARPEGGIOINDEXES
0x8789   PNP_INSTRUMENT0
0x878E   PNP_INSTRUMENT1
0x878A   PNP_INSTRUMENT0LOOP
0x87A1 X PNP_PITCHINDEXES
0x87A1 X PNP_SUBSONG0
0x880F   PNP_SUBSONG0_NOTEINDEXES
0x87BF   PNP_SUBSONG0_TRACKINDEXES
0x87AE   PNP_SUBSONG0_LOOP
0x87BF X PNP_SUBSONG0_TRACK0
0x87D4 X PNP_SUBSONG0_TRACK1
0x87E7 X PNP_SUBSONG0_TRACK2
0x87E9 X PNP_SUBSONG0_TRACK3
0x87FE X PNP_SUBSONG0_TRACK4
0x8816   SOUNDEFFECTS_SOUNDEFFECTS
0x8820   SOUNDEFFECTS_SOUNDEFFECTS_SOUND1
0x8832   SOUNDEFFECTS_SOUNDEFFECTS_SOUND2
0x8858   SOUNDEFFECTS_SOUNDEFFECTS_SOUND3
0x8897   SOUNDEFFECTS_SOUNDEFFECTS_SOUND4
0x88AD   SOUNDEFFECTS_SOUNDEFFECTS_SOUND5
0x8821 X SOUNDEFFECTS_SOUNDEFFECTS_SOUND1_LOOP
0x8833 X SOUNDEFFECTS_SOUNDEFFECTS_SOUND2_LOOP
0x8859 X SOUNDEFFECTS_SOUNDEFFECTS_SOUND3_LOOP
0x8898 X SOUNDEFFECTS_SOUNDEFFECTS_SOUND4_LOOP
0x88AE X SOUNDEFFECTS_SOUNDEFFECTS_SOUND5_LOOP
0x88F0   keyxpostemp
0x88F1   keyypostemp
0x88F2   gotkey
0x88F3   lastcol
0x88F4   energy
0x88F5   keyslefttocollect
0x88F6   totalsprites
0x88F7   dl_xpos
0x88F8   dl_ypos
0x88F9   dl_block
0x88FA   jump
0x88FB   shcol
0x88FC   shbit
0x88FD X shand
0x88FE   unexs
0x8900   unexd
0x8902   collided
0x8903   player_xpos_onscreen
0x8904   player_ypos_onscreen
0x8905   currentworld
0x8906   currentscreen
0x8907   musicon
0x8908   playeronscreenpos
0x891C   playerinitiatepositions
0xD100   sprite_buffer_1
0xA700   player_gfx
0x8930   lives_message
0x8939   lives
0x893F   items_left
0x8952   items
0x8959   redefine_message
0x897B   menu_window
0x897F   menu_message
0x89F4   energy_message
0x89FE   font
0x8C84   playmusic
0x8C6E   initiate_im2_interrupts
0x8BE5   begin
0xC000   showmenu
0x8BEF   start
0x8CC3   startnewgame
0x8BFC   main_loop
0x90C4   blit_update_buffer
0x91ED   clear_update_buffer
0x8D5C   move_player
0x8E88   move_sprites
0x976C   showkeys
0x8C29   endoflife
0x9872   decreaseenergy
0x8C44   newlife
0x8CB7   getplayerstatus
0xC000   sprites
0x92D6   setup_screen
0x8D03   resetenergy
0x93B6   draw_string
0xBE00   im2table
0x8C92   getscreen
0xF300   screens
0x8C9F   initiateplayer
0x8CAB   saveplayerstatus
0xC100   keystocollect
0xA600   keydata
0x9854   resetkeystocollect
0x9427   draw_string_multiple
0x8D0F   su1
0x8D26   menu
0x9507   draw_window
0x8D32   me1
0x9483   key_wait_unique
0x0024   key_1
0x001C   key_2
0x0014   key_3
0x000C   key_4
0x0004   key_5
0x000D   key_r
0x0010   key_m
0x8D4C   redefine
0x94BC   key_redefine
0x8E18   jumping
0x9575   key_store
0x945B   key_test
0x8DD9   mpr
0x8D94   mpl
0x8E08   jumpstart
0x8DA4   checkscreenleft
0x8DB0 X csl1
0x8DC3   checkscreendown
0x8DE5   checkscreenright
0x8DF5   csr1
0x9021   amionplatform
0x8E25   jump2
0xBC00   jumppattern
0x8E4F   testup
0x8E79   testleftorright
0x8E69   checkscreenup
0x8FE6   amihittingblock
0x8E84   testleft
0x8E8F   ms1
0x8FB5   get_next_sprite
0x8E98 X bank_decrease
0x8EB8   move_decrease
0x8EA1 X bank_counter_reset
0x8EC4   move_counter_reset
0x8EDA   check_sprite_is_on_platform
0x8EF2   sprite_can_move
0x923F   remove_sprite
0x8FB2   sprite_can_be_drawn
0x8F5E   move_sprite_left
0x8F13   move_sprite_right
0x8FA7   calculate_correct_sprite_frame
0x8F36   move_sprite_right_hit_maximum
0x8FCD   get_player_buffer_address
0x8F55   move_sprite_right_ok
0xCE00   back_colour_buffer
0xCB00   bg_buffer
0x8F50   sprite_store_right_move_position
0x8F82   move_sprite_left_hit_minimum
0x8FA0   move_sprite_left_ok
0x8F9B   sprite_store_left_move_position
0x8FAB   ccsf_lp
0x905C   draw_sprite
0x8FC8   nxt1
0x9734   collide
0xBB00   row_number_lookup
0x8FFD   amhb01
0x900E   amhb02
0x901E   amhb03
0x9038   ami01
0x9049   ami02
0x9059   ami03
0x9571   ypostemp
0x9570   xpostemp
0x9069 X spr_addr
0x9096   ds_char
0x9071   ds_1
0x9076   ds_2
0xC800   update_buffer
0x908F X spr_buffer_addr
0x9096 X ds_4
0x90A6 X ds_5
0x90CA   bb1
0x9160   bb2
0x90D0 X bb3
0xC200   bg_chars
0xDA00   scratch
0x91AF   draw_char
0x915E   bb6
0x9109   cells_a
0x9134   cells_b
0x9168   draw_char_masked
0xB500   scr_lookup
0x91CE   blit_char
0x91FB   draw_background
0x9201   dbft_1
0x924E   rs_1
0x9253   rs_2
0x927A X rs_4
0x927C X rs_5
0x9297   draw_screen_compressed
0x929D   dlc_1
0x92B0   dlc_2
0x9334   draw_block
0x92B7 X dlc_3
0x92CF   dlc_4
0xDB00   sprite_expand_1
0x9603   expand
0xE700   sprite_expand_2
0x932D   screencont
0xC014   enemy_sprites
0x96A9   decompress_screen_sprites
0xC700   blox
0xC600   bg_chars_attrs
0x0000 X key_b
0x0001 X key_h
0x0002 X key_y
0x0003 X key_6
0x0005 X key_t
0x0006 X key_g
0x0007 X key_v
0x0008 X key_n
0x0009 X key_j
0x000A X key_u
0x000B X key_7
0x000E X key_f
0x000F X key_c
0x0011 X key_k
0x0012 X key_i
0x0013 X key_8
0x0015 X key_e
0x0016 X key_d
0x0017 X key_x
0x0018 X key_symbol
0x0019 X key_l
0x001A X key_o
0x001B X key_9
0x001D X key_w
0x001E X key_s
0x001F X key_z
0x0020 X key_space
0x0021 X key_enter
0x0022 X key_p
0x0023 X key_0
0x0025 X key_q
0x0026 X key_a
0x0027 X key_shift
0x9390   calculate_screen_address
0xB300   screentable
0x939E   calculate_attribute_address
0x9572   color
0x93DB   draw_string_chars
0x9415   draw_char_to_screen
0x9417   dcts1
0x941E   draw_blank_char_to_screen
0x9421   dbcts1
0x9432   key_wait
0x943B   key_find
0x9441   k_f_1
0x9454   k_f_3
0x944C   k_f_2
0x946C   k_t_1
0x9471   k_t_2
0x9477   key_string_lookup
0x95B3   key_string_table
0x948E   k_w_u_1
0x9495   k_w_u_2
0x94A2   k_w_u_lastkey
0x94A3   key_redefine_check_unique
0x94A9   k_r_c_u_1
0x956D   key_redefine_xpos
0x956E   key_redefine_ypos
0x956F   key_redefine_color
0x94E0   k_r_1
0x94E2   k_r_2
0x9573   widthtemp
0x9574   heighttemp
0x951E   window
0x9522   w1
0x952B   w2
0x9552   cls
0x957A X key_strings
0x957A   key_string_1
0x957B   key_string_2
0x957C   key_string_3
0x957D   key_string_4
0x957E   key_string_5
0x957F   key_string_6
0x9580   key_string_7
0x9581   key_string_8
0x9582   key_string_9
0x9583   key_string_0
0x9584   key_string_a
0x9585   key_string_b
0x9586   key_string_c
0x9587   key_string_d
0x9588   key_string_e
0x9589   key_string_f
0x958A   key_string_g
0x958B   key_string_h
0x958C   key_string_i
0x958D   key_string_j
0x958E   key_string_k
0x958F   key_string_l
0x9590   key_string_m
0x9591   key_string_n
0x9592   key_string_o
0x9593   key_string_p
0x9594   key_string_q
0x9595   key_string_r
0x9596   key_string_s
0x9597   key_string_t
0x9598   key_string_u
0x9599   key_string_v
0x959A   key_string_w
0x959B   key_string_x
0x959C   key_string_y
0x959D   key_string_z
0x959E   key_string_enter
0x95A3   key_string_shift
0x95A8   key_string_symbol
0x95AE   key_string_space
0x960C   ex5
0x960F   ex3
0x9613   ex2
0x9616   ex1
0x9621   ex4
0x9640   shbb
0x964C   shaa
0x9650   sh1
0x9686   rotate_bytes
0x968A   sh5
0x968E   sh2
0x96A0 X sh2c
0x96B2   dls
0x972C   loadleft
0x972C X ret
0x9773   sk1
0x97EB   sk2
0x9795   sk4
0x97E7   sk3
0x97FC   updateitemsdisplay
0x97E2   sk5
0x981F   drawkey
0x981C   uid1
0x981D   endofgame
0xDA08   keygfx
0x986C   rktc1
0xA700 X PEARLR1i
0xAA00 X PEARLL1I
0xAD00 X PEARLR2I
0xB000 X PEARLL2I
0xBCBC X im2routine
0xD400   sprite_buffer_2
0xD700   sprite_buffer_3
0xC014   sm2
0xC01D   sm3
0xF400   screen_world01_0
0xF42E   screen_world01_1
0xF45F   screen_world01_2
0xF485   screen_world01_3
0xF4A4   screen_world01_4
0xF4B4   screen_world01_5
0xF4D7   screen_world01_6
0xF4E7   screen_world01_7
0xF51E   screen_world01_8
0xF53D   screen_world01_9
0xF560   screen_world01_10
0xF581   screen_world01_11
0xF5BB   screen_world01_12
0xF5CB   screen_world01_13
0xF5DB   screen_world01_14
0xF5EB   screen_world01_15
0xF606   screen_world01_16
0xF616   screen_world01_17
0xF626   screen_world01_18
0xF636   screen_world01_19
0xF651   screen_world01_20
0xF661   screen_world01_21
0xF671   screen_world01_22
0xF681   screen_world01_23
0xF69C   screen_world01_24
0xF6AC   screen_world01_25
0xF6BC   screen_world01_26
0xF6CC   screen_world01_27
0xF6E7   screen_world01_28
0xF6F7   screen_world01_29
0xF707   screen_world01_30
0xF717   screen_world01_31
0xF400   screen_world02_0
0xF42E   screen_world02_1
0xF45F   screen_world02_2
0xF47D   screen_world02_3
0xF49C   screen_world02_4
0xF4AC   screen_world02_5
0xF4CF   screen_world02_6
0xF4DF   screen_world02_7
0xF516   screen_world02_8
0xF535   screen_world02_9
0xF558   screen_world02_10
0xF579   screen_world02_11
0xF5B3   screen_world02_12
0xF5C3   screen_world02_13
0xF5D3   screen_world02_14
0xF5E3   screen_world02_15
0xF5FE   screen_world02_16
0xF60E   screen_world02_17
0xF61E   screen_world02_18
0xF62E   screen_world02_19
0xF649   screen_world02_20
0xF659   screen_world02_21
0xF669   screen_world02_22
0xF679   screen_world02_23
0xF694   screen_world02_24
0xF6A4   screen_world02_25
0xF6B4   screen_world02_26
0xF6C4   screen_world02_27
0xF6DF   screen_world02_28
0xF6EF   screen_world02_29
0xF6FF   screen_world02_30
0xF70F   screen_world02_31
